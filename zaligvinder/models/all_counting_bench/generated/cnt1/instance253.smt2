;test regex ^(revert: )?(feat|fix|polish|docs|style|refactor|perf|test|workflow|ci|chore|types|build|merge)(\(.+\))?: .{1,50}
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ (re.opt (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "v") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "t") (re.++ (str.to_re ":") (str.to_re " "))))))))) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "f") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (str.to_re "t")))) (re.++ (str.to_re "f") (re.++ (str.to_re "i") (str.to_re "x")))) (re.++ (str.to_re "p") (re.++ (str.to_re "o") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "s") (str.to_re "h"))))))) (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "c") (str.to_re "s"))))) (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "y") (re.++ (str.to_re "l") (str.to_re "e")))))) (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "f") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "o") (str.to_re "r"))))))))) (re.++ (str.to_re "p") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (str.to_re "f"))))) (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "s") (str.to_re "t"))))) (re.++ (str.to_re "w") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "k") (re.++ (str.to_re "f") (re.++ (str.to_re "l") (re.++ (str.to_re "o") (str.to_re "w"))))))))) (re.++ (str.to_re "c") (str.to_re "i"))) (re.++ (str.to_re "c") (re.++ (str.to_re "h") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (str.to_re "e")))))) (re.++ (str.to_re "t") (re.++ (str.to_re "y") (re.++ (str.to_re "p") (re.++ (str.to_re "e") (str.to_re "s")))))) (re.++ (str.to_re "b") (re.++ (str.to_re "u") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (str.to_re "d")))))) (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "g") (str.to_re "e")))))) (re.++ (re.opt (re.++ (str.to_re "(") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (str.to_re ")")))) (re.++ (str.to_re ":") (re.++ (str.to_re " ") ((_ re.loop 1 50) (re.diff re.allchar (str.to_re "\n")))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)