;test regex ([\/\@])(\d{6})(.)([\d\.\s]{7})([NSns])(.)([\d\.\s]{8})([EWew])(.)(.*)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.union (str.to_re "/") (str.to_re "@")) (re.++ ((_ re.loop 6 6) (re.range "0" "9")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ ((_ re.loop 7 7) (re.union (re.range "0" "9") (re.union (str.to_re ".") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))) (re.++ (re.union (str.to_re "N") (re.union (str.to_re "S") (re.union (str.to_re "n") (str.to_re "s")))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.union (str.to_re ".") (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))) (re.++ (re.union (str.to_re "E") (re.union (str.to_re "W") (re.union (str.to_re "e") (str.to_re "w")))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.* (re.diff re.allchar (str.to_re "\n")))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)