;test regex ^(\d+),(-|)(\d{1,6}|\d+\.\d+|\.\d+|),(-|)(\d{1,6}|\d+\.\d+|\.\d+|),(-|)(\d{1,6}|\d+\.\d+|\.\d+|),(-|)(\d{1,6}|\d+\.\d+|\.\d+|),(-|)(\d{1,6}|\d+\.\d+|\.\d+|),([01]{0,8})
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "") (re.+ (re.range "0" "9"))) (re.++ (str.to_re ",") (re.++ (re.union (re.++ (str.to_re "") (str.to_re "-")) (str.to_re "")) (re.union (re.++ (str.to_re "") (re.union (re.union ((_ re.loop 1 6) (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (str.to_re ""))))) (re.++ (str.to_re ",") (re.++ (re.union (re.++ (str.to_re "") (str.to_re "-")) (str.to_re "")) (re.union (re.++ (str.to_re "") (re.union (re.union ((_ re.loop 1 6) (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (str.to_re ""))))) (re.++ (str.to_re ",") (re.++ (re.union (re.++ (str.to_re "") (str.to_re "-")) (str.to_re "")) (re.union (re.++ (str.to_re "") (re.union (re.union ((_ re.loop 1 6) (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (str.to_re ""))))) (re.++ (str.to_re ",") (re.++ (re.union (re.++ (str.to_re "") (str.to_re "-")) (str.to_re "")) (re.union (re.++ (str.to_re "") (re.union (re.union ((_ re.loop 1 6) (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (str.to_re ""))))) (re.++ (str.to_re ",") (re.++ (re.union (re.++ (str.to_re "") (str.to_re "-")) (str.to_re "")) (re.union (re.++ (str.to_re "") (re.union (re.union ((_ re.loop 1 6) (re.range "0" "9")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (re.++ (str.to_re ".") (re.+ (re.range "0" "9"))))) (str.to_re ""))))) (re.++ (str.to_re ",") ((_ re.loop 0 8) (str.to_re "01"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)