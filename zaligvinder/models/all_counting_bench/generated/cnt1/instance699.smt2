;test regex \A((\d{1,2}[-\/]\d{1,2}[-\/]\d{4})|(\d{4}[-\/]\d{1,2}[-\/]\d{1,2})|(\d{1,2}-[A-Za-z]{3,4}-\d{4})|([A-Za-z]{3,4} +\d{1,2} \d{2,4}))(T| +)(\d{1,2}:\d{2}(:\d{2})?(\.\d+)? ?(PM|AM|pm|am)?((-|\+)\d{2}:?\d{2})?Z?)\z
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "A") (re.++ (re.union (re.union (re.union (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.union (str.to_re "-") (str.to_re "/")) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.union (str.to_re "-") (str.to_re "/")) ((_ re.loop 4 4) (re.range "0" "9")))))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.union (str.to_re "-") (str.to_re "/")) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.union (str.to_re "-") (str.to_re "/")) ((_ re.loop 1 2) (re.range "0" "9"))))))) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ ((_ re.loop 3 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ (str.to_re "-") ((_ re.loop 4 4) (re.range "0" "9"))))))) (re.++ ((_ re.loop 3 4) (re.union (re.range "A" "Z") (re.range "a" "z"))) (re.++ (re.+ (str.to_re " ")) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re " ") ((_ re.loop 2 4) (re.range "0" "9"))))))) (re.++ (re.union (str.to_re "T") (re.+ (str.to_re " "))) (re.++ (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.opt (re.++ (str.to_re ":") ((_ re.loop 2 2) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re ".") (re.+ (re.range "0" "9")))) (re.++ (re.opt (str.to_re " ")) (re.++ (re.opt (re.union (re.union (re.union (re.++ (str.to_re "P") (str.to_re "M")) (re.++ (str.to_re "A") (str.to_re "M"))) (re.++ (str.to_re "p") (str.to_re "m"))) (re.++ (str.to_re "a") (str.to_re "m")))) (re.++ (re.opt (re.++ (re.union (str.to_re "-") (str.to_re "+")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.opt (str.to_re ":")) ((_ re.loop 2 2) (re.range "0" "9")))))) (re.opt (str.to_re "Z")))))))))) (str.to_re "z")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)