;test regex ^([ABC])\t([0-9]{1,20})\tCREATED\t(\S+)\t([0-9]{1,20})\t([+-]?[0-9]{1,20}|NONE)\t(\S+)\t(.*)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (str.to_re "A") (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (str.to_re "\u{09}") (re.++ ((_ re.loop 1 20) (re.range "0" "9")) (re.++ (str.to_re "\u{09}") (re.++ (str.to_re "C") (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "D") (re.++ (str.to_re "\u{09}") (re.++ (re.+ (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (re.++ (str.to_re "\u{09}") (re.++ ((_ re.loop 1 20) (re.range "0" "9")) (re.++ (str.to_re "\u{09}") (re.++ (re.union (re.++ (re.opt (re.union (str.to_re "+") (str.to_re "-"))) ((_ re.loop 1 20) (re.range "0" "9"))) (re.++ (str.to_re "N") (re.++ (str.to_re "O") (re.++ (str.to_re "N") (str.to_re "E"))))) (re.++ (str.to_re "\u{09}") (re.++ (re.+ (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (re.++ (str.to_re "\u{09}") (re.* (re.diff re.allchar (str.to_re "\n")))))))))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)