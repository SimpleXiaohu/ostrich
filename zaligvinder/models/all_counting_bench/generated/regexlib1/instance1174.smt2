;test regex ^((0|(\(0\)))?|(00|(\(00\)))?(\s?|-?)(27|\(27\))|((\+27))|(\(\+27\))|\(00(\s?|-?)27\))( |-)?(\(?0?\)?)( |-)?\(?(1[0-9]|2[1-4,7-9]|3[1-6,9]|4[0-9]|5[1,3,6-9]|7[1-4,6,8,9]|8[0-9])\)?(\s?|-?)((\d{3}(\s?|-?)\d{4}$)|((\d{4})(\s?|-?)(\d{3})$)|([0-2](\s?|-?)(\d{3}(\s?|-?)\d{3}$)))
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ (re.union (re.union (re.union (re.union (re.opt (re.union (str.to_re "0") (re.++ (str.to_re "(") (re.++ (str.to_re "0") (str.to_re ")"))))) (re.++ (re.opt (re.union (str.to_re "00") (re.++ (str.to_re "(") (re.++ (str.to_re "00") (str.to_re ")"))))) (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) (re.union (str.to_re "27") (re.++ (str.to_re "(") (re.++ (str.to_re "27") (str.to_re ")"))))))) (re.++ (str.to_re "+") (str.to_re "27"))) (re.++ (str.to_re "(") (re.++ (str.to_re "+") (re.++ (str.to_re "27") (str.to_re ")"))))) (re.++ (str.to_re "(") (re.++ (str.to_re "00") (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) (re.++ (str.to_re "27") (str.to_re ")")))))) (re.++ (re.opt (re.union (str.to_re " ") (str.to_re "-"))) (re.++ (re.++ (re.opt (str.to_re "(")) (re.++ (re.opt (str.to_re "0")) (re.opt (str.to_re ")")))) (re.++ (re.opt (re.union (str.to_re " ") (str.to_re "-"))) (re.++ (re.opt (str.to_re "(")) (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "1") (re.range "0" "9")) (re.++ (str.to_re "2") (re.union (re.range "1" "4") (re.union (str.to_re ",") (re.range "7" "9"))))) (re.++ (str.to_re "3") (re.union (re.range "1" "6") (re.union (str.to_re ",") (str.to_re "9"))))) (re.++ (str.to_re "4") (re.range "0" "9"))) (re.++ (str.to_re "5") (re.union (str.to_re "1") (re.union (str.to_re ",") (re.union (str.to_re "3") (re.union (str.to_re ",") (re.range "6" "9"))))))) (re.++ (str.to_re "7") (re.union (re.range "1" "4") (re.union (str.to_re ",") (re.union (str.to_re "6") (re.union (str.to_re ",") (re.union (str.to_re "8") (re.union (str.to_re ",") (str.to_re "9"))))))))) (re.++ (str.to_re "8") (re.range "0" "9"))) (re.++ (re.opt (str.to_re ")")) (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) (re.union (re.union (re.++ (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) ((_ re.loop 4 4) (re.range "0" "9")))) (str.to_re "")) (re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))) (re.++ (re.range "0" "2") (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) (re.++ (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.union (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (str.to_re "-"))) ((_ re.loop 3 3) (re.range "0" "9")))) (str.to_re ""))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)