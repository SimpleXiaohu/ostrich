;test regex ^(H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}\d{4}(NE|NW|SE|SW)?$|((H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}(\d{4}|\d{6}|\d{8}|\d{10}))$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (str.to_re "") (re.++ ((_ re.loop 1 1) (re.union (re.union (re.union (re.union (re.++ (str.to_re "H") (re.union (re.union (re.union (re.union (str.to_re "P") (str.to_re "T")) (str.to_re "U")) (str.to_re "Y")) (str.to_re "Z"))) (re.++ (str.to_re "N") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "A") (str.to_re "B")) (str.to_re "C")) (str.to_re "D")) (str.to_re "F")) (str.to_re "G")) (str.to_re "H")) (str.to_re "J")) (str.to_re "K")) (str.to_re "L")) (str.to_re "M")) (str.to_re "N")) (str.to_re "O")) (str.to_re "R")) (str.to_re "S")) (str.to_re "T")) (str.to_re "U")) (str.to_re "W")) (str.to_re "X")) (str.to_re "Y")) (str.to_re "Z")))) (re.++ (str.to_re "O") (str.to_re "V"))) (re.++ (str.to_re "S") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "C") (str.to_re "D")) (str.to_re "E")) (str.to_re "G")) (str.to_re "H")) (str.to_re "J")) (str.to_re "K")) (str.to_re "M")) (str.to_re "N")) (str.to_re "O")) (str.to_re "P")) (str.to_re "R")) (str.to_re "S")) (str.to_re "T")) (str.to_re "U")) (str.to_re "W")) (str.to_re "X")) (str.to_re "Y")) (str.to_re "Z")))) (re.++ (str.to_re "T") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "A") (str.to_re "F")) (str.to_re "G")) (str.to_re "L")) (str.to_re "M")) (str.to_re "Q")) (str.to_re "R")) (str.to_re "V"))))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.opt (re.union (re.union (re.union (re.++ (str.to_re "N") (str.to_re "E")) (re.++ (str.to_re "N") (str.to_re "W"))) (re.++ (str.to_re "S") (str.to_re "E"))) (re.++ (str.to_re "S") (str.to_re "W"))))))) (str.to_re "")) (re.++ (re.++ ((_ re.loop 1 1) (re.union (re.union (re.union (re.union (re.++ (str.to_re "H") (re.union (re.union (re.union (re.union (str.to_re "P") (str.to_re "T")) (str.to_re "U")) (str.to_re "Y")) (str.to_re "Z"))) (re.++ (str.to_re "N") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "A") (str.to_re "B")) (str.to_re "C")) (str.to_re "D")) (str.to_re "F")) (str.to_re "G")) (str.to_re "H")) (str.to_re "J")) (str.to_re "K")) (str.to_re "L")) (str.to_re "M")) (str.to_re "N")) (str.to_re "O")) (str.to_re "R")) (str.to_re "S")) (str.to_re "T")) (str.to_re "U")) (str.to_re "W")) (str.to_re "X")) (str.to_re "Y")) (str.to_re "Z")))) (re.++ (str.to_re "O") (str.to_re "V"))) (re.++ (str.to_re "S") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "C") (str.to_re "D")) (str.to_re "E")) (str.to_re "G")) (str.to_re "H")) (str.to_re "J")) (str.to_re "K")) (str.to_re "M")) (str.to_re "N")) (str.to_re "O")) (str.to_re "P")) (str.to_re "R")) (str.to_re "S")) (str.to_re "T")) (str.to_re "U")) (str.to_re "W")) (str.to_re "X")) (str.to_re "Y")) (str.to_re "Z")))) (re.++ (str.to_re "T") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "A") (str.to_re "F")) (str.to_re "G")) (str.to_re "L")) (str.to_re "M")) (str.to_re "Q")) (str.to_re "R")) (str.to_re "V"))))) (re.union (re.union (re.union ((_ re.loop 4 4) (re.range "0" "9")) ((_ re.loop 6 6) (re.range "0" "9"))) ((_ re.loop 8 8) (re.range "0" "9"))) ((_ re.loop 10 10) (re.range "0" "9")))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)