;test regex ^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.union (re.union (re.union (re.++ (re.union (re.++ (re.opt (re.range "0" "1")) (re.range "0" "9")) (re.++ (str.to_re "2") (re.range "0" "8"))) (re.++ (str.to_re "/") (re.union (re.++ (re.opt (str.to_re "0")) (re.range "0" "9")) (re.++ (str.to_re "1") (re.range "0" "2"))))) (re.++ (str.to_re "29") (re.++ (str.to_re "/") (re.union (re.++ (re.opt (str.to_re "0")) (re.union (str.to_re "1") (re.union (str.to_re ",") (re.range "3" "9")))) (re.++ (str.to_re "1") (re.range "0" "2")))))) (re.++ (str.to_re "30") (re.++ (str.to_re "/") (re.union (re.++ (re.opt (str.to_re "0")) (re.union (str.to_re "1") (re.union (str.to_re ",") (re.range "3" "9")))) (re.++ (str.to_re "1") (re.range "0" "2")))))) (re.++ (str.to_re "31") (re.++ (str.to_re "/") (re.union (re.++ (re.opt (str.to_re "0")) (str.to_re "13578")) (re.++ (str.to_re "1") (re.range "0" "2")))))) (re.++ (str.to_re "/") (re.union (re.++ (str.to_re "19") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.range "2" "9") ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (str.to_re "29") (re.++ (str.to_re "/") (re.++ (re.opt (str.to_re "0")) (re.++ (str.to_re "2") (re.++ (str.to_re "/") (re.union (re.++ (re.union (re.++ (str.to_re "2468") (str.to_re "048")) (re.++ (str.to_re "3579") (str.to_re "26"))) (str.to_re "00")) (re.++ (re.union (str.to_re "19") (re.++ (re.range "2" "9") (re.range "0" "9"))) (re.union (re.union (re.++ (str.to_re "2468") (str.to_re "0")) (re.++ (str.to_re "02468") (str.to_re "48"))) (re.++ (str.to_re "13579") (str.to_re "26"))))))))))) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.union (re.++ (re.opt (str.to_re "01")) (re.range "0" "9")) (re.++ (str.to_re "2") (re.range "0" "3"))) ((_ re.loop 2 2) (re.++ (str.to_re ":") (re.++ (re.opt (re.range "0" "5")) (re.range "0" "9")))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)