;test regex (^[A-Z&#192;-&#220;]{1}[a-z&#224;-&#252;&#39;]+\s[a-zA-Z&#224;-&#252;&#192;-&#220;]+((([\s\.&#39;])|([a-z&#224;-&#252;&#39;]+))|[a-z&#224;-&#252;&#39;]+[a-zA-Z&#224;-&#252;&#192;-&#220;&#39;]+))
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ ((_ re.loop 1 1) (re.union (re.range "A" "Z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "192") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "220") (str.to_re ";"))))))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "224") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "252") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";"))))))))))))) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "224") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "252") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "192") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "220") (str.to_re ";"))))))))))))))))) (re.union (re.union (re.union (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.union (str.to_re ".") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";")))))) (re.+ (re.union (re.range "a" "z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "224") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "252") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";")))))))))))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "224") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "252") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";"))))))))))))) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "224") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "252") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "192") (re.union (re.range ";" "&") (re.union (str.to_re "#") (re.union (str.to_re "220") (re.union (str.to_re ";") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";"))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)