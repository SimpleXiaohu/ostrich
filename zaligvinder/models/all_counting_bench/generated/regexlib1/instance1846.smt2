;test regex (\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1})
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 1 1) (str.to_re "d")) (re.++ (str.to_re "-") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))) (re.++ (re.++ (str.to_re "o") (re.++ (str.to_re "f") (re.+ (str.to_re " ")))) (re.++ (str.to_re "\\") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re "\\") ((_ re.loop 5 5) (str.to_re "d"))))))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 1 1) (str.to_re "d")) (re.++ (str.to_re "-") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))) (re.++ (re.++ (str.to_re "o") (re.++ (str.to_re "f") (re.+ (str.to_re " ")))) (re.++ (str.to_re "\\") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re "\\") ((_ re.loop 4 4) (str.to_re "d")))))))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 1 1) (str.to_re "d")) (re.++ (str.to_re "-") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))) (re.++ (re.++ (str.to_re "o") (re.++ (str.to_re "f") (re.+ (str.to_re " ")))) (re.++ (str.to_re "\\") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re "\\") ((_ re.loop 3 3) (str.to_re "d")))))))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 1 1) (str.to_re "d")) (re.++ (str.to_re "-") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))) (re.++ (re.++ (str.to_re "o") (re.++ (str.to_re "f") (re.+ (str.to_re " ")))) (re.++ (str.to_re "\\") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d")))))))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 1 1) (str.to_re "d")) (re.++ (str.to_re "-") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))) (re.++ (re.++ (str.to_re "o") (re.++ (str.to_re "f") (re.+ (str.to_re " ")))) (re.++ (str.to_re "\\") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re "\\") ((_ re.loop 1 1) (str.to_re "d"))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)