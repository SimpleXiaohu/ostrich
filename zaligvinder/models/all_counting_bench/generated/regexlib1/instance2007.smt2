;test regex ^P(([0-9]+([.,][0-9]*)?Y)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?D)?T?([0-9]+([.,][0-9]*)?H)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?S)?)|\d{4}-?(0[1-9]|11|12)-?(?:[0-2]\d|30|31)T((?:[0-1][0-9]|[2][0-3]):?(?:[0-5][0-9]):?(?:[0-5][0-9]|60)|2400|24:00)$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "") (re.++ (str.to_re "P") (re.++ (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "Y")))) (re.++ (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "M")))) (re.++ (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "D")))) (re.++ (re.opt (str.to_re "T")) (re.++ (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "H")))) (re.++ (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "M")))) (re.opt (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re ",")) (re.* (re.range "0" "9")))) (str.to_re "S")))))))))))) (re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.opt (str.to_re "-")) (re.++ (re.union (re.union (re.++ (str.to_re "0") (re.range "1" "9")) (str.to_re "11")) (str.to_re "12")) (re.++ (re.opt (str.to_re "-")) (re.++ (re.union (re.union (re.++ (re.range "0" "2") (re.range "0" "9")) (str.to_re "30")) (str.to_re "31")) (re.++ (str.to_re "T") (re.union (re.union (re.++ (re.union (re.++ (re.range "0" "1") (re.range "0" "9")) (re.++ (str.to_re "2") (re.range "0" "3"))) (re.++ (re.opt (str.to_re ":")) (re.++ (re.++ (re.range "0" "5") (re.range "0" "9")) (re.++ (re.opt (str.to_re ":")) (re.union (re.++ (re.range "0" "5") (re.range "0" "9")) (str.to_re "60")))))) (str.to_re "2400")) (re.++ (str.to_re "24") (re.++ (str.to_re ":") (str.to_re "00")))))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)