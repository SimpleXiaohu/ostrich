;test regex ^(((\+?64\s*[-\.]?[3-9]|\(?0[3-9]\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{4})|((\+?64\s*[-\.\(]?2\d{1}[-\.\)]?|\(?02\d{1}\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{3,5})|((\+?64\s*[-\.]?[-\.\(]?800[-\.\)]?|[-\.\(]?0800[-\.\)]?)\s*[-\.]?\d{3}\s*[-\.]?(\d{2}|\d{5})))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (re.++ (str.to_re "64") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.range "3" "9"))))) (re.++ (re.opt (str.to_re "(")) (re.++ (str.to_re "0") (re.++ (re.range "3" "9") (re.opt (str.to_re ")")))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 4 4) (re.range "0" "9")))))))) (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (re.++ (str.to_re "64") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re "(")))) (re.++ (str.to_re "2") (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re ")")))))))))) (re.++ (re.opt (str.to_re "(")) (re.++ (str.to_re "02") (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.opt (str.to_re ")")))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 3 5) (re.range "0" "9"))))))))) (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (re.++ (str.to_re "64") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.++ (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re "(")))) (re.++ (str.to_re "800") (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re ")")))))))))) (re.++ (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re "(")))) (re.++ (str.to_re "0800") (re.opt (re.union (str.to_re "-") (re.union (str.to_re ".") (str.to_re ")"))))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.union ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 5 5) (re.range "0" "9"))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)