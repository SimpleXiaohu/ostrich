;test regex [0-3]{1}[0-9]{1}(jan|JAN|feb|FEB|mar|MAR|apr|APR|may|MAY|jun|JUN|jul|JUL|aug|AUG|sep|SEP|oct|OCT|nov|NOV|dec|DEC){1}
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 1 1) (re.range "0" "3")) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 1 1) (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "j") (re.++ (str.to_re "a") (str.to_re "n"))) (re.++ (str.to_re "J") (re.++ (str.to_re "A") (str.to_re "N")))) (re.++ (str.to_re "f") (re.++ (str.to_re "e") (str.to_re "b")))) (re.++ (str.to_re "F") (re.++ (str.to_re "E") (str.to_re "B")))) (re.++ (str.to_re "m") (re.++ (str.to_re "a") (str.to_re "r")))) (re.++ (str.to_re "M") (re.++ (str.to_re "A") (str.to_re "R")))) (re.++ (str.to_re "a") (re.++ (str.to_re "p") (str.to_re "r")))) (re.++ (str.to_re "A") (re.++ (str.to_re "P") (str.to_re "R")))) (re.++ (str.to_re "m") (re.++ (str.to_re "a") (str.to_re "y")))) (re.++ (str.to_re "M") (re.++ (str.to_re "A") (str.to_re "Y")))) (re.++ (str.to_re "j") (re.++ (str.to_re "u") (str.to_re "n")))) (re.++ (str.to_re "J") (re.++ (str.to_re "U") (str.to_re "N")))) (re.++ (str.to_re "j") (re.++ (str.to_re "u") (str.to_re "l")))) (re.++ (str.to_re "J") (re.++ (str.to_re "U") (str.to_re "L")))) (re.++ (str.to_re "a") (re.++ (str.to_re "u") (str.to_re "g")))) (re.++ (str.to_re "A") (re.++ (str.to_re "U") (str.to_re "G")))) (re.++ (str.to_re "s") (re.++ (str.to_re "e") (str.to_re "p")))) (re.++ (str.to_re "S") (re.++ (str.to_re "E") (str.to_re "P")))) (re.++ (str.to_re "o") (re.++ (str.to_re "c") (str.to_re "t")))) (re.++ (str.to_re "O") (re.++ (str.to_re "C") (str.to_re "T")))) (re.++ (str.to_re "n") (re.++ (str.to_re "o") (str.to_re "v")))) (re.++ (str.to_re "N") (re.++ (str.to_re "O") (str.to_re "V")))) (re.++ (str.to_re "d") (re.++ (str.to_re "e") (str.to_re "c")))) (re.++ (str.to_re "D") (re.++ (str.to_re "E") (str.to_re "C")))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)