;test regex ^(([A-Z]{1}[a-z]+([\-][A-Z]{1}[a-z]+)?)([ ]([A-Z]\.)){0,2}[ ](([A-Z]{1}[a-z]*)|([O]{1}[\&#39;]{1}[A-Z][a-z]{2,}))([ ](Jr\.|Sr\.|IV|III|II))?)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.++ (re.+ (re.range "a" "z")) (re.opt (re.++ (str.to_re "-") (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.+ (re.range "a" "z"))))))) (re.++ ((_ re.loop 0 2) (re.++ (str.to_re " ") (re.++ (re.range "A" "Z") (str.to_re ".")))) (re.++ (str.to_re " ") (re.++ (re.union (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.* (re.range "a" "z"))) (re.++ ((_ re.loop 1 1) (str.to_re "O")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (str.to_re ";"))))) (re.++ (re.range "A" "Z") (re.++ (re.* (re.range "a" "z")) ((_ re.loop 2 2) (re.range "a" "z"))))))) (re.opt (re.++ (str.to_re " ") (re.union (re.union (re.union (re.union (re.++ (str.to_re "J") (re.++ (str.to_re "r") (str.to_re "."))) (re.++ (str.to_re "S") (re.++ (str.to_re "r") (str.to_re ".")))) (re.++ (str.to_re "I") (str.to_re "V"))) (re.++ (str.to_re "I") (re.++ (str.to_re "I") (str.to_re "I")))) (re.++ (str.to_re "I") (str.to_re "I")))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)