;test regex (^4\d{12}$)|(^4[0-8]\d{14}$)|(^(49)[^013]\d{13}$)|(^(49030)[0-1]\d{10}$)|(^(49033)[0-4]\d{10}$)|(^(49110)[^12]\d{10}$)|(^(49117)[0-3]\d{10}$)|(^(49118)[^0-2]\d{10}$)|(^(493)[^6]\d{12}$)
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "4") ((_ re.loop 12 12) (re.range "0" "9")))) (str.to_re "")) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "4") (re.++ (re.range "0" "8") ((_ re.loop 14 14) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49") (re.++ (re.diff re.allchar (str.to_re "013")) ((_ re.loop 13 13) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49030") (re.++ (re.range "0" "1") ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49033") (re.++ (re.range "0" "4") ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49110") (re.++ (re.diff re.allchar (str.to_re "12")) ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49117") (re.++ (re.range "0" "3") ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "49118") (re.++ (re.diff re.allchar (re.range "0" "2")) ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "493") (re.++ (re.diff re.allchar (str.to_re "6")) ((_ re.loop 12 12) (re.range "0" "9"))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)