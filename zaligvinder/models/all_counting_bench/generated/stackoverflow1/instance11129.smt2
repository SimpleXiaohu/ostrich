;test regex (http:\/\/[a-zA-Z.-_]{1,}){1}[">.a-zA-Z<>\/]{1,}\nStatic text\n[">.a-zA-Z<>\/ =]{1,}(http:\/\/[a-zA-Z.-_]{1,}){1,}
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 1 1) (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (re.* (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_")))))) ((_ re.loop 1 1) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_"))))))))))))))) (re.++ (re.++ (re.* (re.union (str.to_re "\u{22}") (re.union (str.to_re ">") (re.union (str.to_re ".") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "<") (re.union (str.to_re ">") (str.to_re "/"))))))))) ((_ re.loop 1 1) (re.union (str.to_re "\u{22}") (re.union (str.to_re ">") (re.union (str.to_re ".") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "<") (re.union (str.to_re ">") (str.to_re "/")))))))))) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "i") (re.++ (str.to_re "c") (re.++ (str.to_re " ") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "\u{0a}") (re.++ (re.++ (re.* (re.union (str.to_re "\u{22}") (re.union (str.to_re ">") (re.union (str.to_re ".") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "/") (re.union (str.to_re " ") (str.to_re "="))))))))))) ((_ re.loop 1 1) (re.union (str.to_re "\u{22}") (re.union (str.to_re ">") (re.union (str.to_re ".") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "/") (re.union (str.to_re " ") (str.to_re "=")))))))))))) (re.++ (re.* (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (re.* (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_")))))) ((_ re.loop 1 1) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_"))))))))))))))) ((_ re.loop 1 1) (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (re.* (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_")))))) ((_ re.loop 1 1) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re ".") (re.union (str.to_re "-") (str.to_re "_"))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)