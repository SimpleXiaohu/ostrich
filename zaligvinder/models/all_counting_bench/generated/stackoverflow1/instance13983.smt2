;test regex String result = "All Prime Numbers Up To {10}:\n1 2 3 4 5 6 7 8 9";
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "g") (re.++ (str.to_re " ") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "l") (re.++ (str.to_re "t") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "A") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re " ") (re.++ (str.to_re "P") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re "N") (re.++ (str.to_re "u") (re.++ (str.to_re "m") (re.++ (str.to_re "b") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "s") (re.++ (str.to_re " ") (re.++ (str.to_re "U") (re.++ (str.to_re "p") (re.++ (str.to_re " ") (re.++ (str.to_re "T") (re.++ (str.to_re "o") (re.++ ((_ re.loop 10 10) (str.to_re " ")) (re.++ (str.to_re ":") (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "1") (re.++ (str.to_re " ") (re.++ (str.to_re "2") (re.++ (str.to_re " ") (re.++ (str.to_re "3") (re.++ (str.to_re " ") (re.++ (str.to_re "4") (re.++ (str.to_re " ") (re.++ (str.to_re "5") (re.++ (str.to_re " ") (re.++ (str.to_re "6") (re.++ (str.to_re " ") (re.++ (str.to_re "7") (re.++ (str.to_re " ") (re.++ (str.to_re "8") (re.++ (str.to_re " ") (re.++ (str.to_re "9") (re.++ (str.to_re "\u{22}") (str.to_re ";"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)