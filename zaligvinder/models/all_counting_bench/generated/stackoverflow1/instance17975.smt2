;test regex Rosemary J. Harris $^{1}$, Vladislav Popkov $^{2}$ and Gunter M. Sch\"utz $^{3,}$*
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "R") (re.++ (str.to_re "o") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "m") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "y") (re.++ (str.to_re " ") (re.++ (str.to_re "J") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re " ") (re.++ (str.to_re "H") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "s") (str.to_re " "))))))))))))))))))) (str.to_re "")) ((_ re.loop 1 1) (str.to_re ""))) (str.to_re "")) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "V") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "d") (re.++ (str.to_re "i") (re.++ (str.to_re "s") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "v") (re.++ (str.to_re " ") (re.++ (str.to_re "P") (re.++ (str.to_re "o") (re.++ (str.to_re "p") (re.++ (str.to_re "k") (re.++ (str.to_re "o") (re.++ (str.to_re "v") (str.to_re " ")))))))))))))))))))) (str.to_re "")) ((_ re.loop 2 2) (str.to_re ""))) (re.++ (str.to_re "") (re.++ (str.to_re " ") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (re.++ (str.to_re " ") (re.++ (str.to_re "G") (re.++ (str.to_re "u") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "M") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re " ") (re.++ (str.to_re "S") (re.++ (str.to_re "c") (re.++ (str.to_re "h") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "u") (re.++ (str.to_re "t") (re.++ (str.to_re "z") (str.to_re " "))))))))))))))))))))))))) (str.to_re "")) (re.++ (re.* (str.to_re "")) ((_ re.loop 3 3) (str.to_re "")))) (re.* (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)