;test regex ((^(0?[13578]|1[02])[\/.-]?(0?[1-9]|[12][0-9]|3[01])[\/.-]?(18|19|20){0,1}[0-9]{2}$)|(^(0?[469]|11)[\/.-]?(0?[1-9]|[12][0-9]|30)[\/.-]?(18|19|20){0,1}[0-9]{2}$)|(^([0]?2)[\/.-]?(0?[1-9]|1[0-9]|2[0-8])[\/.-]?(18|19|20){0,1}[0-9]{2}$)|(^([0]?2)[\/.-]?29[\/.-]?(((18|19|20){0,1}(04|08|[2468][048]|[13579][26]))|2000|00)$))
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.opt (str.to_re "0")) (str.to_re "13578")) (re.++ (str.to_re "1") (str.to_re "02"))) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ (re.union (re.union (re.++ (re.opt (str.to_re "0")) (re.range "1" "9")) (re.++ (str.to_re "12") (re.range "0" "9"))) (re.++ (str.to_re "3") (str.to_re "01"))) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ ((_ re.loop 0 1) (re.union (re.union (str.to_re "18") (str.to_re "19")) (str.to_re "20"))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (str.to_re "")) (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.++ (re.opt (str.to_re "0")) (str.to_re "469")) (str.to_re "11")) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ (re.union (re.union (re.++ (re.opt (str.to_re "0")) (re.range "1" "9")) (re.++ (str.to_re "12") (re.range "0" "9"))) (str.to_re "30")) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ ((_ re.loop 0 1) (re.union (re.union (str.to_re "18") (str.to_re "19")) (str.to_re "20"))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (re.++ (re.opt (str.to_re "0")) (str.to_re "2")) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ (re.union (re.union (re.++ (re.opt (str.to_re "0")) (re.range "1" "9")) (re.++ (str.to_re "1") (re.range "0" "9"))) (re.++ (str.to_re "2") (re.range "0" "8"))) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ ((_ re.loop 0 1) (re.union (re.union (str.to_re "18") (str.to_re "19")) (str.to_re "20"))) ((_ re.loop 2 2) (re.range "0" "9")))))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (re.++ (re.opt (str.to_re "0")) (str.to_re "2")) (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.++ (str.to_re "29") (re.++ (re.opt (re.union (str.to_re "/") (re.union (str.to_re ".") (str.to_re "-")))) (re.union (re.union (re.++ ((_ re.loop 0 1) (re.union (re.union (str.to_re "18") (str.to_re "19")) (str.to_re "20"))) (re.union (re.union (re.union (str.to_re "04") (str.to_re "08")) (re.++ (str.to_re "2468") (str.to_re "048"))) (re.++ (str.to_re "13579") (str.to_re "26")))) (str.to_re "2000")) (str.to_re "00"))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)