;test regex \/([0-9a-z-]{1,})\/([0-9a-f]{2})([0-9a-f]{2})\/(.+)\_[x0-9|small|icon|normal|large](.+)\.(jpg|png|gif|jpeg)
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "/") (re.++ (re.++ (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (str.to_re "-")))) ((_ re.loop 1 1) (re.union (re.range "0" "9") (re.union (re.range "a" "z") (str.to_re "-"))))) (re.++ (str.to_re "/") (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "a" "f"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "a" "f"))) (re.++ (str.to_re "/") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "_") (re.++ (re.union (str.to_re "x") (re.union (re.range "0" "9") (re.union (str.to_re "|") (re.union (str.to_re "s") (re.union (str.to_re "m") (re.union (str.to_re "a") (re.union (str.to_re "l") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "i") (re.union (str.to_re "c") (re.union (str.to_re "o") (re.union (str.to_re "n") (re.union (str.to_re "|") (re.union (str.to_re "n") (re.union (str.to_re "o") (re.union (str.to_re "r") (re.union (str.to_re "m") (re.union (str.to_re "a") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "l") (re.union (str.to_re "a") (re.union (str.to_re "r") (re.union (str.to_re "g") (str.to_re "e")))))))))))))))))))))))))) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re ".") (re.union (re.union (re.union (re.++ (str.to_re "j") (re.++ (str.to_re "p") (str.to_re "g"))) (re.++ (str.to_re "p") (re.++ (str.to_re "n") (str.to_re "g")))) (re.++ (str.to_re "g") (re.++ (str.to_re "i") (str.to_re "f")))) (re.++ (str.to_re "j") (re.++ (str.to_re "p") (re.++ (str.to_re "e") (str.to_re "g"))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)