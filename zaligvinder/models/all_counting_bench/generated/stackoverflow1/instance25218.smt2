;test regex \d{1,4}(,){1}('){1}[a-zA-Z0-9,]+('){1}\d{1,4}(,){1}\d{1,4}(,){1}('){1}[0-9-]+('){1}(,){1}('){1}[a-zA-Z0-9,]+('){1}(,){1}('){1}[a-zA-Z0-9,]+('){1}(,){1}\d{1,4}(,){1}\d{1,4}(\r\n){1}
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re ","))))) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ (re.+ (re.union (re.range "0" "9") (str.to_re "-"))) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re ","))))) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re ","))))) (re.++ ((_ re.loop 1 1) (str.to_re "\u{27}")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re ",")) (re.++ ((_ re.loop 1 4) (re.range "0" "9")) ((_ re.loop 1 1) (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}")))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)