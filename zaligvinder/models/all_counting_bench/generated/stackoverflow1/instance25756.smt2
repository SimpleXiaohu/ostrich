;test regex var lineRegex = /^\s*(?:(A|B|C|D|E|F|G|A#|C#|D#|F#|G#|Ab|Bb|Db|Eb|Gb){1}(?:m|\+|\-|aug|dim|add|b|#|1|2|3|4|5|6|7|8|9|0|\/)*\s*)+$/;
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "e") (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (str.to_re "/"))))))))))))))))) (re.++ (str.to_re "") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.+ (re.++ ((_ re.loop 1 1) (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "A") (str.to_re "B")) (str.to_re "C")) (str.to_re "D")) (str.to_re "E")) (str.to_re "F")) (str.to_re "G")) (re.++ (str.to_re "A") (str.to_re "#"))) (re.++ (str.to_re "C") (str.to_re "#"))) (re.++ (str.to_re "D") (str.to_re "#"))) (re.++ (str.to_re "F") (str.to_re "#"))) (re.++ (str.to_re "G") (str.to_re "#"))) (re.++ (str.to_re "A") (str.to_re "b"))) (re.++ (str.to_re "B") (str.to_re "b"))) (re.++ (str.to_re "D") (str.to_re "b"))) (re.++ (str.to_re "E") (str.to_re "b"))) (re.++ (str.to_re "G") (str.to_re "b")))) (re.++ (re.* (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (str.to_re "m") (str.to_re "+")) (str.to_re "-")) (re.++ (str.to_re "a") (re.++ (str.to_re "u") (str.to_re "g")))) (re.++ (str.to_re "d") (re.++ (str.to_re "i") (str.to_re "m")))) (re.++ (str.to_re "a") (re.++ (str.to_re "d") (str.to_re "d")))) (str.to_re "b")) (str.to_re "#")) (str.to_re "1")) (str.to_re "2")) (str.to_re "3")) (str.to_re "4")) (str.to_re "5")) (str.to_re "6")) (str.to_re "7")) (str.to_re "8")) (str.to_re "9")) (str.to_re "0")) (str.to_re "/"))) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "/") (str.to_re ";"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)