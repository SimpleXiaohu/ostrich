;test regex \d+(\s+\w+){1,}\s+(?:st(?:\.|reet)?|dr(?:\.|ive)?|pl(?:\.|ace)?|ave(?:\.|nue)?|rd|road|lane|drive|way|court|plaza|square|run|parkway|point|pike|square|driveway|trace|park|terrace|blvd)
(declare-const X String)
(assert (str.in_re X (re.++ (re.+ (re.range "0" "9")) (re.++ (re.++ (re.* (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))))) ((_ re.loop 1 1) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))))))) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.opt (re.union (str.to_re ".") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "e") (str.to_re "t")))))))) (re.++ (str.to_re "d") (re.++ (str.to_re "r") (re.opt (re.union (str.to_re ".") (re.++ (str.to_re "i") (re.++ (str.to_re "v") (str.to_re "e")))))))) (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.opt (re.union (str.to_re ".") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (str.to_re "e")))))))) (re.++ (str.to_re "a") (re.++ (str.to_re "v") (re.++ (str.to_re "e") (re.opt (re.union (str.to_re ".") (re.++ (str.to_re "n") (re.++ (str.to_re "u") (str.to_re "e"))))))))) (re.++ (str.to_re "r") (str.to_re "d"))) (re.++ (str.to_re "r") (re.++ (str.to_re "o") (re.++ (str.to_re "a") (str.to_re "d"))))) (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (str.to_re "e"))))) (re.++ (str.to_re "d") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "v") (str.to_re "e")))))) (re.++ (str.to_re "w") (re.++ (str.to_re "a") (str.to_re "y")))) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (str.to_re "t")))))) (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "z") (str.to_re "a")))))) (re.++ (str.to_re "s") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (str.to_re "e"))))))) (re.++ (str.to_re "r") (re.++ (str.to_re "u") (str.to_re "n")))) (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "k") (re.++ (str.to_re "w") (re.++ (str.to_re "a") (str.to_re "y")))))))) (re.++ (str.to_re "p") (re.++ (str.to_re "o") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (str.to_re "t")))))) (re.++ (str.to_re "p") (re.++ (str.to_re "i") (re.++ (str.to_re "k") (str.to_re "e"))))) (re.++ (str.to_re "s") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (str.to_re "e"))))))) (re.++ (str.to_re "d") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "v") (re.++ (str.to_re "e") (re.++ (str.to_re "w") (re.++ (str.to_re "a") (str.to_re "y"))))))))) (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (str.to_re "e")))))) (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (str.to_re "k"))))) (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (str.to_re "e")))))))) (re.++ (str.to_re "b") (re.++ (str.to_re "l") (re.++ (str.to_re "v") (str.to_re "d"))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)