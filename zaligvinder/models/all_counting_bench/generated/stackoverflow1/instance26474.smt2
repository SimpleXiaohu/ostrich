;test regex (\\w{3}) (\\d{1,2}) (\\d{2}):(\\d{2}):(\\d{2}).*SOFTLOADSERVICE;Install started\\s*
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "\\") ((_ re.loop 3 3) (str.to_re "w"))) (re.++ (str.to_re " ") (re.++ (re.++ (str.to_re "\\") ((_ re.loop 1 2) (str.to_re "d"))) (re.++ (str.to_re " ") (re.++ (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d"))) (re.++ (str.to_re ":") (re.++ (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d"))) (re.++ (str.to_re ":") (re.++ (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d"))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "S") (re.++ (str.to_re "O") (re.++ (str.to_re "F") (re.++ (str.to_re "T") (re.++ (str.to_re "L") (re.++ (str.to_re "O") (re.++ (str.to_re "A") (re.++ (str.to_re "D") (re.++ (str.to_re "S") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "V") (re.++ (str.to_re "I") (re.++ (str.to_re "C") (re.++ (str.to_re "E") (re.++ (str.to_re ";") (re.++ (str.to_re "I") (re.++ (str.to_re "n") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "d") (re.++ (str.to_re "\\") (re.* (str.to_re "s"))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)