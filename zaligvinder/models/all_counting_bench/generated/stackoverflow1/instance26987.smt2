;test regex s/\n( +)someVarX: val1/\n${1}someVarX: val1\n${1}someVarY: val2/
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re "s") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "V") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "X") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "1") (re.++ (str.to_re "/") (str.to_re "\u{0a}")))))))))))))))))))) (re.++ ((_ re.loop 1 1) (str.to_re "")) (re.++ (str.to_re "s") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "V") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "X") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "1") (str.to_re "\u{0a}"))))))))))))))))) (re.++ ((_ re.loop 1 1) (str.to_re "")) (re.++ (str.to_re "s") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "V") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "Y") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "2") (str.to_re "/")))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)