;test regex NODELISTENUM (([A-Za-z0-9]{0,20})(\-)?([A-Za-z0-9]{0,20})(\.[A-Za-z0-9]{0,20})?(\,)*([A-Za-z0-9]{0,20}(\-?[A-Za-z0-9]{0,20})*)(\.[A-Za-z0-9]{0,20})?)+
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "N") (re.++ (str.to_re "O") (re.++ (str.to_re "D") (re.++ (str.to_re "E") (re.++ (str.to_re "L") (re.++ (str.to_re "I") (re.++ (str.to_re "S") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "N") (re.++ (str.to_re "U") (re.++ (str.to_re "M") (re.++ (str.to_re " ") (re.+ (re.++ ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))) (re.++ (re.opt (str.to_re "-")) (re.++ ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re ".") ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))))) (re.++ (re.* (str.to_re ",")) (re.++ (re.++ ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))) (re.* (re.++ (re.opt (str.to_re "-")) ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9"))))))) (re.opt (re.++ (str.to_re ".") ((_ re.loop 0 20) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9"))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)