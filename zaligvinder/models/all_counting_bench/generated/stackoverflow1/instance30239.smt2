;test regex ^(-?\d+px\s+-?\d+px\s+#(\[a-fA-F0-9\]{3})(\[a-fA-F0-9\]{3})?;?)|(-?\d+px\s+-?\d+px\s+\d+\s+#(\[a-zA-Z0-9\]{3}(\[a-zA-Z0-9\]{3})?),?\s*){4};?
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "") (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "p") (re.++ (str.to_re "x") (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "p") (re.++ (str.to_re "x") (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "#") (re.++ (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "f") (re.++ (str.to_re "A") (re.++ (str.to_re "-") (re.++ (str.to_re "F") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") ((_ re.loop 3 3) (str.to_re "]")))))))))))) (re.++ (re.opt (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "f") (re.++ (str.to_re "A") (re.++ (str.to_re "-") (re.++ (str.to_re "F") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") ((_ re.loop 3 3) (str.to_re "]"))))))))))))) (re.opt (str.to_re ";")))))))))))))))) (re.++ ((_ re.loop 4 4) (re.++ (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "p") (re.++ (str.to_re "x") (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "p") (re.++ (str.to_re "x") (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.+ (re.range "0" "9")) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "#") (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "z") (re.++ (str.to_re "A") (re.++ (str.to_re "-") (re.++ (str.to_re "Z") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") (re.++ ((_ re.loop 3 3) (str.to_re "]")) (re.opt (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "z") (re.++ (str.to_re "A") (re.++ (str.to_re "-") (re.++ (str.to_re "Z") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") ((_ re.loop 3 3) (str.to_re "]"))))))))))))))))))))))))))))))))))))) (re.++ (re.opt (str.to_re ",")) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))))) (re.opt (str.to_re ";"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)