;test regex String REGEX_STREET = "(\\d+\\s*(\\w+ ){1,2}"+REGEX_ROAD+"(\\s+"+REGEX_APT+")?)|("+REGEX_POBOX+")";
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "g") (re.++ (str.to_re " ") (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "G") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "_") (re.++ (str.to_re "S") (re.++ (str.to_re "T") (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "E") (re.++ (str.to_re "T") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "\\") (re.++ (re.+ (str.to_re "d")) (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.++ ((_ re.loop 1 2) (re.++ (str.to_re "\\") (re.++ (re.+ (str.to_re "w")) (str.to_re " ")))) (re.++ (re.+ (str.to_re "\u{22}")) (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "G") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "_") (re.++ (str.to_re "R") (re.++ (str.to_re "O") (re.++ (str.to_re "A") (re.++ (re.+ (str.to_re "D")) (re.++ (str.to_re "\u{22}") (re.opt (re.++ (str.to_re "\\") (re.++ (re.+ (str.to_re "s")) (re.++ (re.+ (str.to_re "\u{22}")) (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "G") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "_") (re.++ (str.to_re "A") (re.++ (str.to_re "P") (re.++ (re.+ (str.to_re "T")) (str.to_re "\u{22}")))))))))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (re.++ (re.+ (str.to_re "\u{22}")) (re.++ (str.to_re "R") (re.++ (str.to_re "E") (re.++ (str.to_re "G") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "_") (re.++ (str.to_re "P") (re.++ (str.to_re "O") (re.++ (str.to_re "B") (re.++ (str.to_re "O") (re.++ (re.+ (str.to_re "X")) (str.to_re "\u{22}"))))))))))))) (re.++ (str.to_re "\u{22}") (str.to_re ";"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)