;test regex ^a{0,1} *b{0,1} *c{0,1} *d{0,1} *e{0,1} *f{0,1} *g{0,1} *h{0,1} *i{0,1} *j{0,1} *k{0,1} *l{0,1} *m{0,1} *n{0,1} *o{0,1} *p{0,1} *q{0,1} *r{0,1} *s{0,1} *t{0,1} *u{0,1} *v{0,1} *w{0,1} *x{0,1} *y{0,1} *z{0,1} *$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ ((_ re.loop 0 1) (str.to_re "a")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "b")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "c")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "d")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "e")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "f")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "g")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "h")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "i")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "j")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "k")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "l")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "m")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "n")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "o")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "p")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "q")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "r")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "s")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "t")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "u")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "v")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "w")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "x")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "y")) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 0 1) (str.to_re "z")) (re.* (str.to_re " ")))))))))))))))))))))))))))))))))))))))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)