;test regex ([0-9]{1,3}\.){3}[0-9]{1,3} - - \[([0-9]+)\/([A-Z][a-z]+)\/([0-9]+):([0-9]+:[0-9]+:[0-9]+) \+[0-9]+\] "[A-Z]+ \/([A-Z]|[a-z]+).[a-z]+ [A-Z]+\/[0-9].[0-9]" ([0-9]+) ([0-9]+) "-"? "[a-z]+\/[0-9].[0-9]
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 3 3) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (str.to_re "."))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re " ") (re.++ (str.to_re "[") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "/") (re.++ (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z"))) (re.++ (str.to_re "/") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ":") (re.+ (re.range "0" "9")))))) (re.++ (str.to_re " ") (re.++ (str.to_re "+") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "]") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.+ (re.range "A" "Z")) (re.++ (str.to_re " ") (re.++ (str.to_re "/") (re.++ (re.union (re.range "A" "Z") (re.+ (re.range "a" "z"))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.+ (re.range "a" "z")) (re.++ (str.to_re " ") (re.++ (re.+ (re.range "A" "Z")) (re.++ (str.to_re "/") (re.++ (re.range "0" "9") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.range "0" "9") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re " ") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "-") (re.++ (re.opt (str.to_re "\u{22}")) (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.+ (re.range "a" "z")) (re.++ (str.to_re "/") (re.++ (re.range "0" "9") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.range "0" "9")))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)