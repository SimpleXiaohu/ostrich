;test regex "john doe" => "ca:tw#2{1,2}:th#1{3};ar:tw#1{4}:fi#1{5};ny:tw#1{6};"
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "j") (re.++ (str.to_re "o") (re.++ (str.to_re "h") (re.++ (str.to_re "n") (re.++ (str.to_re " ") (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "e") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re ">") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "c") (re.++ (str.to_re "a") (re.++ (str.to_re ":") (re.++ (str.to_re "t") (re.++ (str.to_re "w") (re.++ (str.to_re "#") (re.++ ((_ re.loop 1 2) (str.to_re "2")) (re.++ (str.to_re ":") (re.++ (str.to_re "t") (re.++ (str.to_re "h") (re.++ (str.to_re "#") (re.++ ((_ re.loop 3 3) (str.to_re "1")) (re.++ (str.to_re ";") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re ":") (re.++ (str.to_re "t") (re.++ (str.to_re "w") (re.++ (str.to_re "#") (re.++ ((_ re.loop 4 4) (str.to_re "1")) (re.++ (str.to_re ":") (re.++ (str.to_re "f") (re.++ (str.to_re "i") (re.++ (str.to_re "#") (re.++ ((_ re.loop 5 5) (str.to_re "1")) (re.++ (str.to_re ";") (re.++ (str.to_re "n") (re.++ (str.to_re "y") (re.++ (str.to_re ":") (re.++ (str.to_re "t") (re.++ (str.to_re "w") (re.++ (str.to_re "#") (re.++ ((_ re.loop 6 6) (str.to_re "1")) (re.++ (str.to_re ";") (str.to_re "\u{22}"))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)