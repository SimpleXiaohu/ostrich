;test regex ([$]+)\s*(\d{1,3})\s*(,?\d{3}\s*)*(\.\d{2})?(\s*[K|M|MM|B|thousand|million|billion])*
(declare-const X String)
(assert (str.in_re X (re.++ (re.+ (str.to_re "$")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.* (re.++ (re.opt (str.to_re ",")) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))))) (re.++ (re.opt (re.++ (str.to_re ".") ((_ re.loop 2 2) (re.range "0" "9")))) (re.* (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.union (str.to_re "K") (re.union (str.to_re "|") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "M") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "B") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "h") (re.union (str.to_re "o") (re.union (str.to_re "u") (re.union (str.to_re "s") (re.union (str.to_re "a") (re.union (str.to_re "n") (re.union (str.to_re "d") (re.union (str.to_re "|") (re.union (str.to_re "m") (re.union (str.to_re "i") (re.union (str.to_re "l") (re.union (str.to_re "l") (re.union (str.to_re "i") (re.union (str.to_re "o") (re.union (str.to_re "n") (re.union (str.to_re "|") (re.union (str.to_re "b") (re.union (str.to_re "i") (re.union (str.to_re "l") (re.union (str.to_re "l") (re.union (str.to_re "i") (re.union (str.to_re "o") (str.to_re "n")))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)