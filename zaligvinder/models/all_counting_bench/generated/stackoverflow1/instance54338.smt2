;test regex (?:(?:(?:rs)|(?:inr))(?:!-{0,}|\.{1}|\ {0,}|\.{1}\ {0,}))(-?[\d,]+    (?:\.\d+)?)(?:[^/^-^X^x])|(?:(-?[\d,]+(?:\.\d+)?)(?:(?:\ {0,}rs)|(?:\      {0,}rs)|(?:\ {0,}(inr))))
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (re.union (re.++ (str.to_re "r") (str.to_re "s")) (re.++ (str.to_re "i") (re.++ (str.to_re "n") (str.to_re "r")))) (re.union (re.union (re.union (re.++ (str.to_re "!") (re.++ (re.* (str.to_re "-")) ((_ re.loop 0 0) (str.to_re "-")))) ((_ re.loop 1 1) (str.to_re "."))) (re.++ (re.* (str.to_re " ")) ((_ re.loop 0 0) (str.to_re " ")))) (re.++ ((_ re.loop 1 1) (str.to_re ".")) (re.++ (re.* (str.to_re " ")) ((_ re.loop 0 0) (str.to_re " ")))))) (re.++ (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.union (re.range "0" "9") (str.to_re ","))) (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.opt (re.++ (str.to_re ".") (re.+ (re.range "0" "9")))))))))) (re.inter (re.diff re.allchar (str.to_re "/")) (re.inter (re.diff re.allchar (str.to_re "^")) (re.inter (re.diff re.allchar (str.to_re "-")) (re.inter (re.diff re.allchar (str.to_re "^")) (re.inter (re.diff re.allchar (str.to_re "X")) (re.inter (re.diff re.allchar (str.to_re "^")) (re.diff re.allchar (str.to_re "x")))))))))) (re.++ (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.union (re.range "0" "9") (str.to_re ","))) (re.opt (re.++ (str.to_re ".") (re.+ (re.range "0" "9")))))) (re.union (re.union (re.++ (re.++ (re.* (str.to_re " ")) ((_ re.loop 0 0) (str.to_re " "))) (re.++ (str.to_re "r") (str.to_re "s"))) (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (re.++ (re.* (str.to_re " ")) ((_ re.loop 0 0) (str.to_re " "))) (re.++ (str.to_re "r") (str.to_re "s"))))))))) (re.++ (re.++ (re.* (str.to_re " ")) ((_ re.loop 0 0) (str.to_re " "))) (re.++ (str.to_re "i") (re.++ (str.to_re "n") (str.to_re "r")))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)