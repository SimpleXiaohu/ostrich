;test regex ^\d+-\d+-\d+T\d+:\d+:\d+.\d+\+\d{2}:\d{2}\s(?:aabvabcw74|aaxptac103).def.co.uk
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "T") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ (re.+ (re.range "0" "9")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "+") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.union (re.++ (str.to_re "a") (re.++ (str.to_re "a") (re.++ (str.to_re "b") (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "b") (re.++ (str.to_re "c") (re.++ (str.to_re "w") (str.to_re "74"))))))))) (re.++ (str.to_re "a") (re.++ (str.to_re "a") (re.++ (str.to_re "x") (re.++ (str.to_re "p") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (str.to_re "103"))))))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re "f") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "u") (str.to_re "k"))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)