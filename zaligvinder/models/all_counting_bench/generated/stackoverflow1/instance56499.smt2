;test regex (.*[A-Z -_.,\\d].*[A-Z -_.,\\d].*[A-Z -_.,\\d].*){5,}
(declare-const X String)
(assert (str.in_re X (re.++ (re.* (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.* (re.diff re.allchar (str.to_re "\n")))))))))) ((_ re.loop 5 5) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.range "A" "Z") (re.union (re.range " " "_") (re.union (str.to_re ".") (re.union (str.to_re ",") (re.union (str.to_re "\\") (str.to_re "d")))))) (re.* (re.diff re.allchar (str.to_re "\n")))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)