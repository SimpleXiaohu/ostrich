;test regex sprintf("$1%s$3",$subtitle1) -> sprintf('${1}%s${3}',$subtitle1)
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "s") (re.++ (str.to_re "p") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "f") (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "") (re.++ (str.to_re "1") (re.++ (str.to_re "%") (str.to_re "s"))))) (re.++ (str.to_re "") (re.++ (str.to_re "3") (str.to_re "\u{22}")))) (str.to_re ",")) (re.++ (str.to_re "") (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (re.++ (str.to_re "t") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (str.to_re "1"))))))))))) (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re ">") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "p") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "f") (re.++ (re.++ (re.++ (re.++ (str.to_re "\u{27}") (re.++ ((_ re.loop 1 1) (str.to_re "")) (re.++ (str.to_re "%") (str.to_re "s")))) (re.++ ((_ re.loop 3 3) (str.to_re "")) (str.to_re "\u{27}"))) (str.to_re ",")) (re.++ (str.to_re "") (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (re.++ (str.to_re "t") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (str.to_re "1"))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)