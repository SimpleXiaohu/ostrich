;test regex RewriteRule ^img/((thumb)\/)?(([a-z]+)\/)?([-_0-9a-zA-Z]+).([a-z]{3})$ cache/$5_$2_$4.$6
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "w") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "R") (re.++ (str.to_re "u") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (str.to_re " ")))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "i") (re.++ (str.to_re "m") (re.++ (str.to_re "g") (re.++ (str.to_re "/") (re.++ (re.opt (re.++ (re.++ (str.to_re "t") (re.++ (str.to_re "h") (re.++ (str.to_re "u") (re.++ (str.to_re "m") (str.to_re "b"))))) (str.to_re "/"))) (re.++ (re.opt (re.++ (re.+ (re.range "a" "z")) (str.to_re "/"))) (re.++ (re.+ (re.union (str.to_re "-") (re.union (str.to_re "_") (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z")))))) (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 3 3) (re.range "a" "z")))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re " ") (re.++ (str.to_re "c") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "h") (re.++ (str.to_re "e") (str.to_re "/"))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "5") (str.to_re "_")))) (re.++ (str.to_re "") (re.++ (str.to_re "2") (str.to_re "_")))) (re.++ (str.to_re "") (re.++ (str.to_re "4") (re.diff re.allchar (str.to_re "\n"))))) (re.++ (str.to_re "") (str.to_re "6")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)