;test regex ([^e].{13}|[^x].{12}|[^c].{11}|[^l].{10}|[^u].{9}|[^d].{8}|[^e].{7}|[^ ].{6}|[^t].{5}|[^h].{4}|[^i].{3}|[^s].{2}|[^:].|[^ ]|^)3[^0-9]?(\s|$)
(declare-const X String)
(assert (str.in_re X (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.diff re.allchar (str.to_re "e")) ((_ re.loop 13 13) (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.diff re.allchar (str.to_re "x")) ((_ re.loop 12 12) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "c")) ((_ re.loop 11 11) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "l")) ((_ re.loop 10 10) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "u")) ((_ re.loop 9 9) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "d")) ((_ re.loop 8 8) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "e")) ((_ re.loop 7 7) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re " ")) ((_ re.loop 6 6) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "t")) ((_ re.loop 5 5) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "h")) ((_ re.loop 4 4) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "i")) ((_ re.loop 3 3) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re "s")) ((_ re.loop 2 2) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.diff re.allchar (str.to_re ":")) (re.diff re.allchar (str.to_re "\n")))) (re.diff re.allchar (str.to_re " "))) (str.to_re "")) (re.++ (str.to_re "3") (re.++ (re.opt (re.diff re.allchar (re.range "0" "9"))) (re.union (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (str.to_re "")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)