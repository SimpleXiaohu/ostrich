;test regex ^(ATU[0-9]{8}|BE[01][0-9]{9}|BG[0-9]{9,10}|HR[0-9]{11}|CY[A-Z0-9]{9}|CZ[0-9]{8,10}|DK[0-9]{8}|EE[0-9]{9}|FI[0-9]{8}|FR[0-9A-Z]{2}[0-9]{9}|DE[0-9]{9}|EL[0-9]{9}|HU[0-9]{8}|IE([0-9]{7}[A-Z]{1,2}|[0-9][A-Z][0-9]{5}[A-Z])|IT[0-9]{11}|LV[0-9]{11}|LT([0-9]{9}|[0-9]{12})|LU[0-9]{8}|MT[0-9]{8}|NL[0-9]{9}B[0-9]{2}|PL[0-9]{10}|PT[0-9]{9}|RO[0-9]{2,10}|SK[0-9]{10}|SI[0-9]{8}|ES[A-Z]([0-9]{8}|[0-9]{7}[A-Z])|SE[0-9]{12}|GB([0-9]{9}|[0-9]{12}|GD[0-4][0-9]{2}|HA[5-9][0-9]{2}))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (str.to_re "U") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "B") (re.++ (str.to_re "E") (re.++ (str.to_re "01") ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "B") (re.++ (str.to_re "G") ((_ re.loop 9 10) (re.range "0" "9"))))) (re.++ (str.to_re "H") (re.++ (str.to_re "R") ((_ re.loop 11 11) (re.range "0" "9"))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Y") ((_ re.loop 9 9) (re.union (re.range "A" "Z") (re.range "0" "9")))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Z") ((_ re.loop 8 10) (re.range "0" "9"))))) (re.++ (str.to_re "D") (re.++ (str.to_re "K") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "E") (re.++ (str.to_re "E") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (str.to_re "F") (re.++ (str.to_re "I") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "F") (re.++ (str.to_re "R") (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "Z"))) ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "D") (re.++ (str.to_re "E") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (str.to_re "E") (re.++ (str.to_re "L") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (str.to_re "H") (re.++ (str.to_re "U") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "I") (re.++ (str.to_re "E") (re.union (re.++ ((_ re.loop 7 7) (re.range "0" "9")) ((_ re.loop 1 2) (re.range "A" "Z"))) (re.++ (re.range "0" "9") (re.++ (re.range "A" "Z") (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.range "A" "Z")))))))) (re.++ (str.to_re "I") (re.++ (str.to_re "T") ((_ re.loop 11 11) (re.range "0" "9"))))) (re.++ (str.to_re "L") (re.++ (str.to_re "V") ((_ re.loop 11 11) (re.range "0" "9"))))) (re.++ (str.to_re "L") (re.++ (str.to_re "T") (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 12 12) (re.range "0" "9")))))) (re.++ (str.to_re "L") (re.++ (str.to_re "U") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "M") (re.++ (str.to_re "T") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "N") (re.++ (str.to_re "L") (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (re.++ (str.to_re "B") ((_ re.loop 2 2) (re.range "0" "9"))))))) (re.++ (str.to_re "P") (re.++ (str.to_re "L") ((_ re.loop 10 10) (re.range "0" "9"))))) (re.++ (str.to_re "P") (re.++ (str.to_re "T") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (str.to_re "R") (re.++ (str.to_re "O") ((_ re.loop 2 10) (re.range "0" "9"))))) (re.++ (str.to_re "S") (re.++ (str.to_re "K") ((_ re.loop 10 10) (re.range "0" "9"))))) (re.++ (str.to_re "S") (re.++ (str.to_re "I") ((_ re.loop 8 8) (re.range "0" "9"))))) (re.++ (str.to_re "E") (re.++ (str.to_re "S") (re.++ (re.range "A" "Z") (re.union ((_ re.loop 8 8) (re.range "0" "9")) (re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.range "A" "Z"))))))) (re.++ (str.to_re "S") (re.++ (str.to_re "E") ((_ re.loop 12 12) (re.range "0" "9"))))) (re.++ (str.to_re "G") (re.++ (str.to_re "B") (re.union (re.union (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 12 12) (re.range "0" "9"))) (re.++ (str.to_re "G") (re.++ (str.to_re "D") (re.++ (re.range "0" "4") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (str.to_re "H") (re.++ (str.to_re "A") (re.++ (re.range "5" "9") ((_ re.loop 2 2) (re.range "0" "9")))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)