(set-logic QF_SLIA)
(set-option :produce-models true)
(declare-const X String)
; ^(((\+?64\s*[-\.]?[3-9]|\(?0[3-9]\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{4})|((\+?64\s*[-\.\(]?2\d{1}[-\.\)]?|\(?02\d{1}\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{3,5})|((\+?64\s*[-\.]?[-\.\(]?800[-\.\)]?|[-\.\(]?0800[-\.\)]?)\s*[-\.]?\d{3}\s*[-\.]?(\d{2}|\d{5})))$
(assert (not (str.in_re X (re.++ (re.union (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (str.to_re "64") (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.range "3" "9")) (re.++ (re.opt (str.to_re "(")) (str.to_re "0") (re.range "3" "9") (re.opt (str.to_re ")")))) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (str.to_re "64") (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re "("))) (str.to_re "2") ((_ re.loop 1 1) (re.range "0" "9")) (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re ")")))) (re.++ (re.opt (str.to_re "(")) (str.to_re "02") ((_ re.loop 1 1) (re.range "0" "9")) (re.opt (str.to_re ")")))) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 3 5) (re.range "0" "9"))) (re.++ (re.union (re.++ (re.opt (str.to_re "+")) (str.to_re "64") (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re "("))) (str.to_re "800") (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re ")")))) (re.++ (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re "("))) (str.to_re "0800") (re.opt (re.union (str.to_re "-") (str.to_re ".") (str.to_re ")"))))) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.union (str.to_re " ") (str.to_re "\u{09}") (str.to_re "\u{0a}") (str.to_re "\u{0c}") (str.to_re "\u{0d}"))) (re.opt (re.union (str.to_re "-") (str.to_re "."))) (re.union ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 5 5) (re.range "0" "9"))))) (str.to_re "\u{0a}")))))
; /^\/\d+\/\d\.zip$/U
(assert (not (str.in_re X (re.++ (str.to_re "//") (re.+ (re.range "0" "9")) (str.to_re "/") (re.range "0" "9") (str.to_re ".zip/U\u{0a}")))))
; /filename=[^\n]*\u{2e}wmx/i
(assert (str.in_re X (re.++ (str.to_re "/filename=") (re.* (re.comp (str.to_re "\u{0a}"))) (str.to_re ".wmx/i\u{0a}"))))
(assert (> (str.len X) 9))
(check-sat)
