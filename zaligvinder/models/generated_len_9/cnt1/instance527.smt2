;test regex (Signature keyId=my key,algorithm=hmac-sha256,headers=date,signature=[0-9a-zA-Z/+]{43}=)
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (str.to_re "S") (re.++ (str.to_re "i") (re.++ (str.to_re "g") (re.++ (str.to_re "n") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re "k") (re.++ (str.to_re "e") (re.++ (str.to_re "y") (re.++ (str.to_re "I") (re.++ (str.to_re "d") (re.++ (str.to_re "=") (re.++ (str.to_re "m") (re.++ (str.to_re "y") (re.++ (str.to_re " ") (re.++ (str.to_re "k") (re.++ (str.to_re "e") (str.to_re "y")))))))))))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "g") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "h") (re.++ (str.to_re "m") (re.++ (str.to_re "=") (re.++ (str.to_re "h") (re.++ (str.to_re "m") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "-") (re.++ (str.to_re "s") (re.++ (str.to_re "h") (re.++ (str.to_re "a") (str.to_re "256"))))))))))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "h") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "s") (re.++ (str.to_re "=") (re.++ (str.to_re "d") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (str.to_re "e")))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "s") (re.++ (str.to_re "i") (re.++ (str.to_re "g") (re.++ (str.to_re "n") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ ((_ re.loop 43 43) (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (str.to_re "/") (str.to_re "+")))))) (str.to_re "="))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)