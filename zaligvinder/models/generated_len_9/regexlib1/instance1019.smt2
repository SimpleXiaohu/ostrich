;test regex ^(([&#209;A-Z|&#241;a-z|&amp;]{3}|[A-Z|a-z]{4})\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)(\w{2})([A|a|0-9]{1}))$|^(([&#209;A-Z|&#241;a-z|&amp;]{3}|[A-Z|a-z]{4})([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (str.to_re "") (re.++ (re.union ((_ re.loop 3 3) (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "209") (re.union (str.to_re ";") (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "241") (re.union (str.to_re ";") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.union (str.to_re "&") (re.union (str.to_re "a") (re.union (str.to_re "m") (re.union (str.to_re "p") (str.to_re ";")))))))))))))))))) ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.range "a" "z"))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (re.union (re.union (re.++ (re.union (re.++ (str.to_re "0") (re.range "1" "9")) (re.++ (str.to_re "1") (str.to_re "012"))) (re.union (re.union (re.++ (str.to_re "0") (re.range "1" "9")) (re.++ (str.to_re "1") (re.range "0" "9"))) (re.++ (str.to_re "2") (re.range "0" "8")))) (re.++ (re.union (re.++ (str.to_re "0") (str.to_re "13456789")) (re.++ (str.to_re "1") (str.to_re "012"))) (re.union (str.to_re "29") (str.to_re "30")))) (re.++ (re.union (re.++ (str.to_re "0") (str.to_re "13578")) (re.++ (str.to_re "1") (str.to_re "02"))) (str.to_re "31"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) ((_ re.loop 1 1) (re.union (str.to_re "A") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "|") (re.range "0" "9"))))))))))) (str.to_re "")) (re.++ (re.++ (str.to_re "") (re.++ (re.++ (re.union ((_ re.loop 3 3) (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "209") (re.union (str.to_re ";") (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "241") (re.union (str.to_re ";") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.union (str.to_re "&") (re.union (str.to_re "a") (re.union (str.to_re "m") (re.union (str.to_re "p") (str.to_re ";")))))))))))))))))) ((_ re.loop 4 4) (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.range "a" "z"))))) (re.++ (re.union (re.++ (str.to_re "02468") (str.to_re "048")) (re.++ (str.to_re "13579") (str.to_re "26"))) (str.to_re "0229"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) ((_ re.loop 1 1) (re.union (str.to_re "A") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "|") (re.range "0" "9"))))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)