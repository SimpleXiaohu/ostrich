;test regex (([IXCM])\2{3,})|[^IVXLCDM]|([IL][LCDM])|([XD][DM])|(V[VXLCDM])|(IX[VXLC])|(VI[VX])|(XC[LCDM])|(LX[LC])|((CM|DC)[DM])|(I[VX]I)|(X[CL]X)|(C[DM]C)|(I{2,}[VX])|(X{2,}[CL])|(C{2,}[DM])
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.union (str.to_re "I") (re.union (str.to_re "X") (re.union (str.to_re "C") (str.to_re "M")))) (re.++ (re.* (_ re.reference 2)) ((_ re.loop 3 3) (_ re.reference 2)))) (re.inter (re.diff re.allchar (str.to_re "I")) (re.inter (re.diff re.allchar (str.to_re "V")) (re.inter (re.diff re.allchar (str.to_re "X")) (re.inter (re.diff re.allchar (str.to_re "L")) (re.inter (re.diff re.allchar (str.to_re "C")) (re.inter (re.diff re.allchar (str.to_re "D")) (re.diff re.allchar (str.to_re "M"))))))))) (re.++ (re.union (str.to_re "I") (str.to_re "L")) (re.union (str.to_re "L") (re.union (str.to_re "C") (re.union (str.to_re "D") (str.to_re "M")))))) (re.++ (re.union (str.to_re "X") (str.to_re "D")) (re.union (str.to_re "D") (str.to_re "M")))) (re.++ (str.to_re "V") (re.union (str.to_re "V") (re.union (str.to_re "X") (re.union (str.to_re "L") (re.union (str.to_re "C") (re.union (str.to_re "D") (str.to_re "M")))))))) (re.++ (str.to_re "I") (re.++ (str.to_re "X") (re.union (str.to_re "V") (re.union (str.to_re "X") (re.union (str.to_re "L") (str.to_re "C"))))))) (re.++ (str.to_re "V") (re.++ (str.to_re "I") (re.union (str.to_re "V") (str.to_re "X"))))) (re.++ (str.to_re "X") (re.++ (str.to_re "C") (re.union (str.to_re "L") (re.union (str.to_re "C") (re.union (str.to_re "D") (str.to_re "M"))))))) (re.++ (str.to_re "L") (re.++ (str.to_re "X") (re.union (str.to_re "L") (str.to_re "C"))))) (re.++ (re.union (re.++ (str.to_re "C") (str.to_re "M")) (re.++ (str.to_re "D") (str.to_re "C"))) (re.union (str.to_re "D") (str.to_re "M")))) (re.++ (str.to_re "I") (re.++ (re.union (str.to_re "V") (str.to_re "X")) (str.to_re "I")))) (re.++ (str.to_re "X") (re.++ (re.union (str.to_re "C") (str.to_re "L")) (str.to_re "X")))) (re.++ (str.to_re "C") (re.++ (re.union (str.to_re "D") (str.to_re "M")) (str.to_re "C")))) (re.++ (re.++ (re.* (str.to_re "I")) ((_ re.loop 2 2) (str.to_re "I"))) (re.union (str.to_re "V") (str.to_re "X")))) (re.++ (re.++ (re.* (str.to_re "X")) ((_ re.loop 2 2) (str.to_re "X"))) (re.union (str.to_re "C") (str.to_re "L")))) (re.++ (re.++ (re.* (str.to_re "C")) ((_ re.loop 2 2) (str.to_re "C"))) (re.union (str.to_re "D") (str.to_re "M"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)