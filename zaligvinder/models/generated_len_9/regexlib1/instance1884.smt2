;test regex ^((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.union (re.union (re.++ (re.union (re.union (str.to_re "s") (str.to_re "S")) (re.union (str.to_re "n") (str.to_re "N"))) (re.union (re.range "a" "h") (re.union (re.range "A" "H") (re.union (re.range "j" "z") (re.range "J" "Z"))))) (re.++ (re.union (re.union (str.to_re "t") (str.to_re "T")) (re.union (str.to_re "o") (str.to_re "O"))) (re.union (str.to_re "a") (re.union (str.to_re "b") (re.union (str.to_re "f") (re.union (str.to_re "g") (re.union (str.to_re "l") (re.union (str.to_re "m") (re.union (str.to_re "q") (re.union (str.to_re "r") (re.union (str.to_re "v") (re.union (str.to_re "w") (re.union (str.to_re "A") (re.union (str.to_re "B") (re.union (str.to_re "F") (re.union (str.to_re "G") (re.union (str.to_re "L") (re.union (str.to_re "M") (re.union (str.to_re "Q") (re.union (str.to_re "R") (re.union (str.to_re "V") (str.to_re "W")))))))))))))))))))))) (re.++ (re.union (str.to_re "h") (str.to_re "H")) (re.union (re.range "l" "z") (re.range "L" "Z")))) (re.++ (re.union (str.to_re "j") (str.to_re "J")) (re.union (str.to_re "l") (re.union (str.to_re "m") (re.union (str.to_re "q") (re.union (str.to_re "r") (re.union (str.to_re "v") (re.union (str.to_re "w") (re.union (str.to_re "L") (re.union (str.to_re "M") (re.union (str.to_re "Q") (re.union (str.to_re "R") (re.union (str.to_re "V") (str.to_re "W")))))))))))))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (re.opt ((_ re.loop 2 2) (re.range "0" "9"))) (re.opt ((_ re.loop 2 2) (re.range "0" "9"))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)