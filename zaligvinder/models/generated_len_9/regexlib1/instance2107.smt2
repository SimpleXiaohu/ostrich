;test regex ^((\&#39;|\&quot;)?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\&#39;|\&#39;[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2)?)|(?:(?:\2)?(?:\,|\.|\!|\?)?))(?: (\&#39;|\&quot;)?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\&#39;|\&#39;[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2|\3)?)|(?:(?:\2|\3)?(?:\,|\.|\!|\?)?)))*)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.opt (re.union (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (str.to_re ";")))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (str.to_re ";")))))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))) (re.++ (re.opt (re.++ (str.to_re "-") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.opt (re.union (re.++ (str.to_re "s") (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (str.to_re ";"))))) (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (re.++ (str.to_re ";") ((_ re.loop 1 2) (re.union (re.range "a" "z") (re.range "A" "Z"))))))))) (re.++ (re.union (re.++ (re.opt (re.union (re.union (re.union (str.to_re ",") (str.to_re ".")) (str.to_re "!")) (str.to_re "?"))) (re.opt (_ re.reference 2))) (re.++ (re.opt (_ re.reference 2)) (re.opt (re.union (re.union (re.union (str.to_re ",") (str.to_re ".")) (str.to_re "!")) (str.to_re "?"))))) (re.* (re.++ (str.to_re " ") (re.++ (re.opt (re.union (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (str.to_re ";")))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (str.to_re ";")))))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))) (re.++ (re.opt (re.++ (str.to_re "-") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))))) (re.++ (re.opt (re.union (re.++ (str.to_re "s") (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (str.to_re ";"))))) (re.++ (str.to_re "&") (re.++ (str.to_re "#") (re.++ (str.to_re "39") (re.++ (str.to_re ";") ((_ re.loop 1 2) (re.union (re.range "a" "z") (re.range "A" "Z"))))))))) (re.union (re.++ (re.opt (re.union (re.union (re.union (str.to_re ",") (str.to_re ".")) (str.to_re "!")) (str.to_re "?"))) (re.opt (re.union (_ re.reference 2) (_ re.reference 3)))) (re.++ (re.opt (re.union (_ re.reference 2) (_ re.reference 3))) (re.opt (re.union (re.union (re.union (str.to_re ",") (str.to_re ".")) (str.to_re "!")) (str.to_re "?"))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)