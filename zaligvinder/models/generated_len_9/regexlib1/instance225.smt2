;test regex ^(A[A-HJ-M]|[BR][A-Y]|C[A-HJ-PR-V]|[EMOV][A-Y]|G[A-HJ-O]|[DFHKLPSWY][A-HJ-PR-Y]|MAN|N[A-EGHJ-PR-Y]|X[A-F]|)(0[02-9]|[1-9][0-9])[A-HJ-P-R-Z]{3}$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.++ (str.to_re "") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "A") (re.union (re.range "A" "H") (re.range "J" "M"))) (re.++ (re.union (str.to_re "B") (str.to_re "R")) (re.range "A" "Y"))) (re.++ (str.to_re "C") (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "V"))))) (re.++ (re.union (str.to_re "E") (re.union (str.to_re "M") (re.union (str.to_re "O") (str.to_re "V")))) (re.range "A" "Y"))) (re.++ (str.to_re "G") (re.union (re.range "A" "H") (re.range "J" "O")))) (re.++ (re.union (str.to_re "D") (re.union (str.to_re "F") (re.union (str.to_re "H") (re.union (str.to_re "K") (re.union (str.to_re "L") (re.union (str.to_re "P") (re.union (str.to_re "S") (re.union (str.to_re "W") (str.to_re "Y"))))))))) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))) (re.++ (str.to_re "M") (re.++ (str.to_re "A") (str.to_re "N")))) (re.++ (str.to_re "N") (re.union (re.range "A" "E") (re.union (str.to_re "G") (re.union (str.to_re "H") (re.union (re.range "J" "P") (re.range "R" "Y"))))))) (re.++ (str.to_re "X") (re.range "A" "F")))) (str.to_re "")) (re.++ (re.union (re.++ (str.to_re "0") (re.range "02" "9")) (re.++ (re.range "1" "9") (re.range "0" "9"))) ((_ re.loop 3 3) (re.union (re.range "A" "H") (re.union (re.range "J" "P") (re.union (str.to_re "-") (re.range "R" "Z")))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)