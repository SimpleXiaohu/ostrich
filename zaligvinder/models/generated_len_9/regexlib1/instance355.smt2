;test regex ^(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.union (re.union (re.++ (re.range "a" "z") (re.range "0" "9")) (re.++ (re.range "0" "9") (re.range "a" "z"))) (re.++ (re.union (re.range "a" "z") (re.range "0" "9")) (re.++ ((_ re.loop 1 2) (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-")))) (re.union (re.range "a" "z") (re.range "0" "9"))))) (re.++ (re.union (re.range "a" "z") (re.range "0" "9")) (re.++ (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-"))) (re.++ (re.union (re.++ (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-"))) (re.union (re.range "a" "z") (re.range "0" "9"))) (re.++ (re.union (re.range "a" "z") (re.range "0" "9")) (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-"))))) (re.++ (re.* (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-")))) (re.union (re.range "a" "z") (re.range "0" "9"))))))) (re.++ (str.to_re ".") (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "c") (str.to_re "o")) (re.++ (str.to_re "m") (str.to_re "e"))) (re.++ (str.to_re "o") (re.++ (str.to_re "r") (str.to_re "g")))) (re.++ (str.to_re "l") (re.++ (str.to_re "t") (str.to_re "d")))) (re.++ (str.to_re "p") (re.++ (str.to_re "l") (str.to_re "c")))) (re.++ (str.to_re "n") (re.++ (str.to_re "e") (str.to_re "t")))) (re.++ (str.to_re "s") (re.++ (str.to_re "c") (str.to_re "h")))) (re.++ (str.to_re "a") (str.to_re "c"))) (re.++ (str.to_re "m") (re.++ (str.to_re "o") (str.to_re "d")))) (re.++ (str.to_re "n") (re.++ (str.to_re "h") (str.to_re "s")))) (re.++ (str.to_re "p") (re.++ (str.to_re "o") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "c") (str.to_re "e"))))))) (re.++ (str.to_re "g") (re.++ (str.to_re "o") (str.to_re "v")))) (re.++ (str.to_re ".") (re.++ (str.to_re "u") (str.to_re "k"))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)