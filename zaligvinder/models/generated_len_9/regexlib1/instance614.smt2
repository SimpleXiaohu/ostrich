;test regex ((\+44\s?\(0\)\s?\d{2,4})|(\+44\s?(01|02|03|07|08)\d{2,3})|(\+44\s?(1|2|3|7|8)\d{2,3})|(\(\+44\)\s?\d{3,4})|(\(\d{5}\))|((01|02|03|07|08)\d{2,3})|(\d{5}))(\s|-|.)(((\d{3,4})(\s|-)(\d{3,4}))|((\d{6,7})))
(declare-const X String)
(assert (str.in_re X (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "+") (re.++ (str.to_re "44") (re.++ (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "(") (re.++ (str.to_re "0") (re.++ (str.to_re ")") (re.++ (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) ((_ re.loop 2 4) (re.range "0" "9"))))))))) (re.++ (str.to_re "+") (re.++ (str.to_re "44") (re.++ (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.union (re.union (re.union (re.union (str.to_re "01") (str.to_re "02")) (str.to_re "03")) (str.to_re "07")) (str.to_re "08")) ((_ re.loop 2 3) (re.range "0" "9"))))))) (re.++ (str.to_re "+") (re.++ (str.to_re "44") (re.++ (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.union (re.union (re.union (re.union (str.to_re "1") (str.to_re "2")) (str.to_re "3")) (str.to_re "7")) (str.to_re "8")) ((_ re.loop 2 3) (re.range "0" "9"))))))) (re.++ (str.to_re "(") (re.++ (str.to_re "+") (re.++ (str.to_re "44") (re.++ (str.to_re ")") (re.++ (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) ((_ re.loop 3 4) (re.range "0" "9")))))))) (re.++ (str.to_re "(") (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re ")")))) (re.++ (re.union (re.union (re.union (re.union (str.to_re "01") (str.to_re "02")) (str.to_re "03")) (str.to_re "07")) (str.to_re "08")) ((_ re.loop 2 3) (re.range "0" "9")))) ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (re.union (re.union (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (str.to_re "-")) (re.diff re.allchar (str.to_re "\n"))) (re.union (re.++ ((_ re.loop 3 4) (re.range "0" "9")) (re.++ (re.union (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (str.to_re "-")) ((_ re.loop 3 4) (re.range "0" "9")))) ((_ re.loop 6 7) (re.range "0" "9")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)