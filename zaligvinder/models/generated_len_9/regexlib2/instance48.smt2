;test regex (^(5[0678])\d{11,18}$)|(^(6[^05])\d{11,18}$)|(^(601)[^1]\d{9,16}$)|(^(6011)\d{9,11}$)|(^(6011)\d{13,16}$)|(^(65)\d{11,13}$)|(^(65)\d{15,18}$)|(^(49030)[2-9](\d{10}$|\d{12,13}$))|(^(49033)[5-9](\d{10}$|\d{12,13}$))|(^(49110)[1-2](\d{10}$|\d{12,13}$))|(^(49117)[4-9](\d{10}$|\d{12,13}$))|(^(49118)[0-2](\d{10}$|\d{12,13}$))|(^(4936)(\d{12}$|\d{14,15}$))
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.++ (str.to_re "") (re.++ (re.++ (str.to_re "5") (str.to_re "0678")) ((_ re.loop 11 18) (re.range "0" "9")))) (str.to_re "")) (re.++ (re.++ (str.to_re "") (re.++ (re.++ (str.to_re "6") (re.diff re.allchar (str.to_re "05"))) ((_ re.loop 11 18) (re.range "0" "9")))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "601") (re.++ (re.diff re.allchar (str.to_re "1")) ((_ re.loop 9 16) (re.range "0" "9"))))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "6011") ((_ re.loop 9 11) (re.range "0" "9")))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "6011") ((_ re.loop 13 16) (re.range "0" "9")))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "65") ((_ re.loop 11 13) (re.range "0" "9")))) (str.to_re ""))) (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "65") ((_ re.loop 15 18) (re.range "0" "9")))) (str.to_re ""))) (re.++ (str.to_re "") (re.++ (str.to_re "49030") (re.++ (re.range "2" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "") (re.++ (str.to_re "49033") (re.++ (re.range "5" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "") (re.++ (str.to_re "49110") (re.++ (re.range "1" "2") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "") (re.++ (str.to_re "49117") (re.++ (re.range "4" "9") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "") (re.++ (str.to_re "49118") (re.++ (re.range "0" "2") (re.union (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 12 13) (re.range "0" "9")) (str.to_re ""))))))) (re.++ (str.to_re "") (re.++ (str.to_re "4936") (re.union (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (str.to_re "")) (re.++ ((_ re.loop 14 15) (re.range "0" "9")) (str.to_re ""))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)