;test regex ^(AT ?U[0-9]{7}|BE ?[0-9]{10}|BG ?[0-9]{9,10}|CY ?[0-9]{8}[A-Z]{1}|CZ ?[0-9]{8,10}|DE ?[0-9]{9}|DK ?[0-9]{8}|EE ?[0-9]{9}|EL ?[0-9]{9}|ES ?[0-9A-Z]{9}|FI ?[0-9]{8}|FR ?[0-9A-Z]{11}|HU ?[0-9]{8}|IE ?[0-9A-Z]{8}|IT ?[0-9]{11}|LT ?([0-9]{9}|[0-9]{12})|LU ?[0-9]{8}|LV ?[0-9]{11}|MT ?[0-9]{8}|NL ?[0-9B]{12}|PL ?[0-9]{10}|PT ?[0-9]{9}|RO ?[0-9]{2,10}|SE ?[0-9]{12}|SI ?[0-9]{8}|SK ?[0-9]{10})$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re " ")) (re.++ (str.to_re "U") ((_ re.loop 7 7) (re.range "0" "9")))))) (re.++ (str.to_re "B") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 10 10) (re.range "0" "9")))))) (re.++ (str.to_re "B") (re.++ (str.to_re "G") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 10) (re.range "0" "9")))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Y") (re.++ (re.opt (str.to_re " ")) (re.++ ((_ re.loop 8 8) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "A" "Z"))))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Z") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 10) (re.range "0" "9")))))) (re.++ (str.to_re "D") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "D") (re.++ (str.to_re "K") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "E") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "E") (re.++ (str.to_re "L") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "E") (re.++ (str.to_re "S") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 9) (re.union (re.range "0" "9") (re.range "A" "Z"))))))) (re.++ (str.to_re "F") (re.++ (str.to_re "I") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "F") (re.++ (str.to_re "R") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 11 11) (re.union (re.range "0" "9") (re.range "A" "Z"))))))) (re.++ (str.to_re "H") (re.++ (str.to_re "U") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "I") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.union (re.range "0" "9") (re.range "A" "Z"))))))) (re.++ (str.to_re "I") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 11 11) (re.range "0" "9")))))) (re.++ (str.to_re "L") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re " ")) (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 12 12) (re.range "0" "9"))))))) (re.++ (str.to_re "L") (re.++ (str.to_re "U") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "L") (re.++ (str.to_re "V") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 11 11) (re.range "0" "9")))))) (re.++ (str.to_re "M") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "N") (re.++ (str.to_re "L") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 12 12) (re.union (re.range "0" "9") (str.to_re "B"))))))) (re.++ (str.to_re "P") (re.++ (str.to_re "L") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 10 10) (re.range "0" "9")))))) (re.++ (str.to_re "P") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 9 9) (re.range "0" "9")))))) (re.++ (str.to_re "R") (re.++ (str.to_re "O") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 2 10) (re.range "0" "9")))))) (re.++ (str.to_re "S") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 12 12) (re.range "0" "9")))))) (re.++ (str.to_re "S") (re.++ (str.to_re "I") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 8 8) (re.range "0" "9")))))) (re.++ (str.to_re "S") (re.++ (str.to_re "K") (re.++ (re.opt (str.to_re " ")) ((_ re.loop 10 10) (re.range "0" "9"))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)