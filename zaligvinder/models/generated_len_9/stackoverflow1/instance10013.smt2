;test regex ^(-?[0-9]+px\s?){2,3}(#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}|red|orange|black|white|purple|blue|red|yellow|green|brown|aqua|pink|teal)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ ((_ re.loop 2 3) (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "p") (re.++ (str.to_re "x") (re.opt (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))))))) (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "#") ((_ re.loop 6 6) (re.union (re.range "a" "f") (re.union (re.range "A" "F") (re.range "0" "9"))))) (re.++ (str.to_re "#") ((_ re.loop 3 3) (re.union (re.range "a" "f") (re.union (re.range "A" "F") (re.range "0" "9")))))) (re.++ (str.to_re "r") (re.++ (str.to_re "e") (str.to_re "d")))) (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (re.++ (str.to_re "g") (str.to_re "e"))))))) (re.++ (str.to_re "b") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (str.to_re "k")))))) (re.++ (str.to_re "w") (re.++ (str.to_re "h") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (str.to_re "e")))))) (re.++ (str.to_re "p") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (str.to_re "e"))))))) (re.++ (str.to_re "b") (re.++ (str.to_re "l") (re.++ (str.to_re "u") (str.to_re "e"))))) (re.++ (str.to_re "r") (re.++ (str.to_re "e") (str.to_re "d")))) (re.++ (str.to_re "y") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re "o") (str.to_re "w"))))))) (re.++ (str.to_re "g") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "e") (str.to_re "n")))))) (re.++ (str.to_re "b") (re.++ (str.to_re "r") (re.++ (str.to_re "o") (re.++ (str.to_re "w") (str.to_re "n")))))) (re.++ (str.to_re "a") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (str.to_re "a"))))) (re.++ (str.to_re "p") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (str.to_re "k"))))) (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (str.to_re "l"))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)