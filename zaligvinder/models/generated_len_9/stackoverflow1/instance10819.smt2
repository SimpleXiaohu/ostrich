;test regex ^[A,C,D,E,F,H,K,N,P,R,T,V,W,X,Y]{1}[0-9]{1}[0-9,W]{1}[\ \-]?[0-9,A,C,D,E,F,H,K,N,P,R,T,V,W,X,Y]{4}$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ ((_ re.loop 1 1) (re.union (str.to_re "A") (re.union (str.to_re ",") (re.union (str.to_re "C") (re.union (str.to_re ",") (re.union (str.to_re "D") (re.union (str.to_re ",") (re.union (str.to_re "E") (re.union (str.to_re ",") (re.union (str.to_re "F") (re.union (str.to_re ",") (re.union (str.to_re "H") (re.union (str.to_re ",") (re.union (str.to_re "K") (re.union (str.to_re ",") (re.union (str.to_re "N") (re.union (str.to_re ",") (re.union (str.to_re "P") (re.union (str.to_re ",") (re.union (str.to_re "R") (re.union (str.to_re ",") (re.union (str.to_re "T") (re.union (str.to_re ",") (re.union (str.to_re "V") (re.union (str.to_re ",") (re.union (str.to_re "W") (re.union (str.to_re ",") (re.union (str.to_re "X") (re.union (str.to_re ",") (str.to_re "Y")))))))))))))))))))))))))))))) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (re.union (re.range "0" "9") (re.union (str.to_re ",") (str.to_re "W")))) (re.++ (re.opt (re.union (str.to_re " ") (str.to_re "-"))) ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.union (str.to_re ",") (re.union (str.to_re "A") (re.union (str.to_re ",") (re.union (str.to_re "C") (re.union (str.to_re ",") (re.union (str.to_re "D") (re.union (str.to_re ",") (re.union (str.to_re "E") (re.union (str.to_re ",") (re.union (str.to_re "F") (re.union (str.to_re ",") (re.union (str.to_re "H") (re.union (str.to_re ",") (re.union (str.to_re "K") (re.union (str.to_re ",") (re.union (str.to_re "N") (re.union (str.to_re ",") (re.union (str.to_re "P") (re.union (str.to_re ",") (re.union (str.to_re "R") (re.union (str.to_re ",") (re.union (str.to_re "T") (re.union (str.to_re ",") (re.union (str.to_re "V") (re.union (str.to_re ",") (re.union (str.to_re "W") (re.union (str.to_re ",") (re.union (str.to_re "X") (re.union (str.to_re ",") (str.to_re "Y"))))))))))))))))))))))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)