;test regex FileRegex = "F[KG]I_.*_D_" + fileDate + "_[A-z]{0,3}L{0,1}[" + matchReportCode + "]{0,1}.daily.gzip";
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "F") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "F") (re.++ (re.union (str.to_re "K") (str.to_re "G")) (re.++ (str.to_re "I") (re.++ (str.to_re "_") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "_") (re.++ (str.to_re "D") (re.++ (str.to_re "_") (re.++ (str.to_re "\u{22}") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re " ") (re.++ (str.to_re "f") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "D") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (re.+ (str.to_re " ")) (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "_") (re.++ ((_ re.loop 0 3) (re.range "A" "z")) (re.++ ((_ re.loop 0 1) (str.to_re "L")) (re.++ ((_ re.loop 0 1) (re.union (str.to_re "\u{22}") (re.union (str.to_re " ") (re.union (str.to_re "+") (re.union (str.to_re " ") (re.union (str.to_re "m") (re.union (str.to_re "a") (re.union (str.to_re "t") (re.union (str.to_re "c") (re.union (str.to_re "h") (re.union (str.to_re "R") (re.union (str.to_re "e") (re.union (str.to_re "p") (re.union (str.to_re "o") (re.union (str.to_re "r") (re.union (str.to_re "t") (re.union (str.to_re "C") (re.union (str.to_re "o") (re.union (str.to_re "d") (re.union (str.to_re "e") (re.union (str.to_re " ") (re.union (str.to_re "+") (re.union (str.to_re " ") (str.to_re "\u{22}")))))))))))))))))))))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "d") (re.++ (str.to_re "a") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "y") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "g") (re.++ (str.to_re "z") (re.++ (str.to_re "i") (re.++ (str.to_re "p") (re.++ (str.to_re "\u{22}") (str.to_re ";"))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)