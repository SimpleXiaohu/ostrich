;test regex " & if(len(RegexSplit(Cell(5,6),"([0-9]*)(\w{2}) (\w{3}) (\d{4})",1)) = 1,0&RegexSplit(Cell(5,6),"([0-9]*)(\w{2}) (\w{3}) (\d{4})",1),RegexSplit(Cell(5,6),"([0-9]*)(\w{2}) (\w{3}) (\d{4})",1)) & "
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "&") (re.++ (str.to_re " ") (re.++ (str.to_re "i") (re.++ (str.to_re "f") (re.++ (re.++ (re.++ (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "S") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re "5") (re.++ (str.to_re ",") (str.to_re "6"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "\u{22}") (re.++ (re.* (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 3 3) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "\u{22}")))))))))) (re.++ (str.to_re ",") (str.to_re "1"))))))))))))) (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (str.to_re "1")))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "0") (re.++ (str.to_re "&") (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "S") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re "5") (re.++ (str.to_re ",") (str.to_re "6"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "\u{22}") (re.++ (re.* (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 3 3) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "\u{22}")))))))))) (re.++ (str.to_re ",") (str.to_re "1"))))))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "S") (re.++ (str.to_re "p") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re "5") (re.++ (str.to_re ",") (str.to_re "6"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "\u{22}") (re.++ (re.* (re.range "0" "9")) (re.++ ((_ re.loop 2 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 3 3) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re "\u{22}")))))))))) (re.++ (str.to_re ",") (str.to_re "1"))))))))))))))) (re.++ (str.to_re " ") (re.++ (str.to_re "&") (re.++ (str.to_re " ") (str.to_re "\u{22}")))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)