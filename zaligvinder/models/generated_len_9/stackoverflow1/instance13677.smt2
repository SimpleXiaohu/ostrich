;test regex ^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).*?"(.*?/p/.*?,\d+,(\d+)/**FOLDER-NUMBER**/.*?)" "(\d+)" "(\d+)".*$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (str.to_re ".") (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (str.to_re ".") (re.++ ((_ re.loop 1 3) (re.range "0" "9")) (re.++ (str.to_re ".") ((_ re.loop 1 3) (re.range "0" "9")))))))) (re.++ (re.*? (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{22}") (re.++ (re.++ (re.++ (re.++ (re.*? (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "/") (re.++ (str.to_re "p") (re.++ (str.to_re "/") (re.*? (re.diff re.allchar (str.to_re "\n"))))))) (re.++ (str.to_re ",") (re.+ (re.range "0" "9")))) (re.++ (str.to_re ",") (re.++ (re.+ (re.range "0" "9")) (re.++ (re.* (re.* (str.to_re "/"))) (re.++ (str.to_re "F") (re.++ (str.to_re "O") (re.++ (str.to_re "L") (re.++ (str.to_re "D") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "-") (re.++ (str.to_re "N") (re.++ (str.to_re "U") (re.++ (str.to_re "M") (re.++ (str.to_re "B") (re.++ (str.to_re "E") (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (str.to_re "/") (re.*? (re.diff re.allchar (str.to_re "\n"))))))))))))))))))))) (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "\u{22}") (re.* (re.diff re.allchar (str.to_re "\n"))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)