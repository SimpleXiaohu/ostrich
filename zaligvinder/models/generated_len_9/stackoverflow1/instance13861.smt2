;test regex sed -r 's/^(([^@]*@){2})/\1\n/;ta;:a;/\n[0-9]?$/s/\n//;t;/\n(1[0-9]|[0-9])([0-9][0-9]?)/s//\1@\2\n/;ta;/\n([0-9]?[^0-9\n]) ?/s//\1\n/;ta' file
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "d") (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "s") (str.to_re "/")))))))))) (re.++ (str.to_re "") (re.++ ((_ re.loop 2 2) (re.++ (re.* (re.diff re.allchar (str.to_re "@"))) (str.to_re "@"))) (re.++ (str.to_re "/") (re.++ (_ re.reference 1) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re ":") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.opt (re.range "0" "9")))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "/") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re ";") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.++ (re.union (re.++ (str.to_re "1") (re.range "0" "9")) (re.range "0" "9")) (re.++ (re.++ (re.range "0" "9") (re.opt (re.range "0" "9"))) (re.++ (str.to_re "/") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (_ re.reference 1) (re.++ (str.to_re "@") (re.++ (_ re.reference 2) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.++ (re.++ (re.opt (re.range "0" "9")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.diff re.allchar (str.to_re "\u{0a}")))) (re.++ (re.opt (str.to_re " ")) (re.++ (str.to_re "/") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (_ re.reference 1) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re " ") (re.++ (str.to_re "f") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (str.to_re "e"))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)