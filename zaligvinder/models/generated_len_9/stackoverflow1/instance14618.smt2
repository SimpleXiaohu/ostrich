;test regex ^((0[01])|(0[01][0-9]{4})|(0[01][0-9]{4}0[02])|(0[01][0-9]{4}0[02]0[014])|(0[01][0-9]{4}0[02]0[014]0[0-2])|(0[01][0-9]{4}0[02]0[014]0[0-2]0[0-2]))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "0") (str.to_re "01")) (re.++ (str.to_re "0") (re.++ (str.to_re "01") ((_ re.loop 4 4) (re.range "0" "9"))))) (re.++ (str.to_re "0") (re.++ (str.to_re "01") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "0") (str.to_re "02")))))) (re.++ (str.to_re "0") (re.++ (str.to_re "01") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "0") (re.++ (str.to_re "02") (re.++ (str.to_re "0") (str.to_re "014")))))))) (re.++ (str.to_re "0") (re.++ (str.to_re "01") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "0") (re.++ (str.to_re "02") (re.++ (str.to_re "0") (re.++ (str.to_re "014") (re.++ (str.to_re "0") (re.range "0" "2")))))))))) (re.++ (str.to_re "0") (re.++ (str.to_re "01") (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "0") (re.++ (str.to_re "02") (re.++ (str.to_re "0") (re.++ (str.to_re "014") (re.++ (str.to_re "0") (re.++ (re.range "0" "2") (re.++ (str.to_re "0") (re.range "0" "2"))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)