;test regex ^([A-Z|a-z|0-9](\.|_){0,1})+[A-Z|a-z|0-9]\@([A-Z|a-z|0-9])+((\.){0,1}[A-Z|a-z|0-9]){2}\.(com|net|org|co|org)+((\.[A-Z|a-z|0-9]{2,4})?)$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.+ (re.++ (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.range "0" "9"))))) ((_ re.loop 0 1) (re.union (str.to_re ".") (str.to_re "_"))))) (re.++ (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.range "0" "9"))))) (re.++ (str.to_re "@") (re.++ (re.+ (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.range "0" "9")))))) (re.++ ((_ re.loop 2 2) (re.++ ((_ re.loop 0 1) (str.to_re ".")) (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.range "0" "9"))))))) (re.++ (str.to_re ".") (re.++ (re.+ (re.union (re.union (re.union (re.union (re.++ (str.to_re "c") (re.++ (str.to_re "o") (str.to_re "m"))) (re.++ (str.to_re "n") (re.++ (str.to_re "e") (str.to_re "t")))) (re.++ (str.to_re "o") (re.++ (str.to_re "r") (str.to_re "g")))) (re.++ (str.to_re "c") (str.to_re "o"))) (re.++ (str.to_re "o") (re.++ (str.to_re "r") (str.to_re "g"))))) (re.opt (re.++ (str.to_re ".") ((_ re.loop 2 4) (re.union (re.range "A" "Z") (re.union (str.to_re "|") (re.union (re.range "a" "z") (re.union (str.to_re "|") (re.range "0" "9")))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)