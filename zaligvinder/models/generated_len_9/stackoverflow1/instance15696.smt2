;test regex ^(([1-9]{0}|[1-9]{1}\/)|(1(([0-2]{0,1})|([0-2]{0,1}\/)))|((0)|(0[1-9]{1})|(0[1-9]{1})\/))(([1-9]{0,1}|[1-9]\/)|(((1|2)([0-9]{1}))|((1|2)([0-9]{1})\/))|((3(0|1))|(3(0|1)\/))|((0)|(0[1-9]{1})|(0[1-9]{1}\/)))(([1-9]{0,4})|([1-9]{1}[0-9]{0,3}))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.union (re.union ((_ re.loop 0 0) (re.range "1" "9")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) (str.to_re "/"))) (re.++ (str.to_re "1") (re.union ((_ re.loop 0 1) (re.range "0" "2")) (re.++ ((_ re.loop 0 1) (re.range "0" "2")) (str.to_re "/"))))) (re.union (re.union (str.to_re "0") (re.++ (str.to_re "0") ((_ re.loop 1 1) (re.range "1" "9")))) (re.++ (re.++ (str.to_re "0") ((_ re.loop 1 1) (re.range "1" "9"))) (str.to_re "/")))) (re.++ (re.union (re.union (re.union (re.union ((_ re.loop 0 1) (re.range "1" "9")) (re.++ (re.range "1" "9") (str.to_re "/"))) (re.union (re.++ (re.union (str.to_re "1") (str.to_re "2")) ((_ re.loop 1 1) (re.range "0" "9"))) (re.++ (re.union (str.to_re "1") (str.to_re "2")) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (str.to_re "/"))))) (re.union (re.++ (str.to_re "3") (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (str.to_re "3") (re.++ (re.union (str.to_re "0") (str.to_re "1")) (str.to_re "/"))))) (re.union (re.union (str.to_re "0") (re.++ (str.to_re "0") ((_ re.loop 1 1) (re.range "1" "9")))) (re.++ (str.to_re "0") (re.++ ((_ re.loop 1 1) (re.range "1" "9")) (str.to_re "/"))))) (re.union ((_ re.loop 0 4) (re.range "1" "9")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 0 3) (re.range "0" "9"))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)