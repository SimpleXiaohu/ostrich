;test regex RewriteRule (.*)(\.(css|js|htc|pdf|jpg|jpeg|gif|png|ico|mpg|mp3|ogg|wav|otf|eot|svg|ttf|woff)){1}$ $1$2 [QSA,L]
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "w") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "R") (re.++ (str.to_re "u") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) ((_ re.loop 1 1) (re.++ (str.to_re ".") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "c") (re.++ (str.to_re "s") (str.to_re "s"))) (re.++ (str.to_re "j") (str.to_re "s"))) (re.++ (str.to_re "h") (re.++ (str.to_re "t") (str.to_re "c")))) (re.++ (str.to_re "p") (re.++ (str.to_re "d") (str.to_re "f")))) (re.++ (str.to_re "j") (re.++ (str.to_re "p") (str.to_re "g")))) (re.++ (str.to_re "j") (re.++ (str.to_re "p") (re.++ (str.to_re "e") (str.to_re "g"))))) (re.++ (str.to_re "g") (re.++ (str.to_re "i") (str.to_re "f")))) (re.++ (str.to_re "p") (re.++ (str.to_re "n") (str.to_re "g")))) (re.++ (str.to_re "i") (re.++ (str.to_re "c") (str.to_re "o")))) (re.++ (str.to_re "m") (re.++ (str.to_re "p") (str.to_re "g")))) (re.++ (str.to_re "m") (re.++ (str.to_re "p") (str.to_re "3")))) (re.++ (str.to_re "o") (re.++ (str.to_re "g") (str.to_re "g")))) (re.++ (str.to_re "w") (re.++ (str.to_re "a") (str.to_re "v")))) (re.++ (str.to_re "o") (re.++ (str.to_re "t") (str.to_re "f")))) (re.++ (str.to_re "e") (re.++ (str.to_re "o") (str.to_re "t")))) (re.++ (str.to_re "s") (re.++ (str.to_re "v") (str.to_re "g")))) (re.++ (str.to_re "t") (re.++ (str.to_re "t") (str.to_re "f")))) (re.++ (str.to_re "w") (re.++ (str.to_re "o") (re.++ (str.to_re "f") (str.to_re "f")))))))))))))))))))) (re.++ (str.to_re "") (str.to_re " "))) (re.++ (str.to_re "") (str.to_re "1"))) (re.++ (str.to_re "") (re.++ (str.to_re "2") (re.++ (str.to_re " ") (re.union (str.to_re "Q") (re.union (str.to_re "S") (re.union (str.to_re "A") (re.union (str.to_re ",") (str.to_re "L")))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)