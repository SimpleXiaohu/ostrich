;test regex (0[1-9]:[0-5][0-9]((\ ){0,1})((AM)|(PM)|(am)|(pm)))|([1-9]:[0-5][0-9]((\ ){0,1})((AM)|(PM)|(am)|(pm)))|(1[0-2]:[0-5][0-9]((\ ){0,1})((AM)|(PM)|(am)|(pm)))
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.++ (str.to_re "0") (re.++ (re.range "1" "9") (re.++ (str.to_re ":") (re.++ (re.range "0" "5") (re.++ (re.range "0" "9") (re.++ ((_ re.loop 0 1) (str.to_re " ")) (re.union (re.union (re.union (re.++ (str.to_re "A") (str.to_re "M")) (re.++ (str.to_re "P") (str.to_re "M"))) (re.++ (str.to_re "a") (str.to_re "m"))) (re.++ (str.to_re "p") (str.to_re "m"))))))))) (re.++ (re.range "1" "9") (re.++ (str.to_re ":") (re.++ (re.range "0" "5") (re.++ (re.range "0" "9") (re.++ ((_ re.loop 0 1) (str.to_re " ")) (re.union (re.union (re.union (re.++ (str.to_re "A") (str.to_re "M")) (re.++ (str.to_re "P") (str.to_re "M"))) (re.++ (str.to_re "a") (str.to_re "m"))) (re.++ (str.to_re "p") (str.to_re "m"))))))))) (re.++ (str.to_re "1") (re.++ (re.range "0" "2") (re.++ (str.to_re ":") (re.++ (re.range "0" "5") (re.++ (re.range "0" "9") (re.++ ((_ re.loop 0 1) (str.to_re " ")) (re.union (re.union (re.union (re.++ (str.to_re "A") (str.to_re "M")) (re.++ (str.to_re "P") (str.to_re "M"))) (re.++ (str.to_re "a") (str.to_re "m"))) (re.++ (str.to_re "p") (str.to_re "m"))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)