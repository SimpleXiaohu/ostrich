;test regex ([A-Z]{1}[a-z]{2} [A-Z]{1}[a-z]{2} [0-9]{1,2}, [0-4]{4} [0-9]{1,2}[ap]{1}m)( to ([A-Z]{1}[a-z]{2} [A-Z]{1}[a-z]{2} [0-9]{1,2}, [0-4]{4} [0-9]{1,2}[ap]{1}m))?
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.++ (str.to_re " ") (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.++ (str.to_re " ") ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ ((_ re.loop 4 4) (re.range "0" "4")) (re.++ (str.to_re " ") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "a") (str.to_re "p"))) (str.to_re "m")))))))) (re.opt (re.++ (str.to_re " ") (re.++ (str.to_re "t") (re.++ (str.to_re "o") (re.++ (str.to_re " ") (re.++ (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.++ (str.to_re " ") (re.++ ((_ re.loop 1 1) (re.range "A" "Z")) (re.++ ((_ re.loop 2 2) (re.range "a" "z")) (re.++ (str.to_re " ") ((_ re.loop 1 2) (re.range "0" "9")))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ ((_ re.loop 4 4) (re.range "0" "4")) (re.++ (str.to_re " ") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "a") (str.to_re "p"))) (str.to_re "m"))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)