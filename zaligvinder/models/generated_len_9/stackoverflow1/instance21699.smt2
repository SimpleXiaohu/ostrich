;test regex (?:http\:\/\/)?(?:www\.)?ama?zo?n\.(?:com|ca|co\.uk|co\.jp|de|fr)/(?:exec/obidos/ASIN/|o/|gp/product/|(?:(?:[^"\'/]*)/)?dp/|)(B[A-Z0-9]{9})(?:(?:/|\?|\#)(?:[^"\'\s]*))?
(declare-const X String)
(assert (str.in_re X (re.++ (re.opt (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (str.to_re "/")))))))) (re.++ (re.opt (re.++ (str.to_re "w") (re.++ (str.to_re "w") (re.++ (str.to_re "w") (str.to_re "."))))) (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (re.opt (str.to_re "a")) (re.++ (str.to_re "z") (re.++ (re.opt (str.to_re "o")) (re.++ (str.to_re "n") (re.++ (str.to_re ".") (re.++ (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "c") (re.++ (str.to_re "o") (str.to_re "m"))) (re.++ (str.to_re "c") (str.to_re "a"))) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re ".") (re.++ (str.to_re "u") (str.to_re "k")))))) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re ".") (re.++ (str.to_re "j") (str.to_re "p")))))) (re.++ (str.to_re "d") (str.to_re "e"))) (re.++ (str.to_re "f") (str.to_re "r"))) (re.++ (str.to_re "/") (re.++ (re.union (re.++ (str.to_re "") (re.union (re.union (re.union (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "e") (re.++ (str.to_re "c") (re.++ (str.to_re "/") (re.++ (str.to_re "o") (re.++ (str.to_re "b") (re.++ (str.to_re "i") (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "A") (re.++ (str.to_re "S") (re.++ (str.to_re "I") (re.++ (str.to_re "N") (str.to_re "/"))))))))))))))))) (re.++ (str.to_re "o") (str.to_re "/"))) (re.++ (str.to_re "g") (re.++ (str.to_re "p") (re.++ (str.to_re "/") (re.++ (str.to_re "p") (re.++ (str.to_re "r") (re.++ (str.to_re "o") (re.++ (str.to_re "d") (re.++ (str.to_re "u") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (str.to_re "/")))))))))))) (re.++ (re.opt (re.++ (re.* (re.inter (re.diff re.allchar (str.to_re "\u{22}")) (re.inter (re.diff re.allchar (str.to_re "\u{27}")) (re.diff re.allchar (str.to_re "/"))))) (str.to_re "/"))) (re.++ (str.to_re "d") (re.++ (str.to_re "p") (str.to_re "/")))))) (str.to_re "")) (re.++ (re.++ (str.to_re "B") ((_ re.loop 9 9) (re.union (re.range "A" "Z") (re.range "0" "9")))) (re.opt (re.++ (re.union (re.union (str.to_re "/") (str.to_re "?")) (str.to_re "#")) (re.* (re.inter (re.diff re.allchar (str.to_re "\u{22}")) (re.inter (re.diff re.allchar (str.to_re "\u{27}")) (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)