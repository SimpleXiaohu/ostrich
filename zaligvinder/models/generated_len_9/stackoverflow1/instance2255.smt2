;test regex (.?0.?){3}|(.?1.?){3}|(.?2.?){3}|(.?3.?){3}|(.?4.?){3}|(.?5.?){3}|(.?6.?){3}|(.?7.?){3}|(.?8.?){3}|(.?9.?){3}
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "0") (re.opt (re.diff re.allchar (str.to_re "\n")))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "1") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "2") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "3") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "4") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "5") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "6") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "7") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "8") (re.opt (re.diff re.allchar (str.to_re "\n"))))))) ((_ re.loop 3 3) (re.++ (re.opt (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "9") (re.opt (re.diff re.allchar (str.to_re "\n")))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)