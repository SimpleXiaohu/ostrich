;test regex Pattern.compile("^0*(([a-q]{6,}|[A-Q]{6,}){6,24})(1{6,})(([a-q]{6,}|[A-Q]{6,}){6,24})(1*0*$)");
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "P") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "n") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "p") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "") (re.++ (re.* (str.to_re "0")) (re.++ ((_ re.loop 6 24) (re.union (re.++ (re.* (re.range "a" "q")) ((_ re.loop 6 6) (re.range "a" "q"))) (re.++ (re.* (re.range "A" "Q")) ((_ re.loop 6 6) (re.range "A" "Q"))))) (re.++ (re.++ (re.* (str.to_re "1")) ((_ re.loop 6 6) (str.to_re "1"))) (re.++ ((_ re.loop 6 24) (re.union (re.++ (re.* (re.range "a" "q")) ((_ re.loop 6 6) (re.range "a" "q"))) (re.++ (re.* (re.range "A" "Q")) ((_ re.loop 6 6) (re.range "A" "Q"))))) (re.++ (re.++ (re.++ (re.* (str.to_re "1")) (re.* (str.to_re "0"))) (str.to_re "")) (str.to_re "\u{22}")))))))) (str.to_re ";")))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)