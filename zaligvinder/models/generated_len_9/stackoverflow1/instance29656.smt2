;test regex (\d{1,2}\.\d{1,2}[am|AM|aM|Am][pm|PM|Pm|pM]-\d{1,2}\.\d{1,2}[am|AM|aM|Am][pm|PM|Pm|pM])
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re ".") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.union (str.to_re "a") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "A") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "A") (str.to_re "m"))))))))))) (re.++ (re.union (str.to_re "p") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "P") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "P") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "p") (str.to_re "M"))))))))))) (re.++ (str.to_re "-") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re ".") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.union (str.to_re "a") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "A") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "A") (str.to_re "m"))))))))))) (re.union (str.to_re "p") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "P") (re.union (str.to_re "M") (re.union (str.to_re "|") (re.union (str.to_re "P") (re.union (str.to_re "m") (re.union (str.to_re "|") (re.union (str.to_re "p") (str.to_re "M")))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)