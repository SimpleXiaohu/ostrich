;test regex ^(\<((\D+)( [a-z]*=\"[\S]*|[ ]\.{0,1}[\S]*\")*)\>).*<(iframe)( [a-z]*=\"[\S]*|[ ]\.{0,1}[\S]*\")+\><\/\5>\<\/\3\>|(\<\D+\/\>)$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "") (re.++ (re.++ (str.to_re "<") (re.++ (re.++ (re.+ (re.diff re.allchar (re.range "0" "9"))) (re.* (re.union (re.++ (str.to_re " ") (re.++ (re.* (re.range "a" "z")) (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (re.* (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 0 1) (str.to_re ".")) (re.++ (re.* (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (str.to_re "\u{22}"))))))) (str.to_re ">"))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "<") (re.++ (re.++ (str.to_re "i") (re.++ (str.to_re "f") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "m") (str.to_re "e")))))) (re.++ (re.+ (re.union (re.++ (str.to_re " ") (re.++ (re.* (re.range "a" "z")) (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (re.* (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 0 1) (str.to_re ".")) (re.++ (re.* (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (str.to_re "\u{22}")))))) (re.++ (str.to_re ">") (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (_ re.reference 5) (re.++ (str.to_re ">") (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (_ re.reference 3) (str.to_re ">"))))))))))))))) (re.++ (re.++ (str.to_re "<") (re.++ (re.+ (re.diff re.allchar (re.range "0" "9"))) (re.++ (str.to_re "/") (str.to_re ">")))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)