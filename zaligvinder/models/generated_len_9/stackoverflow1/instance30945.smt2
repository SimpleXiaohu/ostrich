;test regex $sequence =~ /(ATG)([ACGT]{3})(TAG|TAA|TGA)/ and $2 !~ /TAG|TAA|TGA/;
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "c") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re "~") (re.++ (str.to_re " ") (re.++ (str.to_re "/") (re.++ (re.++ (str.to_re "A") (re.++ (str.to_re "T") (str.to_re "G"))) (re.++ ((_ re.loop 3 3) (re.union (str.to_re "A") (re.union (str.to_re "C") (re.union (str.to_re "G") (str.to_re "T"))))) (re.++ (re.union (re.union (re.++ (str.to_re "T") (re.++ (str.to_re "A") (str.to_re "G"))) (re.++ (str.to_re "T") (re.++ (str.to_re "A") (str.to_re "A")))) (re.++ (str.to_re "T") (re.++ (str.to_re "G") (str.to_re "A")))) (re.++ (str.to_re "/") (re.++ (str.to_re " ") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (str.to_re " "))))))))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "2") (re.++ (str.to_re " ") (re.++ (str.to_re "!") (re.++ (str.to_re "~") (re.++ (str.to_re " ") (re.++ (str.to_re "/") (re.++ (str.to_re "T") (re.++ (str.to_re "A") (str.to_re "G"))))))))))) (re.++ (str.to_re "T") (re.++ (str.to_re "A") (str.to_re "A")))) (re.++ (str.to_re "T") (re.++ (str.to_re "G") (re.++ (str.to_re "A") (re.++ (str.to_re "/") (str.to_re ";"))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)