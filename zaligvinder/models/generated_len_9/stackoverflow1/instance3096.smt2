;test regex huge_regex = "(?:(?:\\+?1\\s*(?:[.-]\\s*)?)?(?:\\(\\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\\s*\\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\\s*(?:[.-]\\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\\s*(?:[.-]\\s*)?([0-9]{4})(?:\\s*(?:#|x\\.?|ext\\.?|extension)\\s*(\\d+))?"
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "h") (re.++ (str.to_re "u") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "_") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.opt (re.++ (re.opt (re.++ (re.+? (str.to_re "\\")) (re.++ (str.to_re "1") (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.opt (re.++ (re.union (str.to_re ".") (str.to_re "-")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))))) (re.++ (re.union (re.++ (str.to_re "\\") (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.++ (re.union (re.union (re.++ (re.range "2" "9") (re.++ (str.to_re "1") (re.range "02" "9"))) (re.++ (re.range "2" "9") (re.++ (re.range "02" "8") (str.to_re "1")))) (re.++ (re.range "2" "9") (re.++ (re.range "02" "8") (re.range "02" "9")))) (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (str.to_re "\\"))))))) (re.union (re.union (re.++ (re.range "2" "9") (re.++ (str.to_re "1") (re.range "02" "9"))) (re.++ (re.range "2" "9") (re.++ (re.range "02" "8") (str.to_re "1")))) (re.++ (re.range "2" "9") (re.++ (re.range "02" "8") (re.range "02" "9"))))) (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.opt (re.++ (re.union (str.to_re ".") (str.to_re "-")) (re.++ (str.to_re "\\") (re.* (str.to_re "s")))))))))) (re.++ (re.union (re.union (re.++ (re.range "2" "9") (re.++ (str.to_re "1") (re.range "02" "9"))) (re.++ (re.range "2" "9") (re.++ (re.range "02" "9") (str.to_re "1")))) (re.++ (re.range "2" "9") ((_ re.loop 2 2) (re.range "02" "9")))) (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.++ (re.opt (re.++ (re.union (str.to_re ".") (str.to_re "-")) (re.++ (str.to_re "\\") (re.* (str.to_re "s"))))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.opt (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.++ (re.union (re.union (re.union (str.to_re "#") (re.++ (str.to_re "x") (re.++ (str.to_re "\\") (re.opt (re.diff re.allchar (str.to_re "\n")))))) (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "\\") (re.opt (re.diff re.allchar (str.to_re "\n")))))))) (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "s") (re.++ (str.to_re "i") (re.++ (str.to_re "o") (str.to_re "n")))))))))) (re.++ (str.to_re "\\") (re.++ (re.* (str.to_re "s")) (re.++ (str.to_re "\\") (re.+ (str.to_re "d"))))))))) (str.to_re "\u{22}"))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)