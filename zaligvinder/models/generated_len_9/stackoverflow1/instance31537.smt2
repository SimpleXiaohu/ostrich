;test regex $/(http://download\.oracle\.com/otn/java/jdk/\du\d{2}-b\d{1,2}/(jdk-\du\d{2}-(linux|windows)-x64\.(exe|tar\.gz)))/$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "/") (re.++ (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "w") (re.++ (str.to_re "n") (re.++ (str.to_re "l") (re.++ (str.to_re "o") (re.++ (str.to_re "a") (re.++ (str.to_re "d") (re.++ (str.to_re ".") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re ".") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "m") (re.++ (str.to_re "/") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (re.++ (str.to_re "n") (re.++ (str.to_re "/") (re.++ (str.to_re "j") (re.++ (str.to_re "a") (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "/") (re.++ (str.to_re "j") (re.++ (str.to_re "d") (re.++ (str.to_re "k") (re.++ (str.to_re "/") (re.++ (re.range "0" "9") (re.++ (str.to_re "u") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ (str.to_re "b") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "/") (re.++ (str.to_re "j") (re.++ (str.to_re "d") (re.++ (str.to_re "k") (re.++ (str.to_re "-") (re.++ (re.range "0" "9") (re.++ (str.to_re "u") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ (re.union (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "u") (str.to_re "x"))))) (re.++ (str.to_re "w") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "w") (str.to_re "s")))))))) (re.++ (str.to_re "-") (re.++ (str.to_re "x") (re.++ (str.to_re "64") (re.++ (str.to_re ".") (re.union (re.++ (str.to_re "e") (re.++ (str.to_re "x") (str.to_re "e"))) (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re ".") (re.++ (str.to_re "g") (str.to_re "z"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (str.to_re "/")))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)