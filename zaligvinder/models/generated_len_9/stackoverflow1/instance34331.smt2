;test regex /<\/?[table|td|th|tr|tfoot|thead|tbody]{1,}>?/
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "/") (re.++ (str.to_re "<") (re.++ (re.opt (str.to_re "/")) (re.++ (re.++ (re.* (re.union (str.to_re "t") (re.union (str.to_re "a") (re.union (str.to_re "b") (re.union (str.to_re "l") (re.union (str.to_re "e") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "d") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "h") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "r") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "f") (re.union (str.to_re "o") (re.union (str.to_re "o") (re.union (str.to_re "t") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "h") (re.union (str.to_re "e") (re.union (str.to_re "a") (re.union (str.to_re "d") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "b") (re.union (str.to_re "o") (re.union (str.to_re "d") (str.to_re "y"))))))))))))))))))))))))))))))))) ((_ re.loop 1 1) (re.union (str.to_re "t") (re.union (str.to_re "a") (re.union (str.to_re "b") (re.union (str.to_re "l") (re.union (str.to_re "e") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "d") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "h") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "r") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "f") (re.union (str.to_re "o") (re.union (str.to_re "o") (re.union (str.to_re "t") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "h") (re.union (str.to_re "e") (re.union (str.to_re "a") (re.union (str.to_re "d") (re.union (str.to_re "|") (re.union (str.to_re "t") (re.union (str.to_re "b") (re.union (str.to_re "o") (re.union (str.to_re "d") (str.to_re "y")))))))))))))))))))))))))))))))))) (re.++ (re.opt (str.to_re ">")) (str.to_re "/"))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)