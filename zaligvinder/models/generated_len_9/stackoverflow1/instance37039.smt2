;test regex b=foreach a generate flattern(EXTRACT(a,'([\\w\\s]{05})([\\w\\s]{10})([\\w\\s]{02})([\\w\\s]{01})([\\w\\s]{10})([\\w\\s\\W]{01})([\\w\\s\\W]{10})([\\w\\s]{10})'))
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "b") (re.++ (str.to_re "=") (re.++ (str.to_re "f") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "h") (re.++ (str.to_re " ") (re.++ (str.to_re "a") (re.++ (str.to_re " ") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re "f") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "n") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "T") (re.++ (str.to_re "R") (re.++ (str.to_re "A") (re.++ (str.to_re "C") (re.++ (str.to_re "T") (re.++ (str.to_re "a") (re.++ (str.to_re ",") (re.++ (str.to_re "\u{27}") (re.++ ((_ re.loop 5 5) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (re.++ ((_ re.loop 10 10) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (re.++ ((_ re.loop 2 2) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (re.++ ((_ re.loop 10 10) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (re.++ ((_ re.loop 1 1) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (re.union (str.to_re "s") (re.union (str.to_re "\\") (str.to_re "W"))))))) (re.++ ((_ re.loop 10 10) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (re.union (str.to_re "s") (re.union (str.to_re "\\") (str.to_re "W"))))))) (re.++ ((_ re.loop 10 10) (re.union (str.to_re "\\") (re.union (str.to_re "w") (re.union (str.to_re "\\") (str.to_re "s"))))) (str.to_re "\u{27}"))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)