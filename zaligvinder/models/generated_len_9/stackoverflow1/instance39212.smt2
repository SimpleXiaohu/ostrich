;test regex [(]?([A-ZT][a-zn]+[_][A-ZD][a-zu]+)?[ ]?((\\d{4})|([?]))[ ]?[-][ ]?(([A-ZK][a-zo]+[_][A-Z][a-z]+))?[ ]?(\\d{4}|\\d{2}[)])[ ]?[)]?
(declare-const X String)
(assert (str.in_re X (re.++ (re.opt (str.to_re "(")) (re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (str.to_re "T")) (re.++ (re.+ (re.union (re.range "a" "z") (str.to_re "n"))) (re.++ (str.to_re "_") (re.++ (re.union (re.range "A" "Z") (str.to_re "D")) (re.+ (re.union (re.range "a" "z") (str.to_re "u")))))))) (re.++ (re.opt (str.to_re " ")) (re.++ (re.union (re.++ (str.to_re "\\") ((_ re.loop 4 4) (str.to_re "d"))) (str.to_re "?")) (re.++ (re.opt (str.to_re " ")) (re.++ (str.to_re "-") (re.++ (re.opt (str.to_re " ")) (re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (str.to_re "K")) (re.++ (re.+ (re.union (re.range "a" "z") (str.to_re "o"))) (re.++ (str.to_re "_") (re.++ (re.range "A" "Z") (re.+ (re.range "a" "z"))))))) (re.++ (re.opt (str.to_re " ")) (re.++ (re.union (re.++ (str.to_re "\\") ((_ re.loop 4 4) (str.to_re "d"))) (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (str.to_re ")")))) (re.++ (re.opt (str.to_re " ")) (re.opt (str.to_re ")")))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)