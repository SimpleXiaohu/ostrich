;test regex (?:^\s*(?:|\$|GBP|Euro|gbp)?\s*(?:199|1\d{3}\d*|(?:[2-9]\d\d+))$)|(?:^\s*(?:(?:199|1\d{3}\d*|(?:[2-9]\d\d+))\s*(?:|\$|GBP|Euro|gbp)?)$)
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (str.to_re "") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.union (re.++ (str.to_re "") (re.union (re.union (re.union (str.to_re "$") (re.++ (str.to_re "G") (re.++ (str.to_re "B") (str.to_re "P")))) (re.++ (str.to_re "E") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (str.to_re "o"))))) (re.++ (str.to_re "g") (re.++ (str.to_re "b") (str.to_re "p"))))) (str.to_re ""))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.union (re.union (str.to_re "199") (re.++ (str.to_re "1") (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.range "0" "9"))))) (re.++ (re.range "2" "9") (re.++ (re.range "0" "9") (re.+ (re.range "0" "9"))))))))) (str.to_re "")) (re.++ (re.++ (str.to_re "") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.union (re.union (str.to_re "199") (re.++ (str.to_re "1") (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.* (re.range "0" "9"))))) (re.++ (re.range "2" "9") (re.++ (re.range "0" "9") (re.+ (re.range "0" "9"))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.opt (re.union (re.++ (str.to_re "") (re.union (re.union (re.union (str.to_re "$") (re.++ (str.to_re "G") (re.++ (str.to_re "B") (str.to_re "P")))) (re.++ (str.to_re "E") (re.++ (str.to_re "u") (re.++ (str.to_re "r") (str.to_re "o"))))) (re.++ (str.to_re "g") (re.++ (str.to_re "b") (str.to_re "p"))))) (str.to_re ""))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)