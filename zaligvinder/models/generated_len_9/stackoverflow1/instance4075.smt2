;test regex (\t{2}<idx:entry name="dic">\r\n)(\t{4}<idx:orth>)(.+\r\n)(\t{4}<idx:infl>[^</idx:infl>]+)?
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ ((_ re.loop 2 2) (str.to_re "\u{09}")) (re.++ (str.to_re "<") (re.++ (str.to_re "i") (re.++ (str.to_re "d") (re.++ (str.to_re "x") (re.++ (str.to_re ":") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "y") (re.++ (str.to_re " ") (re.++ (str.to_re "n") (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "d") (re.++ (str.to_re "i") (re.++ (str.to_re "c") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re ">") (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))))))))))))))))))))))))) (re.++ (re.++ ((_ re.loop 4 4) (str.to_re "\u{09}")) (re.++ (str.to_re "<") (re.++ (str.to_re "i") (re.++ (str.to_re "d") (re.++ (str.to_re "x") (re.++ (str.to_re ":") (re.++ (str.to_re "o") (re.++ (str.to_re "r") (re.++ (str.to_re "t") (re.++ (str.to_re "h") (str.to_re ">"))))))))))) (re.++ (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))) (re.opt (re.++ ((_ re.loop 4 4) (str.to_re "\u{09}")) (re.++ (str.to_re "<") (re.++ (str.to_re "i") (re.++ (str.to_re "d") (re.++ (str.to_re "x") (re.++ (str.to_re ":") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "f") (re.++ (str.to_re "l") (re.++ (str.to_re ">") (re.+ (re.inter (re.diff re.allchar (str.to_re "<")) (re.inter (re.diff re.allchar (str.to_re "/")) (re.inter (re.diff re.allchar (str.to_re "i")) (re.inter (re.diff re.allchar (str.to_re "d")) (re.inter (re.diff re.allchar (str.to_re "x")) (re.inter (re.diff re.allchar (str.to_re ":")) (re.inter (re.diff re.allchar (str.to_re "i")) (re.inter (re.diff re.allchar (str.to_re "n")) (re.inter (re.diff re.allchar (str.to_re "f")) (re.inter (re.diff re.allchar (str.to_re "l")) (re.diff re.allchar (str.to_re ">"))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)