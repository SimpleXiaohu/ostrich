;test regex ([D]{1}[C]{1}[0]{3})?([D]{1}[C]{1}[0]{3}[1-9]{1}[0-9]{3})|([D]{1}[C]{1}[1-9]{1})?([D]{1}[C]{1}[1-9]{1}[0-9]{6})|([D]{1}[C]{1}[0-9]{1}[1-9]{1})?([D]{1}[C]{1}[0-9]{1}[1-9]{1}[0-9]{5})|([D]{1}[C]{1}[0-9]{2}[1]{1})?([D]{1}[C]{1}[0-9]{2}[1]{1}[0-9]{4})
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.++ (re.opt (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) ((_ re.loop 3 3) (str.to_re "0"))))) (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 3 3) (str.to_re "0")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 3 3) (re.range "0" "9"))))))) (re.++ (re.opt (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) ((_ re.loop 1 1) (re.range "1" "9"))))) (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 6 6) (re.range "0" "9"))))))) (re.++ (re.opt (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) ((_ re.loop 1 1) (re.range "1" "9")))))) (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (re.range "1" "9")) ((_ re.loop 5 5) (re.range "0" "9")))))))) (re.++ (re.opt (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) ((_ re.loop 1 1) (str.to_re "1")))))) (re.++ ((_ re.loop 1 1) (str.to_re "D")) (re.++ ((_ re.loop 1 1) (str.to_re "C")) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ ((_ re.loop 1 1) (str.to_re "1")) ((_ re.loop 4 4) (re.range "0" "9"))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)