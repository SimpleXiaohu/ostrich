;test regex (\d{2}:\d{2}:\d{2}\.\d{3})\s\[D\].+<MBXID>(\d+)<\/MBXID><MBXTO>(\d+)<\/MBXTO>.+<MSGTEXT>(.+)<\/MSGTEXT>
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re ":") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re ".") ((_ re.loop 3 3) (re.range "0" "9")))))))) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (str.to_re "[") (re.++ (str.to_re "D") (re.++ (str.to_re "]") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "<") (re.++ (str.to_re "M") (re.++ (str.to_re "B") (re.++ (str.to_re "X") (re.++ (str.to_re "I") (re.++ (str.to_re "D") (re.++ (str.to_re ">") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "M") (re.++ (str.to_re "B") (re.++ (str.to_re "X") (re.++ (str.to_re "I") (re.++ (str.to_re "D") (re.++ (str.to_re ">") (re.++ (str.to_re "<") (re.++ (str.to_re "M") (re.++ (str.to_re "B") (re.++ (str.to_re "X") (re.++ (str.to_re "T") (re.++ (str.to_re "O") (re.++ (str.to_re ">") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "M") (re.++ (str.to_re "B") (re.++ (str.to_re "X") (re.++ (str.to_re "T") (re.++ (str.to_re "O") (re.++ (str.to_re ">") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "<") (re.++ (str.to_re "M") (re.++ (str.to_re "S") (re.++ (str.to_re "G") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "T") (re.++ (str.to_re ">") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "M") (re.++ (str.to_re "S") (re.++ (str.to_re "G") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "X") (re.++ (str.to_re "T") (str.to_re ">")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)