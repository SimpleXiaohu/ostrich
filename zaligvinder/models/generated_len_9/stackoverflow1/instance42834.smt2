;test regex ^P:\\(?:EVENT|OPPORTUN|ORGANISA|PERSON)\\0(\d)\\(\d{2})\\(\d{2})\\(?:\1\2\3)0\.\d+\.\w{3,4}|P:\\(?:EVENT|OPPORTUN|ORGANISA|PERSON)\\(\d{2})\\(\d{2})\\(\d{2})\\(?:\4\5\6)\.\d+\.\w{3,4}$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "") (re.++ (str.to_re "P") (re.++ (str.to_re ":") (re.++ (str.to_re "\\") (re.++ (re.union (re.union (re.union (re.++ (str.to_re "E") (re.++ (str.to_re "V") (re.++ (str.to_re "E") (re.++ (str.to_re "N") (str.to_re "T"))))) (re.++ (str.to_re "O") (re.++ (str.to_re "P") (re.++ (str.to_re "P") (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "T") (re.++ (str.to_re "U") (str.to_re "N"))))))))) (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "G") (re.++ (str.to_re "A") (re.++ (str.to_re "N") (re.++ (str.to_re "I") (re.++ (str.to_re "S") (str.to_re "A"))))))))) (re.++ (str.to_re "P") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "S") (re.++ (str.to_re "O") (str.to_re "N"))))))) (re.++ (str.to_re "\\") (re.++ (str.to_re "0") (re.++ (re.range "0" "9") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "\\") (re.++ (re.++ (_ re.reference 1) (re.++ (_ re.reference 2) (_ re.reference 3))) (re.++ (str.to_re "0") (re.++ (str.to_re ".") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") ((_ re.loop 3 4) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_"))))))))))))))))))))))) (re.++ (re.++ (str.to_re "P") (re.++ (str.to_re ":") (re.++ (str.to_re "\\") (re.++ (re.union (re.union (re.union (re.++ (str.to_re "E") (re.++ (str.to_re "V") (re.++ (str.to_re "E") (re.++ (str.to_re "N") (str.to_re "T"))))) (re.++ (str.to_re "O") (re.++ (str.to_re "P") (re.++ (str.to_re "P") (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "T") (re.++ (str.to_re "U") (str.to_re "N"))))))))) (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "G") (re.++ (str.to_re "A") (re.++ (str.to_re "N") (re.++ (str.to_re "I") (re.++ (str.to_re "S") (str.to_re "A"))))))))) (re.++ (str.to_re "P") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "S") (re.++ (str.to_re "O") (str.to_re "N"))))))) (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "\\") (re.++ (re.++ (_ re.reference 4) (re.++ (_ re.reference 5) (_ re.reference 6))) (re.++ (str.to_re ".") (re.++ (re.+ (re.range "0" "9")) (re.++ (str.to_re ".") ((_ re.loop 3 4) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))))))))))))))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)