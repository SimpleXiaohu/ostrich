;test regex SCANNERID_.+_\d{1,2}-\d{1,2}-\d{1,4}_(.+)_X_(.+)_(LEFT|RIGHT).zip
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "S") (re.++ (str.to_re "C") (re.++ (str.to_re "A") (re.++ (str.to_re "N") (re.++ (str.to_re "N") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "I") (re.++ (str.to_re "D") (re.++ (str.to_re "_") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "_") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "-") (re.++ ((_ re.loop 1 4) (re.range "0" "9")) (re.++ (str.to_re "_") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "_") (re.++ (str.to_re "X") (re.++ (str.to_re "_") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "_") (re.++ (re.union (re.++ (str.to_re "L") (re.++ (str.to_re "E") (re.++ (str.to_re "F") (str.to_re "T")))) (re.++ (str.to_re "R") (re.++ (str.to_re "I") (re.++ (str.to_re "G") (re.++ (str.to_re "H") (str.to_re "T")))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "z") (re.++ (str.to_re "i") (str.to_re "p")))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)