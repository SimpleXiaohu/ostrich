;test regex var_s1=`grep "species,subl,cmp=    $3    $4    $5" $tfile |sed -r 's/.*(.{11}).{12}/\1/'`
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re "_") (re.++ (str.to_re "s") (re.++ (str.to_re "1") (re.++ (str.to_re "=") (re.++ (str.to_re "`") (re.++ (str.to_re "g") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "p") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "s") (re.++ (str.to_re "p") (re.++ (str.to_re "e") (re.++ (str.to_re "c") (re.++ (str.to_re "i") (re.++ (str.to_re "e") (str.to_re "s"))))))))))))))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (str.to_re "l")))))) (re.++ (str.to_re ",") (re.++ (str.to_re "c") (re.++ (str.to_re "m") (re.++ (str.to_re "p") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (str.to_re " ")))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "3") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (str.to_re " "))))))) (re.++ (str.to_re "") (re.++ (str.to_re "4") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (str.to_re " "))))))) (re.++ (str.to_re "") (re.++ (str.to_re "5") (re.++ (str.to_re "\u{22}") (str.to_re " "))))) (re.++ (str.to_re "") (re.++ (str.to_re "t") (re.++ (str.to_re "f") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (str.to_re " ")))))))) (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "d") (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 11 11) (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 12 12) (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "/") (re.++ (_ re.reference 1) (re.++ (str.to_re "/") (re.++ (str.to_re "\u{27}") (str.to_re "`")))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)