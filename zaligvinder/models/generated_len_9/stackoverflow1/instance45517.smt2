;test regex [!(]*([A-Z]+[0-9]*([.:][A-Z]+[0-9]*)*\[([01]|0[.]{2}1)\]|TRUE|FALSE)[)]*( *[&|] *[!(]*([A-Z]+[0-9]*([.:][A-Z]+[0-9]*)*\[([01]|0[.]{2}1)\]|TRUE|FALSE)[)]*)*
(declare-const X String)
(assert (str.in_re X (re.++ (re.* (re.union (str.to_re "!") (str.to_re "("))) (re.++ (re.union (re.union (re.++ (re.+ (re.range "A" "Z")) (re.++ (re.* (re.range "0" "9")) (re.++ (re.* (re.++ (re.union (str.to_re ".") (str.to_re ":")) (re.++ (re.+ (re.range "A" "Z")) (re.* (re.range "0" "9"))))) (re.++ (str.to_re "[") (re.++ (re.union (str.to_re "01") (re.++ (str.to_re "0") (re.++ ((_ re.loop 2 2) (str.to_re ".")) (str.to_re "1")))) (str.to_re "]")))))) (re.++ (str.to_re "T") (re.++ (str.to_re "R") (re.++ (str.to_re "U") (str.to_re "E"))))) (re.++ (str.to_re "F") (re.++ (str.to_re "A") (re.++ (str.to_re "L") (re.++ (str.to_re "S") (str.to_re "E")))))) (re.++ (re.* (str.to_re ")")) (re.* (re.++ (re.* (str.to_re " ")) (re.++ (re.union (str.to_re "&") (str.to_re "|")) (re.++ (re.* (str.to_re " ")) (re.++ (re.* (re.union (str.to_re "!") (str.to_re "("))) (re.++ (re.union (re.union (re.++ (re.+ (re.range "A" "Z")) (re.++ (re.* (re.range "0" "9")) (re.++ (re.* (re.++ (re.union (str.to_re ".") (str.to_re ":")) (re.++ (re.+ (re.range "A" "Z")) (re.* (re.range "0" "9"))))) (re.++ (str.to_re "[") (re.++ (re.union (str.to_re "01") (re.++ (str.to_re "0") (re.++ ((_ re.loop 2 2) (str.to_re ".")) (str.to_re "1")))) (str.to_re "]")))))) (re.++ (str.to_re "T") (re.++ (str.to_re "R") (re.++ (str.to_re "U") (str.to_re "E"))))) (re.++ (str.to_re "F") (re.++ (str.to_re "A") (re.++ (str.to_re "L") (re.++ (str.to_re "S") (str.to_re "E")))))) (re.* (str.to_re ")")))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)