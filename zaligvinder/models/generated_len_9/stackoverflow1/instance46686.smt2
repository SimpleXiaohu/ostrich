;test regex <select name="ctl00\$ContentPlaceHolder1\$UrunListesi\$ctrl([0-9]{1,2})\$StokBoyut" id="ctl00_ContentPlaceHolder1_UrunListesi_ctrl([0-9]{1,2})_StokBoyut">([\s\S]*?)<\/select>
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "<") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re " ") (re.++ (str.to_re "n") (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "l") (re.++ (str.to_re "00") (re.++ (str.to_re "$") (re.++ (str.to_re "C") (re.++ (str.to_re "o") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "P") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "e") (re.++ (str.to_re "H") (re.++ (str.to_re "o") (re.++ (str.to_re "l") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "1") (re.++ (str.to_re "$") (re.++ (str.to_re "U") (re.++ (str.to_re "r") (re.++ (str.to_re "u") (re.++ (str.to_re "n") (re.++ (str.to_re "L") (re.++ (str.to_re "i") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "s") (re.++ (str.to_re "i") (re.++ (str.to_re "$") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "l") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "$") (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "o") (re.++ (str.to_re "k") (re.++ (str.to_re "B") (re.++ (str.to_re "o") (re.++ (str.to_re "y") (re.++ (str.to_re "u") (re.++ (str.to_re "t") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "i") (re.++ (str.to_re "d") (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "l") (re.++ (str.to_re "00") (re.++ (str.to_re "_") (re.++ (str.to_re "C") (re.++ (str.to_re "o") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "P") (re.++ (str.to_re "l") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "e") (re.++ (str.to_re "H") (re.++ (str.to_re "o") (re.++ (str.to_re "l") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "1") (re.++ (str.to_re "_") (re.++ (str.to_re "U") (re.++ (str.to_re "r") (re.++ (str.to_re "u") (re.++ (str.to_re "n") (re.++ (str.to_re "L") (re.++ (str.to_re "i") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "s") (re.++ (str.to_re "i") (re.++ (str.to_re "_") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "l") (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "_") (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "o") (re.++ (str.to_re "k") (re.++ (str.to_re "B") (re.++ (str.to_re "o") (re.++ (str.to_re "y") (re.++ (str.to_re "u") (re.++ (str.to_re "t") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re ">") (re.++ (re.*? (re.union (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}"))))))))) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (str.to_re ">"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)