;test regex I.+(Fab|Opt).+(\\d{4}\\/\\d{2}\\/\\d{2}).+(\\d{2}:\\d{2}:\\d{2}:\\d{3}).+Bus\\s\\/\\s(\\w+)\\s:\\W+\\n500.+003(\\d{7}).+
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "I") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.union (re.++ (str.to_re "F") (re.++ (str.to_re "a") (str.to_re "b"))) (re.++ (str.to_re "O") (re.++ (str.to_re "p") (str.to_re "t")))) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 4 4) (str.to_re "d")) (re.++ (str.to_re "\\") (re.++ (str.to_re "/") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re "\\") (re.++ (str.to_re "/") (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d"))))))))))) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re ":") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re ":") (re.++ (str.to_re "\\") (re.++ ((_ re.loop 2 2) (str.to_re "d")) (re.++ (str.to_re ":") (re.++ (str.to_re "\\") ((_ re.loop 3 3) (str.to_re "d")))))))))))) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "B") (re.++ (str.to_re "u") (re.++ (str.to_re "s") (re.++ (str.to_re "\\") (re.++ (str.to_re "s") (re.++ (str.to_re "\\") (re.++ (str.to_re "/") (re.++ (str.to_re "\\") (re.++ (str.to_re "s") (re.++ (re.++ (str.to_re "\\") (re.+ (str.to_re "w"))) (re.++ (str.to_re "\\") (re.++ (str.to_re "s") (re.++ (str.to_re ":") (re.++ (str.to_re "\\") (re.++ (re.+ (str.to_re "W")) (re.++ (str.to_re "\\") (re.++ (str.to_re "n") (re.++ (str.to_re "500") (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "003") (re.++ (re.++ (str.to_re "\\") ((_ re.loop 7 7) (str.to_re "d"))) (re.+ (re.diff re.allchar (str.to_re "\n"))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)