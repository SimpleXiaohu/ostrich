;test regex sed -r '/^\s*include/b;/^\s*! /b;G;:a;s/^(\.(not|and|or|eqv|neqv)\.)(.*\n.*)/\3\1/;ta;s/^\.([^0-9]{2,})(.*\n.*)/\2%\1/;ta;s/^(.)(.*\n.*)/\2\1/;ta;s/\n//'
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "d") (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (str.to_re "/"))))))))) (re.++ (str.to_re "") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "c") (re.++ (str.to_re "l") (re.++ (str.to_re "u") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re "/") (re.++ (str.to_re "b") (re.++ (str.to_re ";") (str.to_re "/")))))))))))))) (re.++ (str.to_re "") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "!") (re.++ (str.to_re " ") (re.++ (str.to_re "/") (re.++ (str.to_re "b") (re.++ (str.to_re ";") (re.++ (str.to_re "G") (re.++ (str.to_re ";") (re.++ (str.to_re ":") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "s") (str.to_re "/"))))))))))))))) (re.++ (str.to_re "") (re.++ (re.++ (str.to_re ".") (re.++ (re.union (re.union (re.union (re.union (re.++ (str.to_re "n") (re.++ (str.to_re "o") (str.to_re "t"))) (re.++ (str.to_re "a") (re.++ (str.to_re "n") (str.to_re "d")))) (re.++ (str.to_re "o") (str.to_re "r"))) (re.++ (str.to_re "e") (re.++ (str.to_re "q") (str.to_re "v")))) (re.++ (str.to_re "n") (re.++ (str.to_re "e") (re.++ (str.to_re "q") (str.to_re "v"))))) (str.to_re "."))) (re.++ (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{0a}") (re.* (re.diff re.allchar (str.to_re "\n"))))) (re.++ (str.to_re "/") (re.++ (_ re.reference 3) (re.++ (_ re.reference 1) (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "s") (str.to_re "/")))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re ".") (re.++ (re.++ (re.* (re.diff re.allchar (re.range "0" "9"))) ((_ re.loop 2 2) (re.diff re.allchar (re.range "0" "9")))) (re.++ (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{0a}") (re.* (re.diff re.allchar (str.to_re "\n"))))) (re.++ (str.to_re "/") (re.++ (_ re.reference 2) (re.++ (str.to_re "%") (re.++ (_ re.reference 1) (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "s") (str.to_re "/")))))))))))))))) (re.++ (str.to_re "") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "\u{0a}") (re.* (re.diff re.allchar (str.to_re "\n"))))) (re.++ (str.to_re "/") (re.++ (_ re.reference 2) (re.++ (_ re.reference 1) (re.++ (str.to_re "/") (re.++ (str.to_re ";") (re.++ (str.to_re "t") (re.++ (str.to_re "a") (re.++ (str.to_re ";") (re.++ (str.to_re "s") (re.++ (str.to_re "/") (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (str.to_re "\u{27}"))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)