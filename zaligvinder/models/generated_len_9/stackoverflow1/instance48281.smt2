;test regex s2.sub!(/ {2,}\*([^\n]*?<code>.*?<\/code>[^\n]*|[^\n]*)\n?/m, '<li>\1</li>')
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "s") (re.++ (str.to_re "2") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (re.++ (str.to_re "!") (re.++ (re.++ (str.to_re "/") (re.++ (re.++ (re.* (str.to_re " ")) ((_ re.loop 2 2) (str.to_re " "))) (re.++ (str.to_re "*") (re.++ (re.union (re.++ (re.*? (re.diff re.allchar (str.to_re "\u{0a}"))) (re.++ (str.to_re "<") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re ">") (re.++ (re.*? (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "d") (re.++ (str.to_re "e") (re.++ (str.to_re ">") (re.* (re.diff re.allchar (str.to_re "\u{0a}")))))))))))))))))) (re.* (re.diff re.allchar (str.to_re "\u{0a}")))) (re.++ (re.opt (str.to_re "\u{0a}")) (re.++ (str.to_re "/") (str.to_re "m"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "<") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re ">") (re.++ (_ re.reference 1) (re.++ (str.to_re "<") (re.++ (str.to_re "/") (re.++ (str.to_re "l") (re.++ (str.to_re "i") (re.++ (str.to_re ">") (str.to_re "\u{27}"))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)