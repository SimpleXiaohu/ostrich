;test regex ((\r\n){2}((([--]{2,}[=][a-zA-Z0-9._]+)(\r\n)) ((((Content([\x2D][a-zA-Z]+)+)[:]([\x09\x0C\x20]*([a-zA-Z0-9\x2D]+([\x2F][a-zA-Z\x2D]+)?)[;]?)(\r\n))([\x09\x0C\x20]*[a-zA-Z]+[\x09\x0C\x20]*[=])))))
(declare-const X String)
(assert (str.in_re X (re.++ ((_ re.loop 2 2) (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))) (re.++ (re.++ (re.++ (re.++ (re.* (re.union (str.to_re "-") (str.to_re "-"))) ((_ re.loop 2 2) (re.union (str.to_re "-") (str.to_re "-")))) (re.++ (str.to_re "=") (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re ".") (str.to_re "_")))))))) (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))) (re.++ (str.to_re " ") (re.++ (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "o") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "n") (re.++ (str.to_re "t") (re.+ (re.++ (str.to_re "\u{2d}") (re.+ (re.union (re.range "a" "z") (re.range "A" "Z")))))))))))) (re.++ (str.to_re ":") (re.++ (re.++ (re.* (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0c}") (str.to_re "\u{20}")))) (re.++ (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "\u{2d}"))))) (re.opt (re.++ (str.to_re "\u{2f}") (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (str.to_re "\u{2d}"))))))) (re.opt (str.to_re ";")))) (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))))) (re.++ (re.* (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0c}") (str.to_re "\u{20}")))) (re.++ (re.+ (re.union (re.range "a" "z") (re.range "A" "Z"))) (re.++ (re.* (re.union (str.to_re "\u{09}") (re.union (str.to_re "\u{0c}") (str.to_re "\u{20}")))) (str.to_re "="))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)