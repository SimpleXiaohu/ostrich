;test regex sub('((.+_){1}.+?).*$', '\\1', x)  # {0} will give "a", {1} - "a_b", {2} - "a_b_c" and so on
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "\u{27}") (re.++ (re.++ ((_ re.loop 1 1) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (str.to_re "_"))) (re.+? (re.diff re.allchar (str.to_re "\n")))) (re.* (re.diff re.allchar (str.to_re "\n"))))) (re.++ (str.to_re "") (str.to_re "\u{27}"))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "\\") (re.++ (str.to_re "1") (str.to_re "\u{27}"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (str.to_re "x")))) (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re "#") (re.++ ((_ re.loop 0 0) (str.to_re " ")) (re.++ (str.to_re " ") (re.++ (str.to_re "w") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re "l") (re.++ (str.to_re " ") (re.++ (str.to_re "g") (re.++ (str.to_re "i") (re.++ (str.to_re "v") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "a") (str.to_re "\u{22}")))))))))))))))))))))) (re.++ (str.to_re ",") (re.++ ((_ re.loop 1 1) (str.to_re " ")) (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "a") (re.++ (str.to_re "_") (re.++ (str.to_re "b") (str.to_re "\u{22}"))))))))))) (re.++ (str.to_re ",") (re.++ ((_ re.loop 2 2) (str.to_re " ")) (re.++ (str.to_re " ") (re.++ (str.to_re "-") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "a") (re.++ (str.to_re "_") (re.++ (str.to_re "b") (re.++ (str.to_re "_") (re.++ (str.to_re "c") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re " ") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "o") (re.++ (str.to_re " ") (re.++ (str.to_re "o") (str.to_re "n")))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)