;test regex ^text-shadow:\s*(initial|unset|inherit|(-?\d+(px)?\s*){2,3}(#((\[a-f0-9\]{3}){1,2})|\[a-z-\]+)|(#((\[a-f0-9\]{3}){1,2})|\[a-z-\]+)\s*(-?\d+(px)?\s*){2,3});?$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "-") (re.++ (str.to_re "s") (re.++ (str.to_re "h") (re.++ (str.to_re "a") (re.++ (str.to_re "d") (re.++ (str.to_re "o") (re.++ (str.to_re "w") (re.++ (str.to_re ":") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.union (re.union (re.union (re.union (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "i") (re.++ (str.to_re "a") (str.to_re "l"))))))) (re.++ (str.to_re "u") (re.++ (str.to_re "n") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (str.to_re "t")))))) (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "h") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (str.to_re "t")))))))) (re.++ ((_ re.loop 2 3) (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (str.to_re "p") (str.to_re "x"))) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))))) (re.union (re.++ (str.to_re "#") ((_ re.loop 1 2) (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "f") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") ((_ re.loop 3 3) (str.to_re "]"))))))))))) (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "z") (re.++ (str.to_re "-") (re.+ (str.to_re "]")))))))))) (re.++ (re.union (re.++ (str.to_re "#") ((_ re.loop 1 2) (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "f") (re.++ (str.to_re "0") (re.++ (str.to_re "-") (re.++ (str.to_re "9") ((_ re.loop 3 3) (str.to_re "]"))))))))))) (re.++ (str.to_re "[") (re.++ (str.to_re "a") (re.++ (str.to_re "-") (re.++ (str.to_re "z") (re.++ (str.to_re "-") (re.+ (str.to_re "]")))))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) ((_ re.loop 2 3) (re.++ (re.opt (str.to_re "-")) (re.++ (re.+ (re.range "0" "9")) (re.++ (re.opt (re.++ (str.to_re "p") (str.to_re "x"))) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))))))))) (re.opt (str.to_re ";"))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)