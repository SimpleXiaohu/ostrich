;test regex Regex: Value=^\(?!HDL\s|LDL\)(PRODUCTNAME\d{1}\.\d{1})+$
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (re.++ (str.to_re "R") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "V") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "u") (re.++ (str.to_re "e") (str.to_re "="))))))))))))) (re.++ (str.to_re "") (re.++ (re.opt (str.to_re "(")) (re.++ (str.to_re "!") (re.++ (str.to_re "H") (re.++ (str.to_re "D") (re.++ (str.to_re "L") (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))))))))) (re.++ (re.++ (str.to_re "L") (re.++ (str.to_re "D") (re.++ (str.to_re "L") (re.++ (str.to_re ")") (re.+ (re.++ (str.to_re "P") (re.++ (str.to_re "R") (re.++ (str.to_re "O") (re.++ (str.to_re "D") (re.++ (str.to_re "U") (re.++ (str.to_re "C") (re.++ (str.to_re "T") (re.++ (str.to_re "N") (re.++ (str.to_re "A") (re.++ (str.to_re "M") (re.++ (str.to_re "E") (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.++ (str.to_re ".") ((_ re.loop 1 1) (re.range "0" "9")))))))))))))))))))) (str.to_re "")))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)