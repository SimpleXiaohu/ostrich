;test regex re.Pattern = "(loss_pct_through_[a-zA-Z]{3,5}\d{4}\[[a-zA-Z_]{1,2}\d{1,2}\]\s=\s\d\.\d{14};\r\n\r\n)(\}\r\n)"
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "P") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "n") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.++ (str.to_re "l") (re.++ (str.to_re "o") (re.++ (str.to_re "s") (re.++ (str.to_re "s") (re.++ (str.to_re "_") (re.++ (str.to_re "p") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (str.to_re "_") (re.++ (str.to_re "t") (re.++ (str.to_re "h") (re.++ (str.to_re "r") (re.++ (str.to_re "o") (re.++ (str.to_re "u") (re.++ (str.to_re "g") (re.++ (str.to_re "h") (re.++ (str.to_re "_") (re.++ ((_ re.loop 3 5) (re.union (re.range "a" "z") (re.range "A" "Z"))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "[") (re.++ ((_ re.loop 1 2) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (str.to_re "_")))) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (str.to_re "]") (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (str.to_re "=") (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.range "0" "9") (re.++ (str.to_re ".") (re.++ ((_ re.loop 14 14) (re.range "0" "9")) (re.++ (str.to_re ";") (re.++ (str.to_re "\u{0d}") (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}")))))))))))))))))))))))))))))))))) (re.++ (re.++ (str.to_re "}") (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}"))) (str.to_re "\u{22}")))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)