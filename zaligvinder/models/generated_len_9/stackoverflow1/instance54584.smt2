;test regex ^ {0,5}(\d{4}[A-Z]) +((?:\S+ )+(?: {0,10}K\+)?) *(\.\.|\d+) +(?:[A-Z#\*] *)?(\.\.|\d+(?:\.\d{1,4})?) +(?:[ab] *)?((?:\S+ ){0,4}) *([A-Z]{2}) {0,10}$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ ((_ re.loop 0 5) (str.to_re " ")) (re.++ (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.range "A" "Z")) (re.++ (re.+ (str.to_re " ")) (re.++ (re.++ (re.+ (re.++ (re.+ (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (str.to_re " "))) (re.opt (re.++ ((_ re.loop 0 10) (str.to_re " ")) (re.++ (str.to_re "K") (str.to_re "+"))))) (re.++ (re.* (str.to_re " ")) (re.++ (re.union (re.++ (str.to_re ".") (str.to_re ".")) (re.+ (re.range "0" "9"))) (re.++ (re.+ (str.to_re " ")) (re.++ (re.opt (re.++ (re.union (re.range "A" "Z") (re.union (str.to_re "#") (str.to_re "*"))) (re.* (str.to_re " ")))) (re.++ (re.union (re.++ (str.to_re ".") (str.to_re ".")) (re.++ (re.+ (re.range "0" "9")) (re.opt (re.++ (str.to_re ".") ((_ re.loop 1 4) (re.range "0" "9")))))) (re.++ (re.+ (str.to_re " ")) (re.++ (re.opt (re.++ (re.union (str.to_re "a") (str.to_re "b")) (re.* (str.to_re " ")))) (re.++ ((_ re.loop 0 4) (re.++ (re.+ (re.inter (re.diff re.allchar (str.to_re "\u{20}")) (re.inter (re.diff re.allchar (str.to_re "\u{0a}")) (re.inter (re.diff re.allchar (str.to_re "\u{0b}")) (re.inter (re.diff re.allchar (str.to_re "\u{0d}")) (re.inter (re.diff re.allchar (str.to_re "\u{09}")) (re.diff re.allchar (str.to_re "\u{0c}")))))))) (str.to_re " "))) (re.++ (re.* (str.to_re " ")) (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 0 10) (str.to_re " "))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)