;test regex var SALT_PATTERN = /^\$2[ay]\$(0[4-9]|[12][0-9]|3[01])\$[.\/A-Za-z0-9]{21}[.Oeu]/;
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "S") (re.++ (str.to_re "A") (re.++ (str.to_re "L") (re.++ (str.to_re "T") (re.++ (str.to_re "_") (re.++ (str.to_re "P") (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "R") (re.++ (str.to_re "N") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (str.to_re "/")))))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "$") (re.++ (str.to_re "2") (re.++ (re.union (str.to_re "a") (str.to_re "y")) (re.++ (str.to_re "$") (re.++ (re.union (re.union (re.++ (str.to_re "0") (re.range "4" "9")) (re.++ (str.to_re "12") (re.range "0" "9"))) (re.++ (str.to_re "3") (str.to_re "01"))) (re.++ (str.to_re "$") (re.++ ((_ re.loop 21 21) (re.union (str.to_re ".") (re.union (str.to_re "/") (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))))) (re.++ (re.union (str.to_re ".") (re.union (str.to_re "O") (re.union (str.to_re "e") (str.to_re "u")))) (re.++ (str.to_re "/") (str.to_re ";"))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)