;test regex dff['User_Mentions2'] =  dff['content'].str.extract('@([a-zA-Z0-9]{1,15})', expand=False)
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "d") (re.++ (str.to_re "f") (re.++ (str.to_re "f") (re.++ (re.union (str.to_re "\u{27}") (re.union (str.to_re "U") (re.union (str.to_re "s") (re.union (str.to_re "e") (re.union (str.to_re "r") (re.union (str.to_re "_") (re.union (str.to_re "M") (re.union (str.to_re "e") (re.union (str.to_re "n") (re.union (str.to_re "t") (re.union (str.to_re "i") (re.union (str.to_re "o") (re.union (str.to_re "n") (re.union (str.to_re "s") (re.union (str.to_re "2") (str.to_re "\u{27}")))))))))))))))) (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re " ") (re.++ (str.to_re "d") (re.++ (str.to_re "f") (re.++ (str.to_re "f") (re.++ (re.union (str.to_re "\u{27}") (re.union (str.to_re "c") (re.union (str.to_re "o") (re.union (str.to_re "n") (re.union (str.to_re "t") (re.union (str.to_re "e") (re.union (str.to_re "n") (re.union (str.to_re "t") (str.to_re "\u{27}"))))))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "t") (re.++ (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "@") (re.++ ((_ re.loop 1 15) (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.range "0" "9")))) (str.to_re "\u{27}")))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "n") (re.++ (str.to_re "d") (re.++ (str.to_re "=") (re.++ (str.to_re "F") (re.++ (str.to_re "a") (re.++ (str.to_re "l") (re.++ (str.to_re "s") (str.to_re "e")))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)