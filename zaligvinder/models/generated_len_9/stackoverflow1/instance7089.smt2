;test regex ^-{4,}+(?:\r\n|\r|\n)LATEST DETECTED DEADLOCK(?:\r\n|\r|\n)-{4,}+(?:\r\n|\r|\n)(.+)-{4,}+$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.+ (re.++ (re.* (str.to_re "-")) ((_ re.loop 4 4) (str.to_re "-")))) (re.++ (re.union (re.union (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}")) (str.to_re "\u{0d}")) (str.to_re "\u{0a}")) (re.++ (str.to_re "L") (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "S") (re.++ (str.to_re "T") (re.++ (str.to_re " ") (re.++ (str.to_re "D") (re.++ (str.to_re "E") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "C") (re.++ (str.to_re "T") (re.++ (str.to_re "E") (re.++ (str.to_re "D") (re.++ (str.to_re " ") (re.++ (str.to_re "D") (re.++ (str.to_re "E") (re.++ (str.to_re "A") (re.++ (str.to_re "D") (re.++ (str.to_re "L") (re.++ (str.to_re "O") (re.++ (str.to_re "C") (re.++ (str.to_re "K") (re.++ (re.union (re.union (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}")) (str.to_re "\u{0d}")) (str.to_re "\u{0a}")) (re.++ (re.+ (re.++ (re.* (str.to_re "-")) ((_ re.loop 4 4) (str.to_re "-")))) (re.++ (re.union (re.union (re.++ (str.to_re "\u{0d}") (str.to_re "\u{0a}")) (str.to_re "\u{0d}")) (str.to_re "\u{0a}")) (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.+ (re.++ (re.* (str.to_re "-")) ((_ re.loop 4 4) (str.to_re "-"))))))))))))))))))))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)