;test regex ^(.*([^w].{5}|.[^o].{4}|.{2}[^r].{3}|.{3}[^l].{2}|.{4}[^d].|.{5}[^.])|.{0,5})$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.union (re.union (re.union (re.union (re.union (re.++ (re.diff re.allchar (str.to_re "w")) ((_ re.loop 5 5) (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "o")) ((_ re.loop 4 4) (re.diff re.allchar (str.to_re "\n")))))) (re.++ ((_ re.loop 2 2) (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.diff re.allchar (str.to_re "r")) ((_ re.loop 3 3) (re.diff re.allchar (str.to_re "\n")))))) (re.++ ((_ re.loop 3 3) (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.diff re.allchar (str.to_re "l")) ((_ re.loop 2 2) (re.diff re.allchar (str.to_re "\n")))))) (re.++ ((_ re.loop 4 4) (re.diff re.allchar (str.to_re "\n"))) (re.++ (re.diff re.allchar (str.to_re "d")) (re.diff re.allchar (str.to_re "\n"))))) (re.++ ((_ re.loop 5 5) (re.diff re.allchar (str.to_re "\n"))) (re.diff re.allchar (str.to_re "."))))) ((_ re.loop 0 5) (re.diff re.allchar (str.to_re "\n"))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)