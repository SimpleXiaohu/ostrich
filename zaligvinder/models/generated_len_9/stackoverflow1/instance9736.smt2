;test regex gsubfn('(([A-Z]\\s+){2,}[A-Z])', spacrm1, x, backref = -1)
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "g") (re.++ (str.to_re "s") (re.++ (str.to_re "u") (re.++ (str.to_re "b") (re.++ (str.to_re "f") (re.++ (str.to_re "n") (re.++ (re.++ (re.++ (re.++ (str.to_re "\u{27}") (re.++ (re.++ (re.++ (re.* (re.++ (re.range "A" "Z") (re.++ (str.to_re "\\") (re.+ (str.to_re "s"))))) ((_ re.loop 2 2) (re.++ (re.range "A" "Z") (re.++ (str.to_re "\\") (re.+ (str.to_re "s")))))) (re.range "A" "Z")) (str.to_re "\u{27}"))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "r") (re.++ (str.to_re "m") (str.to_re "1")))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (str.to_re "x")))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "b") (re.++ (str.to_re "a") (re.++ (str.to_re "c") (re.++ (str.to_re "k") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "f") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "-") (str.to_re "1")))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)