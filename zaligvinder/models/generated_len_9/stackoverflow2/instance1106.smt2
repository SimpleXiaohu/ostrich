;test regex ^(?:[1-9][0-9]{0,17}|[1-8][0-9]{18}|9(?:[01][0-9]{17}|2(?:[01][0-9]{16}|2(?:[0-2][0-9]{15}|3(?:[0-2][0-9]{14}|3(?:[0-6][0-9]{13}|7(?:[01][0-9]{12}|20(?:[0-2][0-9]{10}|3(?:[0-5][0-9]{9}|6(?:[0-7][0-9]{8}|8(?:[0-4][0-9]{7}|5(?:[0-3][0-9]{6}|4(?:[0-6][0-9]{5}|7(?:[0-6][0-9]{4}|7(?:[0-4][0-9]{3}|5(?:[0-7][0-9]{2}|80[0-7]))))))))))))))))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.++ (re.range "1" "9") ((_ re.loop 0 17) (re.range "0" "9"))) (re.++ (re.range "1" "8") ((_ re.loop 18 18) (re.range "0" "9")))) (re.++ (str.to_re "9") (re.union (re.++ (str.to_re "01") ((_ re.loop 17 17) (re.range "0" "9"))) (re.++ (str.to_re "2") (re.union (re.++ (str.to_re "01") ((_ re.loop 16 16) (re.range "0" "9"))) (re.++ (str.to_re "2") (re.union (re.++ (re.range "0" "2") ((_ re.loop 15 15) (re.range "0" "9"))) (re.++ (str.to_re "3") (re.union (re.++ (re.range "0" "2") ((_ re.loop 14 14) (re.range "0" "9"))) (re.++ (str.to_re "3") (re.union (re.++ (re.range "0" "6") ((_ re.loop 13 13) (re.range "0" "9"))) (re.++ (str.to_re "7") (re.union (re.++ (str.to_re "01") ((_ re.loop 12 12) (re.range "0" "9"))) (re.++ (str.to_re "20") (re.union (re.++ (re.range "0" "2") ((_ re.loop 10 10) (re.range "0" "9"))) (re.++ (str.to_re "3") (re.union (re.++ (re.range "0" "5") ((_ re.loop 9 9) (re.range "0" "9"))) (re.++ (str.to_re "6") (re.union (re.++ (re.range "0" "7") ((_ re.loop 8 8) (re.range "0" "9"))) (re.++ (str.to_re "8") (re.union (re.++ (re.range "0" "4") ((_ re.loop 7 7) (re.range "0" "9"))) (re.++ (str.to_re "5") (re.union (re.++ (re.range "0" "3") ((_ re.loop 6 6) (re.range "0" "9"))) (re.++ (str.to_re "4") (re.union (re.++ (re.range "0" "6") ((_ re.loop 5 5) (re.range "0" "9"))) (re.++ (str.to_re "7") (re.union (re.++ (re.range "0" "6") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ (str.to_re "7") (re.union (re.++ (re.range "0" "4") ((_ re.loop 3 3) (re.range "0" "9"))) (re.++ (str.to_re "5") (re.union (re.++ (re.range "0" "7") ((_ re.loop 2 2) (re.range "0" "9"))) (re.++ (str.to_re "80") (re.range "0" "7")))))))))))))))))))))))))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)