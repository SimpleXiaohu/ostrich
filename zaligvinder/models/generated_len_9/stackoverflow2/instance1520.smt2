;test regex \d{0,16}|\d{14}\R.\d{1}|\d{13}\R.\d{1,2}|\d{12}\R.\d{1,3}|\d{11}\R.\d{1,4}|\d{10}\R.\d{1,5}|\d{9}\R.\d{1,6}|\d{8}\R.\d{1,7}|\d{7}\R.\d{1,8}|\d{6}\R.\d{1,9}|\d{5}\R.\d{1,10}|\d{4}\R.\d{1,11}|\d{3}\R.\d{1,12}|\d{2}\R.\d{1,13}|\d{1}\R.\d{1,14}|\R.\d{1,15}
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union ((_ re.loop 0 16) (re.range "0" "9")) (re.++ ((_ re.loop 14 14) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 1) (re.range "0" "9")))))) (re.++ ((_ re.loop 13 13) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 2) (re.range "0" "9")))))) (re.++ ((_ re.loop 12 12) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 3) (re.range "0" "9")))))) (re.++ ((_ re.loop 11 11) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 4) (re.range "0" "9")))))) (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 5) (re.range "0" "9")))))) (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 6) (re.range "0" "9")))))) (re.++ ((_ re.loop 8 8) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 7) (re.range "0" "9")))))) (re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 8) (re.range "0" "9")))))) (re.++ ((_ re.loop 6 6) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 9) (re.range "0" "9")))))) (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 10) (re.range "0" "9")))))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 11) (re.range "0" "9")))))) (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 12) (re.range "0" "9")))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 13) (re.range "0" "9")))))) (re.++ ((_ re.loop 1 1) (re.range "0" "9")) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 14) (re.range "0" "9")))))) (re.++ (str.to_re "R") (re.++ (re.diff re.allchar (str.to_re "\n")) ((_ re.loop 1 15) (re.range "0" "9")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)