;test regex "address_regex": "^([13][a-km-zA-HJ-NP-Z1-9]{25,34})|^((bitcoincash:)?(q|p)[a-z0-9]{41})|^((BITCOINCASH:)?(Q|P)[A-Z0-9]{41})$"
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.++ (re.++ (str.to_re "\u{22}") (re.++ (str.to_re "a") (re.++ (str.to_re "d") (re.++ (str.to_re "d") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "s") (re.++ (str.to_re "s") (re.++ (str.to_re "_") (re.++ (str.to_re "r") (re.++ (str.to_re "e") (re.++ (str.to_re "g") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "\u{22}") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (str.to_re "\u{22}")))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "13") ((_ re.loop 25 34) (re.union (re.range "a" "k") (re.union (re.range "m" "z") (re.union (re.range "A" "H") (re.union (re.range "J" "N") (re.union (re.range "P" "Z") (re.range "1" "9")))))))))) (re.++ (str.to_re "") (re.++ (re.opt (re.++ (str.to_re "b") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "c") (re.++ (str.to_re "o") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "c") (re.++ (str.to_re "a") (re.++ (str.to_re "s") (re.++ (str.to_re "h") (str.to_re ":"))))))))))))) (re.++ (re.union (str.to_re "q") (str.to_re "p")) ((_ re.loop 41 41) (re.union (re.range "a" "z") (re.range "0" "9"))))))) (re.++ (re.++ (str.to_re "") (re.++ (re.opt (re.++ (str.to_re "B") (re.++ (str.to_re "I") (re.++ (str.to_re "T") (re.++ (str.to_re "C") (re.++ (str.to_re "O") (re.++ (str.to_re "I") (re.++ (str.to_re "N") (re.++ (str.to_re "C") (re.++ (str.to_re "A") (re.++ (str.to_re "S") (re.++ (str.to_re "H") (str.to_re ":"))))))))))))) (re.++ (re.union (str.to_re "Q") (str.to_re "P")) ((_ re.loop 41 41) (re.union (re.range "A" "Z") (re.range "0" "9")))))) (re.++ (str.to_re "") (str.to_re "\u{22}"))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)