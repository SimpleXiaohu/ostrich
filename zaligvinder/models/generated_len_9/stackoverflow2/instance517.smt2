;test regex ^((AT)?U[0-9]{8}|(BE)?0[0-9]{9}|(BG)?[0-9]{9,10}|(CY)?[0-9]{8}L|(CZ)?[0-9]{8,10}|(DE)?[0-9]{9}|(DK)?[0-9]{8}|(EE)?[0-9]{9}|(EL|GR)?[0-9]{9}|(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]|(FI)?[0-9]{8}|(FR)?[0-9A-Z]{2}[0-9]{9}|(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})|(HU)?[0-9]{8}|(IE)?[0-9]S[0-9]{5}L|(IT)?[0-9]{11}|(LT)?([0-9]{9}|[0-9]{12})|(LU)?[0-9]{8}|(LV)?[0-9]{11}|(MT)?[0-9]{8}|(NL)?[0-9]{9}B[0-9]{2}|(PL)?[0-9]{10}|(PT)?[0-9]{9}|(RO)?[0-9]{2,10}|(SE)?[0-9]{12}|(SI)?[0-9]{8}|(SK)?[0-9]{10})$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.opt (re.++ (str.to_re "A") (str.to_re "T"))) (re.++ (str.to_re "U") ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "B") (str.to_re "E"))) (re.++ (str.to_re "0") ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (re.opt (re.++ (str.to_re "B") (str.to_re "G"))) ((_ re.loop 9 10) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "C") (str.to_re "Y"))) (re.++ ((_ re.loop 8 8) (re.range "0" "9")) (str.to_re "L")))) (re.++ (re.opt (re.++ (str.to_re "C") (str.to_re "Z"))) ((_ re.loop 8 10) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "D") (str.to_re "E"))) ((_ re.loop 9 9) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "D") (str.to_re "K"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "E") (str.to_re "E"))) ((_ re.loop 9 9) (re.range "0" "9")))) (re.++ (re.opt (re.union (re.++ (str.to_re "E") (str.to_re "L")) (re.++ (str.to_re "G") (str.to_re "R")))) ((_ re.loop 9 9) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "E") (str.to_re "S"))) (re.++ (re.union (re.range "0" "9") (re.range "A" "Z")) (re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.union (re.range "0" "9") (re.range "A" "Z")))))) (re.++ (re.opt (re.++ (str.to_re "F") (str.to_re "I"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "F") (str.to_re "R"))) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.range "A" "Z"))) ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (re.opt (re.++ (str.to_re "G") (str.to_re "B"))) (re.union (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (re.opt ((_ re.loop 3 3) (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.range "A" "Z")) ((_ re.loop 3 3) (re.range "0" "9")))))) (re.++ (re.opt (re.++ (str.to_re "H") (str.to_re "U"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "I") (str.to_re "E"))) (re.++ (re.range "0" "9") (re.++ (str.to_re "S") (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (str.to_re "L")))))) (re.++ (re.opt (re.++ (str.to_re "I") (str.to_re "T"))) ((_ re.loop 11 11) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "L") (str.to_re "T"))) (re.union ((_ re.loop 9 9) (re.range "0" "9")) ((_ re.loop 12 12) (re.range "0" "9"))))) (re.++ (re.opt (re.++ (str.to_re "L") (str.to_re "U"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "L") (str.to_re "V"))) ((_ re.loop 11 11) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "M") (str.to_re "T"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "N") (str.to_re "L"))) (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (re.++ (str.to_re "B") ((_ re.loop 2 2) (re.range "0" "9")))))) (re.++ (re.opt (re.++ (str.to_re "P") (str.to_re "L"))) ((_ re.loop 10 10) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "P") (str.to_re "T"))) ((_ re.loop 9 9) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "R") (str.to_re "O"))) ((_ re.loop 2 10) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "S") (str.to_re "E"))) ((_ re.loop 12 12) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "S") (str.to_re "I"))) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.opt (re.++ (str.to_re "S") (str.to_re "K"))) ((_ re.loop 10 10) (re.range "0" "9"))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)