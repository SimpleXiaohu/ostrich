;test regex (website :: text ~* 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,255}\.[a-z]{2,9}\y([-a-zA-Z0-9@:%_\+.~#?&//=]*)$' :: text)
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "w") (re.++ (str.to_re "e") (re.++ (str.to_re "b") (re.++ (str.to_re "s") (re.++ (str.to_re "i") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re " ") (re.++ (str.to_re ":") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (re.++ (str.to_re "t") (re.++ (str.to_re " ") (re.++ (re.* (str.to_re "~")) (re.++ (str.to_re " ") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (re.++ (re.opt (str.to_re "s")) (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ (re.opt (re.++ (str.to_re "w") (re.++ (str.to_re "w") (re.++ (str.to_re "w") (str.to_re "."))))) (re.++ ((_ re.loop 2 255) (re.union (str.to_re "-") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "@") (re.union (str.to_re ":") (re.union (str.to_re "%") (re.union (str.to_re ".") (re.union (str.to_re "_") (re.union (str.to_re "+") (re.union (str.to_re "~") (re.union (str.to_re "#") (str.to_re "=")))))))))))))) (re.++ (str.to_re ".") (re.++ ((_ re.loop 2 9) (re.range "a" "z")) (re.++ (str.to_re "y") (re.* (re.union (str.to_re "-") (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "@") (re.union (str.to_re ":") (re.union (str.to_re "%") (re.union (str.to_re "_") (re.union (str.to_re "+") (re.union (str.to_re ".") (re.union (str.to_re "~") (re.union (str.to_re "#") (re.union (str.to_re "?") (re.union (str.to_re "&") (re.union (str.to_re "/") (re.union (str.to_re "/") (str.to_re "=")))))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (str.to_re "") (re.++ (str.to_re "\u{27}") (re.++ (str.to_re " ") (re.++ (str.to_re ":") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "x") (str.to_re "t")))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 9 (str.len X)))
(check-sat)
(get-model)