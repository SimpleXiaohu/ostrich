;test regex ^([A-Za-z0-9\!\#\$\%\&\&#39;\*\+\-\/\=\?\^\_\`\{\}\|\~]+|&quot;([\u{01}-\u{08}\x0B\x0C\x0E-\x1F\u{21}\u{23}-\x5B\x5D-\x7F]|\\[\x0-\x7F])*&quot;)(\.([A-Za-z0-9\!\#\$\%\&\&#39;\*\+\-\/\=\?\^\_\`\{\}\|\~]+|&quot;([\u{01}-\u{08}\x0B\x0C\x0E-\x1F\u{21}\u{23}-\x5B\x5D-\x7F]|\\[\x0-\x7F])*&quot;))*@([A-Za-z0-9]([A-Za-z0-9\-]*[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9\-]*[A-Za-z0-9])?)*|(1[0-9]{0,2}|2([0-4][0-9]?|5[0-4]?|[6-9])?|[3-9][0-9]?)(\.(0|1[0-9]{0,2}|2([0-4][0-9]?|5[0-5]?|[6-9])?|[3-9][0-9]?)){2}\.(1[0-9]{0,2}|2([0-4][0-9]?|5[0-4]?|[6-9])?|[3-9][0-9]?))$
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.++ (re.union (re.+ (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re "!") (re.union (str.to_re "#") (re.union (str.to_re "$") (re.union (str.to_re "%") (re.union (str.to_re "&") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (re.union (str.to_re ";") (re.union (str.to_re "*") (re.union (str.to_re "+") (re.union (str.to_re "-") (re.union (str.to_re "/") (re.union (str.to_re "=") (re.union (str.to_re "?") (re.union (str.to_re "^") (re.union (str.to_re "_") (re.union (str.to_re "`") (re.union (str.to_re "{") (re.union (str.to_re "}") (re.union (str.to_re "|") (str.to_re "~")))))))))))))))))))))))))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (re.++ (str.to_re ";") (re.++ (re.* (re.union (re.union (re.range "\u{01}" "\u{08}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0c}") (re.union (re.range "\u{0e}" "\u{1f}") (re.union (str.to_re "\u{21}") (re.union (re.range "\u{23}" "\u{5b}") (re.range "\u{5d}" "\u{7f}"))))))) (re.++ (str.to_re "\\") (re.range "\u{0}" "\u{7f}")))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (str.to_re ";")))))))))))))) (re.++ (re.* (re.++ (str.to_re ".") (re.union (re.+ (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re "!") (re.union (str.to_re "#") (re.union (str.to_re "$") (re.union (str.to_re "%") (re.union (str.to_re "&") (re.union (str.to_re "&") (re.union (str.to_re "#") (re.union (str.to_re "39") (re.union (str.to_re ";") (re.union (str.to_re "*") (re.union (str.to_re "+") (re.union (str.to_re "-") (re.union (str.to_re "/") (re.union (str.to_re "=") (re.union (str.to_re "?") (re.union (str.to_re "^") (re.union (str.to_re "_") (re.union (str.to_re "`") (re.union (str.to_re "{") (re.union (str.to_re "}") (re.union (str.to_re "|") (str.to_re "~")))))))))))))))))))))))))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (re.++ (str.to_re ";") (re.++ (re.* (re.union (re.union (re.range "\u{01}" "\u{08}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0c}") (re.union (re.range "\u{0e}" "\u{1f}") (re.union (str.to_re "\u{21}") (re.union (re.range "\u{23}" "\u{5b}") (re.range "\u{5d}" "\u{7f}"))))))) (re.++ (str.to_re "\\") (re.range "\u{0}" "\u{7f}")))) (re.++ (str.to_re "&") (re.++ (str.to_re "q") (re.++ (str.to_re "u") (re.++ (str.to_re "o") (re.++ (str.to_re "t") (str.to_re ";")))))))))))))))) (re.++ (str.to_re "@") (re.union (re.++ (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9"))) (re.++ (re.opt (re.++ (re.* (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-"))))) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9"))))) (re.* (re.++ (str.to_re ".") (re.++ (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9"))) (re.opt (re.++ (re.* (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (str.to_re "-"))))) (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.range "0" "9")))))))))) (re.++ (re.union (re.union (re.++ (str.to_re "1") ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to_re "2") (re.opt (re.union (re.union (re.++ (re.range "0" "4") (re.opt (re.range "0" "9"))) (re.++ (str.to_re "5") (re.opt (re.range "0" "4")))) (re.range "6" "9"))))) (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))) (re.++ ((_ re.loop 2 2) (re.++ (str.to_re ".") (re.union (re.union (re.union (str.to_re "0") (re.++ (str.to_re "1") ((_ re.loop 0 2) (re.range "0" "9")))) (re.++ (str.to_re "2") (re.opt (re.union (re.union (re.++ (re.range "0" "4") (re.opt (re.range "0" "9"))) (re.++ (str.to_re "5") (re.opt (re.range "0" "5")))) (re.range "6" "9"))))) (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))))) (re.++ (str.to_re ".") (re.union (re.union (re.++ (str.to_re "1") ((_ re.loop 0 2) (re.range "0" "9"))) (re.++ (str.to_re "2") (re.opt (re.union (re.union (re.++ (re.range "0" "4") (re.opt (re.range "0" "9"))) (re.++ (str.to_re "5") (re.opt (re.range "0" "4")))) (re.range "6" "9"))))) (re.++ (re.range "3" "9") (re.opt (re.range "0" "9")))))))))))) (str.to_re ""))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)