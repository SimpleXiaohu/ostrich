;test regex (?:[hH][tT]{2}[pP][sS]{0,1}:\/\/)?[wW]{0,3}\.{0,1}[yY][oO][uU][tT][uU](?:\.[bB][eE]|[bB][eE]\.[cC][oO][mM])?\/(?:(?:[wW][aA][tT][cC][hH])?(?:\/)?\?(?:.*)?[vV]=([a-zA-Z0-9--]+).*|([A-Za-z0-9--]+))
(declare-const X String)
(assert (str.in_re X (re.++ (re.opt (re.++ (re.union (str.to_re "h") (str.to_re "H")) (re.++ ((_ re.loop 2 2) (re.union (str.to_re "t") (str.to_re "T"))) (re.++ (re.union (str.to_re "p") (str.to_re "P")) (re.++ ((_ re.loop 0 1) (re.union (str.to_re "s") (str.to_re "S"))) (re.++ (str.to_re ":") (re.++ (str.to_re "/") (str.to_re "/")))))))) (re.++ ((_ re.loop 0 3) (re.union (str.to_re "w") (str.to_re "W"))) (re.++ ((_ re.loop 0 1) (str.to_re ".")) (re.++ (re.union (str.to_re "y") (str.to_re "Y")) (re.++ (re.union (str.to_re "o") (str.to_re "O")) (re.++ (re.union (str.to_re "u") (str.to_re "U")) (re.++ (re.union (str.to_re "t") (str.to_re "T")) (re.++ (re.union (str.to_re "u") (str.to_re "U")) (re.++ (re.opt (re.union (re.++ (str.to_re ".") (re.++ (re.union (str.to_re "b") (str.to_re "B")) (re.union (str.to_re "e") (str.to_re "E")))) (re.++ (re.union (str.to_re "b") (str.to_re "B")) (re.++ (re.union (str.to_re "e") (str.to_re "E")) (re.++ (str.to_re ".") (re.++ (re.union (str.to_re "c") (str.to_re "C")) (re.++ (re.union (str.to_re "o") (str.to_re "O")) (re.union (str.to_re "m") (str.to_re "M"))))))))) (re.++ (str.to_re "/") (re.union (re.++ (re.opt (re.++ (re.union (str.to_re "w") (str.to_re "W")) (re.++ (re.union (str.to_re "a") (str.to_re "A")) (re.++ (re.union (str.to_re "t") (str.to_re "T")) (re.++ (re.union (str.to_re "c") (str.to_re "C")) (re.union (str.to_re "h") (str.to_re "H"))))))) (re.++ (re.opt (str.to_re "/")) (re.++ (str.to_re "?") (re.++ (re.opt (re.* (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.union (str.to_re "v") (str.to_re "V")) (re.++ (str.to_re "=") (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (re.union (str.to_re "-") (str.to_re "-")))))) (re.* (re.diff re.allchar (str.to_re "\n")))))))))) (re.+ (re.union (re.range "A" "Z") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re "-") (str.to_re "-")))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)