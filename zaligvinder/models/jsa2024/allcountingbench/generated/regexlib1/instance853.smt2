;test regex ((http|ftp|https):\/\/w{3}[\d]*.|(http|ftp|https):\/\/|w{3}[\d]*.)([\w\d\._\-#\(\)\[\]\\,;:]+@[\w\d\._\-#\(\)\[\]\\,;:])?([a-z0-9]+.)*[a-z\-0-9]+.([a-z]{2,3})?[a-z]{2,6}(:[0-9]+)?(\/[\/a-z0-9\._\-,]+)*[a-z0-9\-_\.\s\%]+(\?[a-z0-9=%&amp;\.\-,#]+)?
(declare-const X String)
(assert (str.in_re X (re.++ (re.union (re.union (re.++ (re.union (re.union (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (str.to_re "p")))) (re.++ (str.to_re "f") (re.++ (str.to_re "t") (str.to_re "p")))) (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (str.to_re "s")))))) (re.++ (str.to_re ":") (re.++ (str.to_re "/") (re.++ (str.to_re "/") (re.++ ((_ re.loop 3 3) (str.to_re "w")) (re.++ (re.* (re.range "0" "9")) (re.diff re.allchar (str.to_re "\n")))))))) (re.++ (re.union (re.union (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (str.to_re "p")))) (re.++ (str.to_re "f") (re.++ (str.to_re "t") (str.to_re "p")))) (re.++ (str.to_re "h") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "p") (str.to_re "s")))))) (re.++ (str.to_re ":") (re.++ (str.to_re "/") (str.to_re "/"))))) (re.++ ((_ re.loop 3 3) (str.to_re "w")) (re.++ (re.* (re.range "0" "9")) (re.diff re.allchar (str.to_re "\n"))))) (re.++ (re.opt (re.++ (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))) (re.union (re.range "0" "9") (re.union (str.to_re ".") (re.union (str.to_re "_") (re.union (str.to_re "-") (re.union (str.to_re "#") (re.union (str.to_re "(") (re.union (str.to_re ")") (re.union (str.to_re "[") (re.union (str.to_re "]") (re.union (str.to_re "\\") (re.union (str.to_re ",") (re.union (str.to_re ";") (str.to_re ":"))))))))))))))) (re.++ (str.to_re "@") (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))) (re.union (re.range "0" "9") (re.union (str.to_re ".") (re.union (str.to_re "_") (re.union (str.to_re "-") (re.union (str.to_re "#") (re.union (str.to_re "(") (re.union (str.to_re ")") (re.union (str.to_re "[") (re.union (str.to_re "]") (re.union (str.to_re "\\") (re.union (str.to_re ",") (re.union (str.to_re ";") (str.to_re ":"))))))))))))))))) (re.++ (re.* (re.++ (re.+ (re.union (re.range "a" "z") (re.range "0" "9"))) (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (str.to_re "-") (re.range "0" "9")))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.opt ((_ re.loop 2 3) (re.range "a" "z"))) (re.++ ((_ re.loop 2 6) (re.range "a" "z")) (re.++ (re.opt (re.++ (str.to_re ":") (re.+ (re.range "0" "9")))) (re.++ (re.* (re.++ (str.to_re "/") (re.+ (re.union (str.to_re "/") (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re ".") (re.union (str.to_re "_") (re.union (str.to_re "-") (str.to_re ",")))))))))) (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re "-") (re.union (str.to_re "_") (re.union (str.to_re ".") (re.union (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (str.to_re "%")))))))) (re.opt (re.++ (str.to_re "?") (re.+ (re.union (re.range "a" "z") (re.union (re.range "0" "9") (re.union (str.to_re "=") (re.union (str.to_re "%") (re.union (str.to_re "&") (re.union (str.to_re "a") (re.union (str.to_re "m") (re.union (str.to_re "p") (re.union (str.to_re ";") (re.union (str.to_re ".") (re.union (str.to_re "-") (re.union (str.to_re ",") (str.to_re "#"))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)