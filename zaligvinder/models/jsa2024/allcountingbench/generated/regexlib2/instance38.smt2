;test regex ((DK|FI|HU|LU|MT|SI)(-)?\d{8})|((BE|EE|DE|EL|LT|PT)(-)?\d{9})|((PL|SK)(-)?\d{10})|((IT|LV)(-)?\d{11})|((LT|SE)(-)?\d{12})|(AT(-)?U\d{8})|(CY(-)?\d{8}[A-Z])|(CZ(-)?\d{8,10})|(FR(-)?[\dA-HJ-NP-Z]{2}\d{9})|(IE(-)?\d[A-Z\d]\d{5}[A-Z])|(NL(-)?\d{9}B\d{2})|(ES(-)?[A-Z\d]\d{7}[A-Z\d])
(declare-const X String)
(assert (str.in_re X (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "D") (str.to_re "K")) (re.++ (str.to_re "F") (str.to_re "I"))) (re.++ (str.to_re "H") (str.to_re "U"))) (re.++ (str.to_re "L") (str.to_re "U"))) (re.++ (str.to_re "M") (str.to_re "T"))) (re.++ (str.to_re "S") (str.to_re "I"))) (re.++ (re.opt (str.to_re "-")) ((_ re.loop 8 8) (re.range "0" "9")))) (re.++ (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "B") (str.to_re "E")) (re.++ (str.to_re "E") (str.to_re "E"))) (re.++ (str.to_re "D") (str.to_re "E"))) (re.++ (str.to_re "E") (str.to_re "L"))) (re.++ (str.to_re "L") (str.to_re "T"))) (re.++ (str.to_re "P") (str.to_re "T"))) (re.++ (re.opt (str.to_re "-")) ((_ re.loop 9 9) (re.range "0" "9"))))) (re.++ (re.union (re.++ (str.to_re "P") (str.to_re "L")) (re.++ (str.to_re "S") (str.to_re "K"))) (re.++ (re.opt (str.to_re "-")) ((_ re.loop 10 10) (re.range "0" "9"))))) (re.++ (re.union (re.++ (str.to_re "I") (str.to_re "T")) (re.++ (str.to_re "L") (str.to_re "V"))) (re.++ (re.opt (str.to_re "-")) ((_ re.loop 11 11) (re.range "0" "9"))))) (re.++ (re.union (re.++ (str.to_re "L") (str.to_re "T")) (re.++ (str.to_re "S") (str.to_re "E"))) (re.++ (re.opt (str.to_re "-")) ((_ re.loop 12 12) (re.range "0" "9"))))) (re.++ (str.to_re "A") (re.++ (str.to_re "T") (re.++ (re.opt (str.to_re "-")) (re.++ (str.to_re "U") ((_ re.loop 8 8) (re.range "0" "9"))))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Y") (re.++ (re.opt (str.to_re "-")) (re.++ ((_ re.loop 8 8) (re.range "0" "9")) (re.range "A" "Z")))))) (re.++ (str.to_re "C") (re.++ (str.to_re "Z") (re.++ (re.opt (str.to_re "-")) ((_ re.loop 8 10) (re.range "0" "9")))))) (re.++ (str.to_re "F") (re.++ (str.to_re "R") (re.++ (re.opt (str.to_re "-")) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "H") (re.union (re.range "J" "N") (re.range "P" "Z"))))) ((_ re.loop 9 9) (re.range "0" "9"))))))) (re.++ (str.to_re "I") (re.++ (str.to_re "E") (re.++ (re.opt (str.to_re "-")) (re.++ (re.range "0" "9") (re.++ (re.union (re.range "A" "Z") (re.range "0" "9")) (re.++ ((_ re.loop 5 5) (re.range "0" "9")) (re.range "A" "Z")))))))) (re.++ (str.to_re "N") (re.++ (str.to_re "L") (re.++ (re.opt (str.to_re "-")) (re.++ ((_ re.loop 9 9) (re.range "0" "9")) (re.++ (str.to_re "B") ((_ re.loop 2 2) (re.range "0" "9")))))))) (re.++ (str.to_re "E") (re.++ (str.to_re "S") (re.++ (re.opt (str.to_re "-")) (re.++ (re.union (re.range "A" "Z") (re.range "0" "9")) (re.++ ((_ re.loop 7 7) (re.range "0" "9")) (re.union (re.range "A" "Z") (re.range "0" "9"))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)