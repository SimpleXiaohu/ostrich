;test regex Name: ([a-zA-Z ]+)\nPhone: (\(\d{3}\) \d{3}-\d{4})\nEmail: (.+@.+)\n{2}OBJECTIVE (.*)\n{2}KEY SKILLS (.*)\n{2}EMPLOYMENT HISTORY ((?:(?:(?:\W+|\s+|.*))*))
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "N") (re.++ (str.to_re "a") (re.++ (str.to_re "m") (re.++ (str.to_re "e") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (re.+ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (str.to_re " ")))) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "P") (re.++ (str.to_re "h") (re.++ (str.to_re "o") (re.++ (str.to_re "n") (re.++ (str.to_re "e") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (re.++ (str.to_re "(") (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (str.to_re ")") (re.++ (str.to_re " ") (re.++ ((_ re.loop 3 3) (re.range "0" "9")) (re.++ (str.to_re "-") ((_ re.loop 4 4) (re.range "0" "9")))))))) (re.++ (str.to_re "\u{0a}") (re.++ (str.to_re "E") (re.++ (str.to_re "m") (re.++ (str.to_re "a") (re.++ (str.to_re "i") (re.++ (str.to_re "l") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (re.++ (re.+ (re.diff re.allchar (str.to_re "\n"))) (re.++ (str.to_re "@") (re.+ (re.diff re.allchar (str.to_re "\n"))))) (re.++ ((_ re.loop 2 2) (str.to_re "\u{0a}")) (re.++ (str.to_re "O") (re.++ (str.to_re "B") (re.++ (str.to_re "J") (re.++ (str.to_re "E") (re.++ (str.to_re "C") (re.++ (str.to_re "T") (re.++ (str.to_re "I") (re.++ (str.to_re "V") (re.++ (str.to_re "E") (re.++ (str.to_re " ") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 2 2) (str.to_re "\u{0a}")) (re.++ (str.to_re "K") (re.++ (str.to_re "E") (re.++ (str.to_re "Y") (re.++ (str.to_re " ") (re.++ (str.to_re "S") (re.++ (str.to_re "K") (re.++ (str.to_re "I") (re.++ (str.to_re "L") (re.++ (str.to_re "L") (re.++ (str.to_re "S") (re.++ (str.to_re " ") (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (re.++ ((_ re.loop 2 2) (str.to_re "\u{0a}")) (re.++ (str.to_re "E") (re.++ (str.to_re "M") (re.++ (str.to_re "P") (re.++ (str.to_re "L") (re.++ (str.to_re "O") (re.++ (str.to_re "Y") (re.++ (str.to_re "M") (re.++ (str.to_re "E") (re.++ (str.to_re "N") (re.++ (str.to_re "T") (re.++ (str.to_re " ") (re.++ (str.to_re "H") (re.++ (str.to_re "I") (re.++ (str.to_re "S") (re.++ (str.to_re "T") (re.++ (str.to_re "O") (re.++ (str.to_re "R") (re.++ (str.to_re "Y") (re.++ (str.to_re " ") (re.* (re.union (re.union (re.+ (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.diff re.allchar (str.to_re "_")))))) (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))) (re.* (re.diff re.allchar (str.to_re "\n")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)