;test regex \s+([jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec]{3}\s*[0-3]?[0-9]\s*\d{4})/ig
(declare-const X String)
(assert (str.in_re X (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.++ ((_ re.loop 3 3) (re.union (str.to_re "j") (re.union (str.to_re "a") (re.union (str.to_re "n") (re.union (str.to_re "|") (re.union (str.to_re "f") (re.union (str.to_re "e") (re.union (str.to_re "b") (re.union (str.to_re "|") (re.union (str.to_re "m") (re.union (str.to_re "a") (re.union (str.to_re "r") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "p") (re.union (str.to_re "r") (re.union (str.to_re "|") (re.union (str.to_re "m") (re.union (str.to_re "a") (re.union (str.to_re "y") (re.union (str.to_re "|") (re.union (str.to_re "j") (re.union (str.to_re "u") (re.union (str.to_re "n") (re.union (str.to_re "|") (re.union (str.to_re "j") (re.union (str.to_re "u") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "a") (re.union (str.to_re "u") (re.union (str.to_re "g") (re.union (str.to_re "|") (re.union (str.to_re "s") (re.union (str.to_re "e") (re.union (str.to_re "p") (re.union (str.to_re "|") (re.union (str.to_re "o") (re.union (str.to_re "c") (re.union (str.to_re "t") (re.union (str.to_re "|") (re.union (str.to_re "n") (re.union (str.to_re "o") (re.union (str.to_re "v") (re.union (str.to_re "|") (re.union (str.to_re "d") (re.union (str.to_re "e") (str.to_re "c")))))))))))))))))))))))))))))))))))))))))))))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.opt (re.range "0" "3")) (re.++ (re.range "0" "9") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) ((_ re.loop 4 4) (re.range "0" "9"))))))) (re.++ (str.to_re "/") (re.++ (str.to_re "i") (str.to_re "g")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)