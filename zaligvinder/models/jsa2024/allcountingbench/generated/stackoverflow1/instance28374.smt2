;test regex [^I,O,S,Z,i,o,s,z][0-9A-Za-z]{2}[AA|TN|TP]{2}
(declare-const X String)
(assert (str.in_re X (re.++ (re.inter (re.diff re.allchar (str.to_re "I")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "O")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "S")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "Z")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "i")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "o")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.inter (re.diff re.allchar (str.to_re "s")) (re.inter (re.diff re.allchar (str.to_re ",")) (re.diff re.allchar (str.to_re "z")))))))))))))))) (re.++ ((_ re.loop 2 2) (re.union (re.range "0" "9") (re.union (re.range "A" "Z") (re.range "a" "z")))) ((_ re.loop 2 2) (re.union (str.to_re "A") (re.union (str.to_re "A") (re.union (str.to_re "|") (re.union (str.to_re "T") (re.union (str.to_re "N") (re.union (str.to_re "|") (re.union (str.to_re "T") (str.to_re "P")))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)