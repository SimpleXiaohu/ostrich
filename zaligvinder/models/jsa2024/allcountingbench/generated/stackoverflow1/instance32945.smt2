;test regex (0(?:[0-9]|[A-F]){3})(\"\*?(?:SIA-DCS|ADM-CID|NULL)\")(\d{4})(R?(?:[0-9]|[A-F])*)(L[^#]*)(#[^\[]*)(\[[^\[]*)(\[(\w.*|(M|V|P)\d{10}AB)\])
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "0") ((_ re.loop 3 3) (re.union (re.range "0" "9") (re.range "A" "F")))) (re.++ (re.++ (str.to_re "\u{22}") (re.++ (re.opt (str.to_re "*")) (re.++ (re.union (re.union (re.++ (str.to_re "S") (re.++ (str.to_re "I") (re.++ (str.to_re "A") (re.++ (str.to_re "-") (re.++ (str.to_re "D") (re.++ (str.to_re "C") (str.to_re "S"))))))) (re.++ (str.to_re "A") (re.++ (str.to_re "D") (re.++ (str.to_re "M") (re.++ (str.to_re "-") (re.++ (str.to_re "C") (re.++ (str.to_re "I") (str.to_re "D")))))))) (re.++ (str.to_re "N") (re.++ (str.to_re "U") (re.++ (str.to_re "L") (str.to_re "L"))))) (str.to_re "\u{22}")))) (re.++ ((_ re.loop 4 4) (re.range "0" "9")) (re.++ (re.++ (re.opt (str.to_re "R")) (re.* (re.union (re.range "0" "9") (re.range "A" "F")))) (re.++ (re.++ (str.to_re "L") (re.* (re.diff re.allchar (str.to_re "#")))) (re.++ (re.++ (str.to_re "#") (re.* (re.diff re.allchar (str.to_re "[")))) (re.++ (re.++ (str.to_re "[") (re.* (re.diff re.allchar (str.to_re "[")))) (re.++ (str.to_re "[") (re.++ (re.union (re.++ (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))) (re.* (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.union (re.union (str.to_re "M") (str.to_re "V")) (str.to_re "P")) (re.++ ((_ re.loop 10 10) (re.range "0" "9")) (re.++ (str.to_re "A") (str.to_re "B"))))) (str.to_re "]"))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)