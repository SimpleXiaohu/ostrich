;test regex ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'){0,31};
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "I") (re.++ (str.to_re "D") (re.++ (str.to_re " ") (re.++ (str.to_re ":") (re.++ (str.to_re " ") (re.++ (re.union (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "a") (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "z") (str.to_re "\u{27}")))))))) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "A") (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "Z") (str.to_re "\u{27}"))))))))) (re.++ (str.to_re " ") (re.++ ((_ re.loop 0 31) (re.union (re.union (re.union (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "a") (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "z") (str.to_re "\u{27}")))))))) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "A") (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "Z") (str.to_re "\u{27}"))))))))) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "0") (re.++ (str.to_re "\u{27}") (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "9") (str.to_re "\u{27}"))))))))) (re.++ (str.to_re "\u{27}") (re.++ (str.to_re "_") (str.to_re "\u{27}"))))) (str.to_re ";")))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)