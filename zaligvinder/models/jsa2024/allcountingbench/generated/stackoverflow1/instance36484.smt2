;test regex var string = /(?:^'(?:[^'\\]|\\'|\\\\|\\\/|\\b|\\f|\\n|\\r|\\t|\\u[0-9A-F]{4})*'$)|(?:^"(?:[^"\\]|\\"|\\\\|\\\/|\\b|\\f|\\n|\\r|\\t|\\u[0-9A-F]{4})*"$)/gi;
(declare-const X String)
(assert (str.in_re X (re.union (re.++ (str.to_re "v") (re.++ (str.to_re "a") (re.++ (str.to_re "r") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "g") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "/") (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "\u{27}") (re.++ (re.* (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.inter (re.diff re.allchar (str.to_re "\u{27}")) (re.diff re.allchar (str.to_re "\\"))) (re.++ (str.to_re "\\") (str.to_re "\u{27}"))) (re.++ (str.to_re "\\") (str.to_re "\\"))) (re.++ (str.to_re "\\") (str.to_re "/"))) (re.++ (str.to_re "\\") (str.to_re "b"))) (re.++ (str.to_re "\\") (str.to_re "f"))) (re.++ (str.to_re "\\") (str.to_re "n"))) (re.++ (str.to_re "\\") (str.to_re "r"))) (re.++ (str.to_re "\\") (str.to_re "t"))) (re.++ (str.to_re "\\") (re.++ (str.to_re "u") ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "A" "F"))))))) (str.to_re "\u{27}")))) (str.to_re "")))))))))))))))) (re.++ (re.++ (re.++ (str.to_re "") (re.++ (str.to_re "\u{22}") (re.++ (re.* (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.inter (re.diff re.allchar (str.to_re "\u{22}")) (re.diff re.allchar (str.to_re "\\"))) (re.++ (str.to_re "\\") (str.to_re "\u{22}"))) (re.++ (str.to_re "\\") (str.to_re "\\"))) (re.++ (str.to_re "\\") (str.to_re "/"))) (re.++ (str.to_re "\\") (str.to_re "b"))) (re.++ (str.to_re "\\") (str.to_re "f"))) (re.++ (str.to_re "\\") (str.to_re "n"))) (re.++ (str.to_re "\\") (str.to_re "r"))) (re.++ (str.to_re "\\") (str.to_re "t"))) (re.++ (str.to_re "\\") (re.++ (str.to_re "u") ((_ re.loop 4 4) (re.union (re.range "0" "9") (re.range "A" "F"))))))) (str.to_re "\u{22}")))) (str.to_re "")) (re.++ (str.to_re "/") (re.++ (str.to_re "g") (re.++ (str.to_re "i") (str.to_re ";"))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)