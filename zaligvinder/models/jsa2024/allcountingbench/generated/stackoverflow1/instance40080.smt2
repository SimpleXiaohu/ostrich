;test regex (^.*)\Ws[eason ]*(\d{1,2}|[ivxlcdm]{1,5})\Wp[art ]*(\d{1,2}|[ivxlcdm]{1,5})\W(.*$)
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (str.to_re "") (re.* (re.diff re.allchar (str.to_re "\n")))) (re.++ (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.diff re.allchar (str.to_re "_"))))) (re.++ (str.to_re "s") (re.++ (re.* (re.union (str.to_re "e") (re.union (str.to_re "a") (re.union (str.to_re "s") (re.union (str.to_re "o") (re.union (str.to_re "n") (str.to_re " "))))))) (re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9")) ((_ re.loop 1 5) (re.union (str.to_re "i") (re.union (str.to_re "v") (re.union (str.to_re "x") (re.union (str.to_re "l") (re.union (str.to_re "c") (re.union (str.to_re "d") (str.to_re "m"))))))))) (re.++ (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.diff re.allchar (str.to_re "_"))))) (re.++ (str.to_re "p") (re.++ (re.* (re.union (str.to_re "a") (re.union (str.to_re "r") (re.union (str.to_re "t") (str.to_re " "))))) (re.++ (re.union ((_ re.loop 1 2) (re.range "0" "9")) ((_ re.loop 1 5) (re.union (str.to_re "i") (re.union (str.to_re "v") (re.union (str.to_re "x") (re.union (str.to_re "l") (re.union (str.to_re "c") (re.union (str.to_re "d") (str.to_re "m"))))))))) (re.++ (re.inter (re.diff re.allchar (re.range "a" "z")) (re.inter (re.diff re.allchar (re.range "A" "Z")) (re.inter (re.diff re.allchar (re.range "0" "9")) (re.diff re.allchar (str.to_re "_"))))) (re.++ (re.* (re.diff re.allchar (str.to_re "\n"))) (str.to_re ""))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)