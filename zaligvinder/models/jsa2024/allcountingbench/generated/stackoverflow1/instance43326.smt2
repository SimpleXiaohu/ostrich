;test regex String pattern = "((1\\d{3})|(20\\d{2}))-((0\\d)|(1[0-2]))-(([1-2]\\d)|(3[0-1])) (([0-1]\\d)|(2[0-3])):([0-5]\\d):([0-5]\\d)";
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "S") (re.++ (str.to_re "t") (re.++ (str.to_re "r") (re.++ (str.to_re "i") (re.++ (str.to_re "n") (re.++ (str.to_re "g") (re.++ (str.to_re " ") (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "t") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (str.to_re "r") (re.++ (str.to_re "n") (re.++ (str.to_re " ") (re.++ (str.to_re "=") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.union (re.++ (str.to_re "1") (re.++ (str.to_re "\\") ((_ re.loop 3 3) (str.to_re "d")))) (re.++ (str.to_re "20") (re.++ (str.to_re "\\") ((_ re.loop 2 2) (str.to_re "d"))))) (re.++ (str.to_re "-") (re.++ (re.union (re.++ (str.to_re "0") (re.++ (str.to_re "\\") (str.to_re "d"))) (re.++ (str.to_re "1") (re.range "0" "2"))) (re.++ (str.to_re "-") (re.++ (re.union (re.++ (re.range "1" "2") (re.++ (str.to_re "\\") (str.to_re "d"))) (re.++ (str.to_re "3") (re.range "0" "1"))) (re.++ (str.to_re " ") (re.++ (re.union (re.++ (re.range "0" "1") (re.++ (str.to_re "\\") (str.to_re "d"))) (re.++ (str.to_re "2") (re.range "0" "3"))) (re.++ (str.to_re ":") (re.++ (re.++ (re.range "0" "5") (re.++ (str.to_re "\\") (str.to_re "d"))) (re.++ (str.to_re ":") (re.++ (re.++ (re.range "0" "5") (re.++ (str.to_re "\\") (str.to_re "d"))) (re.++ (str.to_re "\u{22}") (str.to_re ";")))))))))))))))))))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)