;test regex [h|H][e|E l|L l|L .\/\\\;\:\'\]\[\-\_\=\+\)\(]{3,}[o|O]
(declare-const X String)
(assert (str.in_re X (re.++ (re.union (str.to_re "h") (re.union (str.to_re "|") (str.to_re "H"))) (re.++ (re.++ (re.* (re.union (str.to_re "e") (re.union (str.to_re "|") (re.union (str.to_re "E") (re.union (str.to_re " ") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "L") (re.union (str.to_re " ") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "L") (re.union (str.to_re " ") (re.union (str.to_re ".") (re.union (str.to_re "/") (re.union (str.to_re "\\") (re.union (str.to_re ";") (re.union (str.to_re ":") (re.union (str.to_re "\u{27}") (re.union (str.to_re "]") (re.union (str.to_re "[") (re.union (str.to_re "-") (re.union (str.to_re "_") (re.union (str.to_re "=") (re.union (str.to_re "+") (re.union (str.to_re ")") (str.to_re "("))))))))))))))))))))))))))) ((_ re.loop 3 3) (re.union (str.to_re "e") (re.union (str.to_re "|") (re.union (str.to_re "E") (re.union (str.to_re " ") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "L") (re.union (str.to_re " ") (re.union (str.to_re "l") (re.union (str.to_re "|") (re.union (str.to_re "L") (re.union (str.to_re " ") (re.union (str.to_re ".") (re.union (str.to_re "/") (re.union (str.to_re "\\") (re.union (str.to_re ";") (re.union (str.to_re ":") (re.union (str.to_re "\u{27}") (re.union (str.to_re "]") (re.union (str.to_re "[") (re.union (str.to_re "-") (re.union (str.to_re "_") (re.union (str.to_re "=") (re.union (str.to_re "+") (re.union (str.to_re ")") (str.to_re "(")))))))))))))))))))))))))))) (re.union (str.to_re "o") (re.union (str.to_re "|") (str.to_re "O")))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)