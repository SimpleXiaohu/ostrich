;test regex (\d+)\s+(-\s.\s.\s-)\s+([\w\s]+)\s+((?:LB|BL|DU|HO|DP|DE|CO|EC)(?:\/(?:LB|BL|DU|HO|DP|DE|CO|EC))?)\s+(\d{2}\/\d{2}\/\d{4})
(declare-const X String)
(assert (str.in_re X (re.++ (re.+ (re.range "0" "9")) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.++ (str.to_re "-") (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (re.++ (re.diff re.allchar (str.to_re "\n")) (re.++ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))) (str.to_re "-"))))))) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.+ (re.union (re.union (re.range "a" "z") (re.union (re.range "A" "Z") (re.union (re.range "0" "9") (str.to_re "_")))) (re.union (str.to_re "\u{20}") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.++ (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "L") (str.to_re "B")) (re.++ (str.to_re "B") (str.to_re "L"))) (re.++ (str.to_re "D") (str.to_re "U"))) (re.++ (str.to_re "H") (str.to_re "O"))) (re.++ (str.to_re "D") (str.to_re "P"))) (re.++ (str.to_re "D") (str.to_re "E"))) (re.++ (str.to_re "C") (str.to_re "O"))) (re.++ (str.to_re "E") (str.to_re "C"))) (re.opt (re.++ (str.to_re "/") (re.union (re.union (re.union (re.union (re.union (re.union (re.union (re.++ (str.to_re "L") (str.to_re "B")) (re.++ (str.to_re "B") (str.to_re "L"))) (re.++ (str.to_re "D") (str.to_re "U"))) (re.++ (str.to_re "H") (str.to_re "O"))) (re.++ (str.to_re "D") (str.to_re "P"))) (re.++ (str.to_re "D") (str.to_re "E"))) (re.++ (str.to_re "C") (str.to_re "O"))) (re.++ (str.to_re "E") (str.to_re "C")))))) (re.++ (re.+ (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "/") (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (re.++ (str.to_re "/") ((_ re.loop 4 4) (re.range "0" "9"))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)