;test regex (([Dd][Ee][Cc][Ii][Mm][Aa][Ll])|([Nn][Uu][Mm][Ee][Rr][Ii][Cc]))\s*\(\s*\d+\s*,\s*\d{1,2}\s*\)
(declare-const X String)
(assert (str.in_re X (re.++ (re.++ (re.union (re.++ (re.union (str.to_re "D") (str.to_re "d")) (re.++ (re.union (str.to_re "E") (str.to_re "e")) (re.++ (re.union (str.to_re "C") (str.to_re "c")) (re.++ (re.union (str.to_re "I") (str.to_re "i")) (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.++ (re.union (str.to_re "A") (str.to_re "a")) (re.union (str.to_re "L") (str.to_re "l")))))))) (re.++ (re.union (str.to_re "N") (str.to_re "n")) (re.++ (re.union (str.to_re "U") (str.to_re "u")) (re.++ (re.union (str.to_re "M") (str.to_re "m")) (re.++ (re.union (str.to_re "E") (str.to_re "e")) (re.++ (re.union (str.to_re "R") (str.to_re "r")) (re.++ (re.union (str.to_re "I") (str.to_re "i")) (re.union (str.to_re "C") (str.to_re "c"))))))))) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (str.to_re "(") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ (re.+ (re.range "0" "9")) (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}")))))))))))) (re.++ (str.to_re ",") (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (re.++ ((_ re.loop 1 2) (re.range "0" "9")) (re.++ (re.* (re.union (str.to_re " ") (re.union (str.to_re "\u{0b}") (re.union (str.to_re "\u{0a}") (re.union (str.to_re "\u{0d}") (re.union (str.to_re "\u{09}") (str.to_re "\u{0c}"))))))) (str.to_re ")"))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)