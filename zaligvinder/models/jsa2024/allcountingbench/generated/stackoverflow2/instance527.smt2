;test regex paste("(CTAAA)[AC]{5,100}(TTTGGG)", rule_1, "(CTT)[AG]{10,5000}", rule_2, sep="")
(declare-const X String)
(assert (str.in_re X (re.++ (str.to_re "p") (re.++ (str.to_re "a") (re.++ (str.to_re "s") (re.++ (str.to_re "t") (re.++ (str.to_re "e") (re.++ (re.++ (re.++ (re.++ (re.++ (str.to_re "\u{22}") (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "T") (re.++ (str.to_re "A") (re.++ (str.to_re "A") (str.to_re "A"))))) (re.++ ((_ re.loop 5 100) (re.union (str.to_re "A") (str.to_re "C"))) (re.++ (re.++ (str.to_re "T") (re.++ (str.to_re "T") (re.++ (str.to_re "T") (re.++ (str.to_re "G") (re.++ (str.to_re "G") (str.to_re "G")))))) (str.to_re "\u{22}"))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "r") (re.++ (str.to_re "u") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "_") (str.to_re "1"))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "\u{22}") (re.++ (re.++ (str.to_re "C") (re.++ (str.to_re "T") (str.to_re "T"))) (re.++ ((_ re.loop 10 5000) (re.union (str.to_re "A") (str.to_re "G"))) (str.to_re "\u{22}"))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "r") (re.++ (str.to_re "u") (re.++ (str.to_re "l") (re.++ (str.to_re "e") (re.++ (str.to_re "_") (str.to_re "2"))))))))) (re.++ (str.to_re ",") (re.++ (str.to_re " ") (re.++ (str.to_re "s") (re.++ (str.to_re "e") (re.++ (str.to_re "p") (re.++ (str.to_re "=") (re.++ (str.to_re "\u{22}") (str.to_re "\u{22}"))))))))))))))))
; sanitize danger characters:  < > ' " &
(assert (not (str.in_re X (re.++ re.all (re.union (str.to_re "\u{3c}") (str.to_re "\u{3e}") (str.to_re "\u{27}") (str.to_re "\u{22}") (str.to_re "\u{26}")) re.all))))
(assert (< 10 (str.len X)))
(check-sat)
(get-model)