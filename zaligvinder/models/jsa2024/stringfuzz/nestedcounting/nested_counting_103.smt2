(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 0 13) (str.to_re "{I")) (re.++ ((_ re.loop 2 20) (str.to_re "/{$")) (re.++ ((_ re.loop 4 13) (str.to_re "%K")) ((_ re.loop 5 8) (str.to_re "R")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 5 5) (str.to_re "m/7")) (re.++ ((_ re.loop 3 19) (str.to_re "#A")) (re.++ ((_ re.loop 5 20) (str.to_re "c-")) ((_ re.loop 0 10) (str.to_re ")")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 0 12) (str.to_re "f'")) (re.++ ((_ re.loop 3 6) (str.to_re "a*[")) (re.++ ((_ re.loop 4 9) (str.to_re "g~*")) ((_ re.loop 1 16) (str.to_re "<*")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 0 10) (str.to_re "B;")) (re.++ ((_ re.loop 0 15) (str.to_re "z")) (re.++ ((_ re.loop 2 16) (str.to_re "0")) ((_ re.loop 1 16) (str.to_re "$?k")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
