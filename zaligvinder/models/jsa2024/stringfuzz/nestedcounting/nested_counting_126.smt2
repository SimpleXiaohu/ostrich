(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 0 20) (str.to_re "*")) (re.++ ((_ re.loop 1 18) (str.to_re ")Vq")) (re.++ ((_ re.loop 4 6) (str.to_re "i[")) ((_ re.loop 0 13) (str.to_re "vj-")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 3 20) (str.to_re "p?F")) (re.++ ((_ re.loop 3 5) (str.to_re "iCL")) (re.++ ((_ re.loop 4 14) (str.to_re "a!M")) ((_ re.loop 3 15) (str.to_re "8")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 2 15) (str.to_re "&\u0022")) (re.++ ((_ re.loop 5 6) (str.to_re "7")) (re.++ ((_ re.loop 4 16) (str.to_re "b")) ((_ re.loop 1 11) (str.to_re "CbV")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 3 11) (str.to_re "j")) (re.++ ((_ re.loop 0 17) (str.to_re "6bq")) (re.++ ((_ re.loop 1 19) (str.to_re "5}(")) ((_ re.loop 1 20) (str.to_re "z")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
