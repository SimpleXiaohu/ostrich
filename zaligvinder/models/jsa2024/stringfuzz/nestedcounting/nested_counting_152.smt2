(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 0 17) (str.to_re "!j'")) (re.++ ((_ re.loop 3 16) (str.to_re "qg")) (re.++ ((_ re.loop 5 12) (str.to_re "|Hq")) ((_ re.loop 4 11) (str.to_re "O")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 1 17) (str.to_re "]")) (re.++ ((_ re.loop 4 17) (str.to_re "\u0022")) (re.++ ((_ re.loop 5 13) (str.to_re "'32")) ((_ re.loop 0 9) (str.to_re "UGP")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 2 11) (str.to_re "7")) (re.++ ((_ re.loop 3 15) (str.to_re ">Q5")) (re.++ ((_ re.loop 2 11) (str.to_re "Z")) ((_ re.loop 5 15) (str.to_re "b")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 0 20) (str.to_re "pLI")) (re.++ ((_ re.loop 5 19) (str.to_re "z")) (re.++ ((_ re.loop 1 19) (str.to_re "x\u0022u")) ((_ re.loop 1 18) (str.to_re "8(")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
