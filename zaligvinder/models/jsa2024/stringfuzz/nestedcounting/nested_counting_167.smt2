(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 5 11) (str.to_re ">,")) (re.++ ((_ re.loop 2 5) (str.to_re "+o+")) (re.++ ((_ re.loop 3 6) (str.to_re "$@>")) ((_ re.loop 1 20) (str.to_re "8o")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 2 12) (str.to_re "+")) (re.++ ((_ re.loop 1 16) (str.to_re "Ey")) (re.++ ((_ re.loop 2 17) (str.to_re "Dh")) ((_ re.loop 0 14) (str.to_re "g")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 5 20) (str.to_re "01")) (re.++ ((_ re.loop 2 15) (str.to_re "b")) (re.++ ((_ re.loop 4 12) (str.to_re "r")) ((_ re.loop 5 14) (str.to_re "y")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 1 9) (str.to_re "\\o")) (re.++ ((_ re.loop 5 6) (str.to_re "/r")) (re.++ ((_ re.loop 5 10) (str.to_re "%e")) ((_ re.loop 3 10) (str.to_re ";")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
