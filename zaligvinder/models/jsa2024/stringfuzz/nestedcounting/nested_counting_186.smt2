(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 1 14) (str.to_re "3.")) (re.++ ((_ re.loop 3 19) (str.to_re "*")) (re.++ ((_ re.loop 1 5) (str.to_re "{?,")) ((_ re.loop 5 15) (str.to_re "\u0022[")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 4 15) (str.to_re "p")) (re.++ ((_ re.loop 2 11) (str.to_re "aQ/")) (re.++ ((_ re.loop 1 15) (str.to_re "{")) ((_ re.loop 5 10) (str.to_re "#lV")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 3 12) (str.to_re "TBt")) (re.++ ((_ re.loop 3 13) (str.to_re "zpO")) (re.++ ((_ re.loop 2 11) (str.to_re "B")) ((_ re.loop 1 6) (str.to_re "+")))))) ((_ re.loop 1 3) (re.++ ((_ re.loop 0 8) (str.to_re "cY[")) (re.++ ((_ re.loop 2 12) (str.to_re "t)$")) (re.++ ((_ re.loop 4 14) (str.to_re "d\u0022c")) ((_ re.loop 2 15) (str.to_re "<?V")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
