(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 3 16) (str.to_re "B")) (re.++ ((_ re.loop 4 14) (str.to_re "Nd")) (re.++ ((_ re.loop 3 14) (str.to_re "3")) ((_ re.loop 0 13) (str.to_re "`>l")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 2 7) (str.to_re "X")) (re.++ ((_ re.loop 3 16) (str.to_re "z*O")) (re.++ ((_ re.loop 5 11) (str.to_re "'")) ((_ re.loop 4 16) (str.to_re "P")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 5 18) (str.to_re "yGK")) (re.++ ((_ re.loop 4 9) (str.to_re "c")) (re.++ ((_ re.loop 2 17) (str.to_re "*Z")) ((_ re.loop 4 17) (str.to_re "nj?")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 5 19) (str.to_re "~")) (re.++ ((_ re.loop 0 5) (str.to_re "y")) (re.++ ((_ re.loop 5 12) (str.to_re "V")) ((_ re.loop 4 18) (str.to_re ",")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
