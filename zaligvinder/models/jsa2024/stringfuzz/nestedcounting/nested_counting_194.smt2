(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 3 9) (str.to_re "[5")) (re.++ ((_ re.loop 3 9) (str.to_re "/;B")) (re.++ ((_ re.loop 3 18) (str.to_re "o")) ((_ re.loop 0 14) (str.to_re "Y")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 3 18) (str.to_re "Ov@")) (re.++ ((_ re.loop 4 13) (str.to_re "N[J")) (re.++ ((_ re.loop 2 9) (str.to_re "5V\\")) ((_ re.loop 3 18) (str.to_re "g")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 4 7) (str.to_re ":")) (re.++ ((_ re.loop 1 8) (str.to_re "<PU")) (re.++ ((_ re.loop 3 13) (str.to_re "02")) ((_ re.loop 3 19) (str.to_re "f")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 0 18) (str.to_re "J")) (re.++ ((_ re.loop 4 11) (str.to_re "4")) (re.++ ((_ re.loop 0 8) (str.to_re ":r)")) ((_ re.loop 1 12) (str.to_re "<")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
