(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 4 18) (str.to_re "3*e")) (re.++ ((_ re.loop 1 12) (str.to_re "<")) (re.++ ((_ re.loop 2 5) (str.to_re "o")) ((_ re.loop 5 16) (str.to_re "\u0022G")))))) (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 2 16) (str.to_re "a}")) (re.++ ((_ re.loop 1 14) (str.to_re "N2")) (re.++ ((_ re.loop 1 20) (str.to_re "qwZ")) ((_ re.loop 0 8) (str.to_re "[T")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 2 10) (str.to_re "Q")) (re.++ ((_ re.loop 0 13) (str.to_re "K")) (re.++ ((_ re.loop 5 17) (str.to_re "e}h")) ((_ re.loop 0 11) (str.to_re "{B")))))) ((_ re.loop 0 4) (re.++ ((_ re.loop 4 20) (str.to_re "E?K")) (re.++ ((_ re.loop 5 5) (str.to_re "\u0022")) (re.++ ((_ re.loop 3 18) (str.to_re "t0")) ((_ re.loop 1 20) (str.to_re "pZ-")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
