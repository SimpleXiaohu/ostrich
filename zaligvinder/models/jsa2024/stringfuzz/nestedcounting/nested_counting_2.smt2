(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 1 15) (str.to_re "G\\i")) (re.++ ((_ re.loop 1 11) (str.to_re ">")) (re.++ ((_ re.loop 3 20) (str.to_re "e)")) ((_ re.loop 4 7) (str.to_re "iR")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 1 12) (str.to_re "O")) (re.++ ((_ re.loop 4 17) (str.to_re "k")) (re.++ ((_ re.loop 3 11) (str.to_re ":_")) ((_ re.loop 0 5) (str.to_re "q2")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 0 7) (str.to_re "~A")) (re.++ ((_ re.loop 1 6) (str.to_re "<")) (re.++ ((_ re.loop 1 5) (str.to_re "b&4")) ((_ re.loop 2 11) (str.to_re ";")))))) ((_ re.loop 0 1) (re.++ ((_ re.loop 5 17) (str.to_re "f%")) (re.++ ((_ re.loop 5 6) (str.to_re "5+")) (re.++ ((_ re.loop 2 19) (str.to_re "@")) ((_ re.loop 5 5) (str.to_re "]^)")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
