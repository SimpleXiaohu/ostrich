(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 3 15) (str.to_re "OO1")) (re.++ ((_ re.loop 5 7) (str.to_re "tZ]")) (re.++ ((_ re.loop 4 5) (str.to_re "c]+")) ((_ re.loop 2 19) (str.to_re "c")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 4 6) (str.to_re "M")) (re.++ ((_ re.loop 5 9) (str.to_re "]!T")) (re.++ ((_ re.loop 2 8) (str.to_re "K!")) ((_ re.loop 5 18) (str.to_re "0")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 5 5) (str.to_re "9")) (re.++ ((_ re.loop 4 16) (str.to_re "S?")) (re.++ ((_ re.loop 5 8) (str.to_re "\\p")) ((_ re.loop 1 7) (str.to_re "M")))))) ((_ re.loop 0 5) (re.++ ((_ re.loop 3 10) (str.to_re "lQ^")) (re.++ ((_ re.loop 1 11) (str.to_re "+")) (re.++ ((_ re.loop 5 5) (str.to_re "aO")) ((_ re.loop 3 10) (str.to_re "FJ")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
