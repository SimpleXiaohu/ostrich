(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 3 6) (str.to_re "8")) (re.++ ((_ re.loop 1 5) (str.to_re "+C")) (re.++ ((_ re.loop 1 6) (str.to_re "Nw")) ((_ re.loop 4 12) (str.to_re "6PV")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 2 10) (str.to_re "}I")) (re.++ ((_ re.loop 0 5) (str.to_re "X]")) (re.++ ((_ re.loop 5 6) (str.to_re "gNN")) ((_ re.loop 0 6) (str.to_re "\u0022")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 5 8) (str.to_re "C")) (re.++ ((_ re.loop 0 7) (str.to_re "bi}")) (re.++ ((_ re.loop 3 17) (str.to_re "5;")) ((_ re.loop 2 14) (str.to_re "*")))))) ((_ re.loop 1 4) (re.++ ((_ re.loop 3 5) (str.to_re "E?")) (re.++ ((_ re.loop 2 18) (str.to_re "{sx")) (re.++ ((_ re.loop 3 5) (str.to_re "zU")) ((_ re.loop 3 9) (str.to_re "VH")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
