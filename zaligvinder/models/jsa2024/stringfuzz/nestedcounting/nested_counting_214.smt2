(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 1 9) (str.to_re "[")) (re.++ ((_ re.loop 2 18) (str.to_re "x")) (re.++ ((_ re.loop 0 17) (str.to_re "e")) ((_ re.loop 1 19) (str.to_re "/")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 1 14) (str.to_re "y)R")) (re.++ ((_ re.loop 5 15) (str.to_re "F")) (re.++ ((_ re.loop 1 12) (str.to_re "`6F")) ((_ re.loop 1 12) (str.to_re "(?g")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 5 13) (str.to_re "##c")) (re.++ ((_ re.loop 3 12) (str.to_re "8")) (re.++ ((_ re.loop 5 12) (str.to_re "rp0")) ((_ re.loop 1 17) (str.to_re "C")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 5 6) (str.to_re "Z")) (re.++ ((_ re.loop 2 9) (str.to_re "X/")) (re.++ ((_ re.loop 2 15) (str.to_re "O")) ((_ re.loop 0 6) (str.to_re "A")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
