(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 1 20) (str.to_re "L")) (re.++ ((_ re.loop 3 7) (str.to_re "Ha~")) (re.++ ((_ re.loop 4 14) (str.to_re ".L")) ((_ re.loop 3 13) (str.to_re ">m")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 2 11) (str.to_re "&J")) (re.++ ((_ re.loop 0 7) (str.to_re "7")) (re.++ ((_ re.loop 3 13) (str.to_re "0j")) ((_ re.loop 0 18) (str.to_re "[`<")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 2 11) (str.to_re "_\u0022")) (re.++ ((_ re.loop 1 15) (str.to_re "0g")) (re.++ ((_ re.loop 1 13) (str.to_re "%")) ((_ re.loop 0 20) (str.to_re "n")))))) ((_ re.loop 0 4) (re.++ ((_ re.loop 4 14) (str.to_re "8BQ")) (re.++ ((_ re.loop 2 13) (str.to_re "\u0022")) (re.++ ((_ re.loop 0 18) (str.to_re "=ZO")) ((_ re.loop 3 6) (str.to_re "$")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
