(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 1) (re.++ ((_ re.loop 4 19) (str.to_re "w")) (re.++ ((_ re.loop 3 19) (str.to_re "*R*")) (re.++ ((_ re.loop 1 16) (str.to_re "RE")) ((_ re.loop 1 11) (str.to_re "Xa")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 4 19) (str.to_re "NXJ")) (re.++ ((_ re.loop 4 17) (str.to_re "\u0022@")) (re.++ ((_ re.loop 2 20) (str.to_re "D/H")) ((_ re.loop 4 20) (str.to_re "9J3")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 5 19) (str.to_re "BN`")) (re.++ ((_ re.loop 2 9) (str.to_re "`X")) (re.++ ((_ re.loop 5 18) (str.to_re "o")) ((_ re.loop 2 11) (str.to_re "o8")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 1 14) (str.to_re "kB+")) (re.++ ((_ re.loop 3 17) (str.to_re "o@A")) (re.++ ((_ re.loop 5 7) (str.to_re "_s")) ((_ re.loop 1 19) (str.to_re "N")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
