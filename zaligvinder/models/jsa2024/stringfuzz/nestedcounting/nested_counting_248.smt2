(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 3 5) (str.to_re "zH")) (re.++ ((_ re.loop 3 5) (str.to_re "vT")) (re.++ ((_ re.loop 4 7) (str.to_re "qJ}")) ((_ re.loop 1 13) (str.to_re "S")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 5 7) (str.to_re "}")) (re.++ ((_ re.loop 2 10) (str.to_re "I")) (re.++ ((_ re.loop 5 11) (str.to_re "x")) ((_ re.loop 3 8) (str.to_re "\u0022")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 3 20) (str.to_re "h")) (re.++ ((_ re.loop 3 19) (str.to_re "O*-")) (re.++ ((_ re.loop 0 13) (str.to_re "g2")) ((_ re.loop 1 7) (str.to_re "p")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 3 14) (str.to_re "8$4")) (re.++ ((_ re.loop 0 8) (str.to_re "+")) (re.++ ((_ re.loop 4 16) (str.to_re "+X")) ((_ re.loop 5 13) (str.to_re "]88")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
