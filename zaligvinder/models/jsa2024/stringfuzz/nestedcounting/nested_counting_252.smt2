(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 2 8) (str.to_re "_")) (re.++ ((_ re.loop 1 10) (str.to_re "\\")) (re.++ ((_ re.loop 0 9) (str.to_re "de")) ((_ re.loop 0 15) (str.to_re "yO!")))))) (re.++ ((_ re.loop 0 1) (re.++ ((_ re.loop 5 7) (str.to_re "Dc")) (re.++ ((_ re.loop 5 5) (str.to_re "wt")) (re.++ ((_ re.loop 3 14) (str.to_re "`A?")) ((_ re.loop 4 6) (str.to_re ":")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 5 9) (str.to_re "7kG")) (re.++ ((_ re.loop 2 5) (str.to_re "^{")) (re.++ ((_ re.loop 1 14) (str.to_re "9D(")) ((_ re.loop 0 20) (str.to_re "}e")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 2 10) (str.to_re "cE(")) (re.++ ((_ re.loop 0 7) (str.to_re "##")) (re.++ ((_ re.loop 4 15) (str.to_re "Y(")) ((_ re.loop 1 15) (str.to_re "6")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
