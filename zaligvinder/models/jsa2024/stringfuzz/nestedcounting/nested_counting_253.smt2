(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 1 19) (str.to_re "1")) (re.++ ((_ re.loop 4 7) (str.to_re "2l")) (re.++ ((_ re.loop 0 18) (str.to_re "g;%")) ((_ re.loop 5 6) (str.to_re "E")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 3 19) (str.to_re "0K")) (re.++ ((_ re.loop 5 18) (str.to_re "nnf")) (re.++ ((_ re.loop 2 5) (str.to_re "C{o")) ((_ re.loop 2 7) (str.to_re "Nx")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 4 20) (str.to_re "g")) (re.++ ((_ re.loop 0 9) (str.to_re "&w")) (re.++ ((_ re.loop 2 5) (str.to_re "Y^B")) ((_ re.loop 2 8) (str.to_re "hjd")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 1 20) (str.to_re "CA")) (re.++ ((_ re.loop 5 11) (str.to_re "$y")) (re.++ ((_ re.loop 4 14) (str.to_re "/")) ((_ re.loop 3 15) (str.to_re "B")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
