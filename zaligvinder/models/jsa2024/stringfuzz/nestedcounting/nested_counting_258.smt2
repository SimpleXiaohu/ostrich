(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 4 5) (str.to_re "'")) (re.++ ((_ re.loop 5 10) (str.to_re "E4")) (re.++ ((_ re.loop 4 15) (str.to_re "h")) ((_ re.loop 2 11) (str.to_re "}")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 3 14) (str.to_re "{")) (re.++ ((_ re.loop 0 10) (str.to_re "QpD")) (re.++ ((_ re.loop 4 9) (str.to_re ":<")) ((_ re.loop 2 7) (str.to_re "3")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 4 20) (str.to_re "dn")) (re.++ ((_ re.loop 3 18) (str.to_re "K")) (re.++ ((_ re.loop 0 6) (str.to_re "Q")) ((_ re.loop 5 18) (str.to_re "y")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 3 12) (str.to_re "A")) (re.++ ((_ re.loop 2 16) (str.to_re "{)t")) (re.++ ((_ re.loop 2 17) (str.to_re "Ir")) ((_ re.loop 5 10) (str.to_re "{LE")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
