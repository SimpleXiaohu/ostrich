(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 1 11) (str.to_re "G")) (re.++ ((_ re.loop 3 13) (str.to_re "_4")) (re.++ ((_ re.loop 3 20) (str.to_re "?t")) ((_ re.loop 4 13) (str.to_re ";")))))) (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 0 11) (str.to_re "BF")) (re.++ ((_ re.loop 2 20) (str.to_re "DJ")) (re.++ ((_ re.loop 5 10) (str.to_re "'")) ((_ re.loop 0 13) (str.to_re "z;")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 0 11) (str.to_re "X%m")) (re.++ ((_ re.loop 4 12) (str.to_re "E")) (re.++ ((_ re.loop 5 11) (str.to_re "d\u0022")) ((_ re.loop 0 9) (str.to_re "\u0022")))))) ((_ re.loop 1 3) (re.++ ((_ re.loop 1 19) (str.to_re "{")) (re.++ ((_ re.loop 0 16) (str.to_re "-DT")) (re.++ ((_ re.loop 0 10) (str.to_re "!N")) ((_ re.loop 1 17) (str.to_re "lTu")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
