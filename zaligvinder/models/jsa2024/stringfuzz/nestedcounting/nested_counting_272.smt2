(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 0 11) (str.to_re "s")) (re.++ ((_ re.loop 1 14) (str.to_re "Mo,")) (re.++ ((_ re.loop 4 20) (str.to_re "Jz$")) ((_ re.loop 0 10) (str.to_re "a<T")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 4 14) (str.to_re "G")) (re.++ ((_ re.loop 0 8) (str.to_re ",F]")) (re.++ ((_ re.loop 2 19) (str.to_re "EUb")) ((_ re.loop 1 9) (str.to_re "8bb")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 3 17) (str.to_re "1")) (re.++ ((_ re.loop 3 14) (str.to_re "18U")) (re.++ ((_ re.loop 3 16) (str.to_re "xL")) ((_ re.loop 4 17) (str.to_re "4\u0022z")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 1 15) (str.to_re ")d")) (re.++ ((_ re.loop 3 14) (str.to_re "Z=!")) (re.++ ((_ re.loop 3 12) (str.to_re "G_?")) ((_ re.loop 5 18) (str.to_re "}")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
