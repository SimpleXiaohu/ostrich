(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 3 13) (str.to_re "[")) (re.++ ((_ re.loop 3 13) (str.to_re "oX")) (re.++ ((_ re.loop 5 19) (str.to_re "e<A")) ((_ re.loop 3 6) (str.to_re "ab")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 1 15) (str.to_re "d7")) (re.++ ((_ re.loop 1 17) (str.to_re "((\u0022")) (re.++ ((_ re.loop 4 17) (str.to_re "K{o")) ((_ re.loop 3 15) (str.to_re "!t%")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 5 13) (str.to_re "5{O")) (re.++ ((_ re.loop 1 17) (str.to_re "`.:")) (re.++ ((_ re.loop 0 19) (str.to_re "X")) ((_ re.loop 4 5) (str.to_re "X")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 2 13) (str.to_re "9R")) (re.++ ((_ re.loop 2 7) (str.to_re "i]8")) (re.++ ((_ re.loop 1 12) (str.to_re "4^")) ((_ re.loop 5 12) (str.to_re "@")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
