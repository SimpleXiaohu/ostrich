(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 1 9) (str.to_re "]")) (re.++ ((_ re.loop 3 7) (str.to_re "h")) (re.++ ((_ re.loop 1 14) (str.to_re "A")) ((_ re.loop 0 13) (str.to_re "3")))))) (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 4 6) (str.to_re "<Tl")) (re.++ ((_ re.loop 1 14) (str.to_re "<")) (re.++ ((_ re.loop 0 7) (str.to_re "m'")) ((_ re.loop 0 20) (str.to_re "z")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 5 16) (str.to_re "P")) (re.++ ((_ re.loop 3 18) (str.to_re "1[")) (re.++ ((_ re.loop 5 11) (str.to_re "jv")) ((_ re.loop 4 9) (str.to_re "C2")))))) ((_ re.loop 0 2) (re.++ ((_ re.loop 5 19) (str.to_re "S}L")) (re.++ ((_ re.loop 4 9) (str.to_re "}")) (re.++ ((_ re.loop 4 5) (str.to_re "$%6")) ((_ re.loop 1 6) (str.to_re "?")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
