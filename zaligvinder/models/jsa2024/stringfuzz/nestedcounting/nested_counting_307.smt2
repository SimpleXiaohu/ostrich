(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 1) (re.++ ((_ re.loop 5 14) (str.to_re "s")) (re.++ ((_ re.loop 4 11) (str.to_re "S,")) (re.++ ((_ re.loop 0 20) (str.to_re "['I")) ((_ re.loop 1 19) (str.to_re "D,T")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 0 13) (str.to_re "8R")) (re.++ ((_ re.loop 5 8) (str.to_re "tu")) (re.++ ((_ re.loop 1 13) (str.to_re "A\u0022A")) ((_ re.loop 0 15) (str.to_re "`-{")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 3 18) (str.to_re "boj")) (re.++ ((_ re.loop 3 8) (str.to_re "3c!")) (re.++ ((_ re.loop 2 8) (str.to_re "[AK")) ((_ re.loop 3 14) (str.to_re "oMt")))))) ((_ re.loop 0 5) (re.++ ((_ re.loop 4 7) (str.to_re "E")) (re.++ ((_ re.loop 4 6) (str.to_re "qBs")) (re.++ ((_ re.loop 3 14) (str.to_re "rD")) ((_ re.loop 5 12) (str.to_re "zH")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
