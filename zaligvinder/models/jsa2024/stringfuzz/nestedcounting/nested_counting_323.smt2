(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 5 10) (str.to_re "1")) (re.++ ((_ re.loop 2 5) (str.to_re "S")) (re.++ ((_ re.loop 3 11) (str.to_re "N")) ((_ re.loop 2 20) (str.to_re "3=")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 0 10) (str.to_re "@BO")) (re.++ ((_ re.loop 0 17) (str.to_re "Ro")) (re.++ ((_ re.loop 2 17) (str.to_re "Y8a")) ((_ re.loop 3 16) (str.to_re "xO]")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 0 8) (str.to_re "oQ6")) (re.++ ((_ re.loop 0 9) (str.to_re "2")) (re.++ ((_ re.loop 4 7) (str.to_re "c-H")) ((_ re.loop 3 5) (str.to_re "o8")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 0 9) (str.to_re "+")) (re.++ ((_ re.loop 3 19) (str.to_re "JE_")) (re.++ ((_ re.loop 5 13) (str.to_re "96")) ((_ re.loop 3 6) (str.to_re "[;")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
