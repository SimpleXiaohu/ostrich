(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 0 17) (str.to_re "nqY")) (re.++ ((_ re.loop 2 5) (str.to_re "w3")) (re.++ ((_ re.loop 3 15) (str.to_re "1")) ((_ re.loop 0 18) (str.to_re "E")))))) (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 2 13) (str.to_re "h")) (re.++ ((_ re.loop 5 9) (str.to_re "/")) (re.++ ((_ re.loop 0 17) (str.to_re "[_2")) ((_ re.loop 2 12) (str.to_re "(%m")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 0 19) (str.to_re "Rt")) (re.++ ((_ re.loop 3 13) (str.to_re "/&W")) (re.++ ((_ re.loop 3 20) (str.to_re "6]")) ((_ re.loop 3 7) (str.to_re ":>L")))))) ((_ re.loop 0 1) (re.++ ((_ re.loop 1 15) (str.to_re "FM&")) (re.++ ((_ re.loop 1 9) (str.to_re "}Ic")) (re.++ ((_ re.loop 5 14) (str.to_re "[N")) ((_ re.loop 2 6) (str.to_re "jVl")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
