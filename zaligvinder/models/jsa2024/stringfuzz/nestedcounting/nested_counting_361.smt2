(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 5 10) (str.to_re "o$%")) (re.++ ((_ re.loop 4 7) (str.to_re "W")) (re.++ ((_ re.loop 2 5) (str.to_re "Z")) ((_ re.loop 4 17) (str.to_re "P")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 1 14) (str.to_re "x")) (re.++ ((_ re.loop 1 15) (str.to_re "QSJ")) (re.++ ((_ re.loop 4 8) (str.to_re "%")) ((_ re.loop 0 13) (str.to_re "ql")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 1 17) (str.to_re "Q")) (re.++ ((_ re.loop 3 8) (str.to_re "rZ")) (re.++ ((_ re.loop 4 15) (str.to_re "F>")) ((_ re.loop 0 13) (str.to_re "1gb")))))) ((_ re.loop 1 5) (re.++ ((_ re.loop 4 8) (str.to_re "py3")) (re.++ ((_ re.loop 2 15) (str.to_re "E\\+")) (re.++ ((_ re.loop 0 20) (str.to_re "_6")) ((_ re.loop 3 15) (str.to_re ">")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
