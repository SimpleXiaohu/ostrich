(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 0 17) (str.to_re "M(")) (re.++ ((_ re.loop 1 12) (str.to_re "9")) (re.++ ((_ re.loop 3 8) (str.to_re "E")) ((_ re.loop 5 6) (str.to_re "F+")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 2 9) (str.to_re "1{")) (re.++ ((_ re.loop 1 5) (str.to_re "l")) (re.++ ((_ re.loop 5 15) (str.to_re "L")) ((_ re.loop 2 14) (str.to_re ":E#")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 1 15) (str.to_re "(")) (re.++ ((_ re.loop 5 12) (str.to_re "5")) (re.++ ((_ re.loop 2 11) (str.to_re "2=c")) ((_ re.loop 3 16) (str.to_re ".")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 3 16) (str.to_re "G82")) (re.++ ((_ re.loop 1 7) (str.to_re "_\\U")) (re.++ ((_ re.loop 4 12) (str.to_re "zc")) ((_ re.loop 5 14) (str.to_re "U&V")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
