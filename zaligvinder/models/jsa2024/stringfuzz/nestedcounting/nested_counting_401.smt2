(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 2 16) (str.to_re "$4b")) (re.++ ((_ re.loop 4 10) (str.to_re "7")) (re.++ ((_ re.loop 2 19) (str.to_re "h\u0022")) ((_ re.loop 4 6) (str.to_re "S")))))) (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 4 17) (str.to_re "i")) (re.++ ((_ re.loop 1 13) (str.to_re ">")) (re.++ ((_ re.loop 4 13) (str.to_re "5p:")) ((_ re.loop 4 5) (str.to_re "%")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 5 12) (str.to_re "3C")) (re.++ ((_ re.loop 4 6) (str.to_re "v")) (re.++ ((_ re.loop 5 5) (str.to_re "NK")) ((_ re.loop 0 16) (str.to_re "t")))))) ((_ re.loop 0 4) (re.++ ((_ re.loop 3 9) (str.to_re "W")) (re.++ ((_ re.loop 0 13) (str.to_re "|^")) (re.++ ((_ re.loop 2 18) (str.to_re "M6")) ((_ re.loop 3 18) (str.to_re "1K")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
