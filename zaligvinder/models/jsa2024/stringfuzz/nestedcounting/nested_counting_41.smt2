(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 0 15) (str.to_re "4")) (re.++ ((_ re.loop 3 16) (str.to_re "iuZ")) (re.++ ((_ re.loop 1 7) (str.to_re "x>|")) ((_ re.loop 3 14) (str.to_re "}<q")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 1 19) (str.to_re "<`")) (re.++ ((_ re.loop 0 18) (str.to_re "]{;")) (re.++ ((_ re.loop 2 15) (str.to_re "g6")) ((_ re.loop 5 12) (str.to_re ")^(")))))) (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 5 17) (str.to_re "fS&")) (re.++ ((_ re.loop 0 10) (str.to_re "b")) (re.++ ((_ re.loop 4 9) (str.to_re "N")) ((_ re.loop 4 6) (str.to_re "h3")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 4 12) (str.to_re ":zc")) (re.++ ((_ re.loop 1 7) (str.to_re "'\u0022")) (re.++ ((_ re.loop 3 20) (str.to_re "k}")) ((_ re.loop 4 15) (str.to_re "h")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
