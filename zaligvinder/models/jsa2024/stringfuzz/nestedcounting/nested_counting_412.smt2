(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 0 18) (str.to_re "r'7")) (re.++ ((_ re.loop 5 7) (str.to_re "s")) (re.++ ((_ re.loop 2 9) (str.to_re "+")) ((_ re.loop 4 9) (str.to_re "8,")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 4 12) (str.to_re "4")) (re.++ ((_ re.loop 1 10) (str.to_re "eA")) (re.++ ((_ re.loop 1 17) (str.to_re "~")) ((_ re.loop 4 12) (str.to_re "0h[")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 3 9) (str.to_re "|K=")) (re.++ ((_ re.loop 0 9) (str.to_re "ZH\u0022")) (re.++ ((_ re.loop 3 19) (str.to_re "QQ")) ((_ re.loop 2 10) (str.to_re "\\")))))) ((_ re.loop 1 2) (re.++ ((_ re.loop 1 20) (str.to_re "8")) (re.++ ((_ re.loop 5 15) (str.to_re "eg")) (re.++ ((_ re.loop 4 8) (str.to_re "*J")) ((_ re.loop 1 11) (str.to_re "-")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
