(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 3 16) (str.to_re "R(U")) (re.++ ((_ re.loop 0 14) (str.to_re "`k\u0022")) (re.++ ((_ re.loop 2 12) (str.to_re ">,")) ((_ re.loop 2 8) (str.to_re "O6-")))))) (re.++ ((_ re.loop 0 1) (re.++ ((_ re.loop 4 6) (str.to_re "P!")) (re.++ ((_ re.loop 3 6) (str.to_re "K")) (re.++ ((_ re.loop 2 9) (str.to_re ";-")) ((_ re.loop 3 19) (str.to_re "+A~")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 3 14) (str.to_re "1g")) (re.++ ((_ re.loop 4 18) (str.to_re "KB")) (re.++ ((_ re.loop 1 15) (str.to_re "n7p")) ((_ re.loop 2 9) (str.to_re "_HB")))))) ((_ re.loop 0 5) (re.++ ((_ re.loop 1 9) (str.to_re "=cx")) (re.++ ((_ re.loop 0 10) (str.to_re "8>P")) (re.++ ((_ re.loop 5 14) (str.to_re "aK")) ((_ re.loop 1 7) (str.to_re "kE")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
