(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 5 10) (str.to_re "`o\u0022")) (re.++ ((_ re.loop 4 16) (str.to_re "R")) (re.++ ((_ re.loop 1 13) (str.to_re "c=s")) ((_ re.loop 1 19) (str.to_re "5Ga")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 5 15) (str.to_re "Hf{")) (re.++ ((_ re.loop 2 10) (str.to_re "2")) (re.++ ((_ re.loop 4 10) (str.to_re "Rh")) ((_ re.loop 4 17) (str.to_re "X")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 2 19) (str.to_re "A")) (re.++ ((_ re.loop 1 15) (str.to_re "b")) (re.++ ((_ re.loop 1 7) (str.to_re "Y(R")) ((_ re.loop 2 7) (str.to_re "`hI")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 4 19) (str.to_re "}")) (re.++ ((_ re.loop 4 17) (str.to_re "MzJ")) (re.++ ((_ re.loop 2 5) (str.to_re "*")) ((_ re.loop 1 16) (str.to_re "?F")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
