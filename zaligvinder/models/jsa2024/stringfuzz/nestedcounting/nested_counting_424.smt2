(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 4 11) (str.to_re "igp")) (re.++ ((_ re.loop 3 14) (str.to_re "o|")) (re.++ ((_ re.loop 1 12) (str.to_re "i")) ((_ re.loop 5 8) (str.to_re "Mh")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 1 17) (str.to_re "P!")) (re.++ ((_ re.loop 0 15) (str.to_re "E^")) (re.++ ((_ re.loop 5 8) (str.to_re "Uf(")) ((_ re.loop 0 17) (str.to_re "H")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 1 12) (str.to_re "h")) (re.++ ((_ re.loop 2 7) (str.to_re "j5!")) (re.++ ((_ re.loop 0 19) (str.to_re "j")) ((_ re.loop 1 5) (str.to_re "@")))))) ((_ re.loop 0 4) (re.++ ((_ re.loop 5 8) (str.to_re "4")) (re.++ ((_ re.loop 0 14) (str.to_re "[n")) (re.++ ((_ re.loop 1 14) (str.to_re "j")) ((_ re.loop 3 8) (str.to_re "]8*")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
