(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 2 12) (str.to_re "?`")) (re.++ ((_ re.loop 2 9) (str.to_re "\\")) (re.++ ((_ re.loop 0 9) (str.to_re "p")) ((_ re.loop 5 9) (str.to_re ">;")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 5 7) (str.to_re "S")) (re.++ ((_ re.loop 5 19) (str.to_re "F")) (re.++ ((_ re.loop 0 12) (str.to_re "g\u0022C")) ((_ re.loop 5 15) (str.to_re "S0!")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 0 18) (str.to_re "d")) (re.++ ((_ re.loop 0 13) (str.to_re "O")) (re.++ ((_ re.loop 4 18) (str.to_re "+")) ((_ re.loop 2 13) (str.to_re ">0")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 5 5) (str.to_re "hU")) (re.++ ((_ re.loop 2 18) (str.to_re "B_")) (re.++ ((_ re.loop 1 17) (str.to_re "L")) ((_ re.loop 4 10) (str.to_re "?c")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
