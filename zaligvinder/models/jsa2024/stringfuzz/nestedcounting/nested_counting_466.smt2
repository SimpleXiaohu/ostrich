(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 4 16) (str.to_re "FY")) (re.++ ((_ re.loop 3 8) (str.to_re "[W")) (re.++ ((_ re.loop 5 14) (str.to_re "ua.")) ((_ re.loop 2 20) (str.to_re "Si")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 2 12) (str.to_re "j")) (re.++ ((_ re.loop 5 5) (str.to_re "1")) (re.++ ((_ re.loop 5 13) (str.to_re "n{")) ((_ re.loop 0 13) (str.to_re "{-")))))) (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 2 8) (str.to_re "@zV")) (re.++ ((_ re.loop 3 12) (str.to_re "}")) (re.++ ((_ re.loop 4 19) (str.to_re "e")) ((_ re.loop 1 15) (str.to_re "R")))))) ((_ re.loop 0 4) (re.++ ((_ re.loop 5 7) (str.to_re "F")) (re.++ ((_ re.loop 0 17) (str.to_re "<KH")) (re.++ ((_ re.loop 1 11) (str.to_re "OZ]")) ((_ re.loop 3 8) (str.to_re "cYr")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
