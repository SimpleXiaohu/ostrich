(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 2 13) (str.to_re "OS")) (re.++ ((_ re.loop 2 5) (str.to_re "4]")) (re.++ ((_ re.loop 5 14) (str.to_re "RD3")) ((_ re.loop 5 9) (str.to_re ";g")))))) (re.++ ((_ re.loop 1 4) (re.++ ((_ re.loop 0 20) (str.to_re "&r")) (re.++ ((_ re.loop 4 10) (str.to_re "+W\u0022")) (re.++ ((_ re.loop 4 14) (str.to_re "+<")) ((_ re.loop 5 7) (str.to_re "U#")))))) (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 5 12) (str.to_re "iB")) (re.++ ((_ re.loop 5 11) (str.to_re "*")) (re.++ ((_ re.loop 1 20) (str.to_re "^\u0022")) ((_ re.loop 2 12) (str.to_re "E")))))) ((_ re.loop 1 5) (re.++ ((_ re.loop 0 8) (str.to_re "H|{")) (re.++ ((_ re.loop 5 18) (str.to_re "Bc")) (re.++ ((_ re.loop 4 6) (str.to_re "2")) ((_ re.loop 5 10) (str.to_re "'\u0022")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
