(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 0 14) (str.to_re "U/~")) (re.++ ((_ re.loop 5 17) (str.to_re "2i4")) (re.++ ((_ re.loop 5 16) (str.to_re "(?")) ((_ re.loop 1 9) (str.to_re "3")))))) (re.++ ((_ re.loop 1 3) (re.++ ((_ re.loop 2 8) (str.to_re "p")) (re.++ ((_ re.loop 1 14) (str.to_re "E")) (re.++ ((_ re.loop 1 9) (str.to_re "z")) ((_ re.loop 0 20) (str.to_re "{")))))) (re.++ ((_ re.loop 0 1) (re.++ ((_ re.loop 2 10) (str.to_re ")")) (re.++ ((_ re.loop 1 20) (str.to_re "n'(")) (re.++ ((_ re.loop 2 17) (str.to_re "@")) ((_ re.loop 4 9) (str.to_re "+B9")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 0 12) (str.to_re "f")) (re.++ ((_ re.loop 3 14) (str.to_re ")")) (re.++ ((_ re.loop 2 5) (str.to_re "qrR")) ((_ re.loop 3 7) (str.to_re "B|")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
