(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 5) (re.++ ((_ re.loop 0 16) (str.to_re "bN")) (re.++ ((_ re.loop 1 16) (str.to_re "?`S")) (re.++ ((_ re.loop 5 14) (str.to_re "$")) ((_ re.loop 3 6) (str.to_re "P~&")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 3 10) (str.to_re "`.")) (re.++ ((_ re.loop 4 18) (str.to_re "{")) (re.++ ((_ re.loop 3 8) (str.to_re "(_")) ((_ re.loop 2 6) (str.to_re "2_")))))) (re.++ ((_ re.loop 0 4) (re.++ ((_ re.loop 0 19) (str.to_re "wq2")) (re.++ ((_ re.loop 1 7) (str.to_re ".d\u0022")) (re.++ ((_ re.loop 1 10) (str.to_re "'Eq")) ((_ re.loop 0 19) (str.to_re "E57")))))) ((_ re.loop 0 3) (re.++ ((_ re.loop 0 12) (str.to_re ")l8")) (re.++ ((_ re.loop 2 19) (str.to_re "CJ")) (re.++ ((_ re.loop 4 10) (str.to_re "6Ym")) ((_ re.loop 3 8) (str.to_re "%!{")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
