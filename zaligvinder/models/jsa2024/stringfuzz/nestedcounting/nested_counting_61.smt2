(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 3 8) (str.to_re "R")) (re.++ ((_ re.loop 4 6) (str.to_re "Rs,")) (re.++ ((_ re.loop 5 9) (str.to_re "A8")) ((_ re.loop 2 20) (str.to_re "3w")))))) (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 0 5) (str.to_re "{k2")) (re.++ ((_ re.loop 4 17) (str.to_re "U")) (re.++ ((_ re.loop 3 16) (str.to_re "A}E")) ((_ re.loop 2 13) (str.to_re "5;d")))))) (re.++ ((_ re.loop 1 5) (re.++ ((_ re.loop 4 8) (str.to_re "h")) (re.++ ((_ re.loop 2 5) (str.to_re "v")) (re.++ ((_ re.loop 4 11) (str.to_re "%")) ((_ re.loop 3 13) (str.to_re "3s")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 1 11) (str.to_re "\\")) (re.++ ((_ re.loop 3 6) (str.to_re "S")) (re.++ ((_ re.loop 4 13) (str.to_re "kX")) ((_ re.loop 4 7) (str.to_re "n,6")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
