(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 2 9) (str.to_re "?l")) (re.++ ((_ re.loop 2 16) (str.to_re "Lx")) (re.++ ((_ re.loop 2 18) (str.to_re "5C")) ((_ re.loop 2 16) (str.to_re "QK")))))) (re.++ ((_ re.loop 1 1) (re.++ ((_ re.loop 2 17) (str.to_re "&")) (re.++ ((_ re.loop 0 7) (str.to_re "!")) (re.++ ((_ re.loop 2 13) (str.to_re "+")) ((_ re.loop 2 16) (str.to_re ";Q")))))) (re.++ ((_ re.loop 0 2) (re.++ ((_ re.loop 5 19) (str.to_re "#1:")) (re.++ ((_ re.loop 4 10) (str.to_re "s")) (re.++ ((_ re.loop 1 16) (str.to_re "@2@")) ((_ re.loop 0 16) (str.to_re "1Le")))))) ((_ re.loop 1 6) (re.++ ((_ re.loop 0 5) (str.to_re "hEc")) (re.++ ((_ re.loop 3 6) (str.to_re "6O\u0022")) (re.++ ((_ re.loop 4 6) (str.to_re "/_")) ((_ re.loop 2 11) (str.to_re "R('")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
