(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 0 14) (str.to_re "y")) (re.++ ((_ re.loop 1 10) (str.to_re "y[g")) (re.++ ((_ re.loop 1 18) (str.to_re "3b^")) ((_ re.loop 5 6) (str.to_re "`")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 0 18) (str.to_re "\\QG")) (re.++ ((_ re.loop 1 19) (str.to_re "{.8")) (re.++ ((_ re.loop 5 11) (str.to_re "dpT")) ((_ re.loop 3 18) (str.to_re "Z")))))) (re.++ ((_ re.loop 1 6) (re.++ ((_ re.loop 5 11) (str.to_re "NS")) (re.++ ((_ re.loop 1 6) (str.to_re "1")) (re.++ ((_ re.loop 0 7) (str.to_re "<-")) ((_ re.loop 1 15) (str.to_re "'")))))) ((_ re.loop 0 6) (re.++ ((_ re.loop 1 16) (str.to_re ")")) (re.++ ((_ re.loop 5 14) (str.to_re "mr?")) (re.++ ((_ re.loop 2 5) (str.to_re "X")) ((_ re.loop 4 5) (str.to_re "H")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
