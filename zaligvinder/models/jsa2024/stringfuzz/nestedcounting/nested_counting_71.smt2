(set-logic QF_SLIA)
(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ ((_ re.loop 0 3) (re.++ ((_ re.loop 0 10) (str.to_re "):")) (re.++ ((_ re.loop 3 13) (str.to_re "gA%")) (re.++ ((_ re.loop 5 6) (str.to_re "/2@")) ((_ re.loop 1 18) (str.to_re "c(=")))))) (re.++ ((_ re.loop 0 6) (re.++ ((_ re.loop 0 9) (str.to_re "?")) (re.++ ((_ re.loop 2 9) (str.to_re "G^o")) (re.++ ((_ re.loop 3 5) (str.to_re "g-")) ((_ re.loop 1 8) (str.to_re "#")))))) (re.++ ((_ re.loop 1 2) (re.++ ((_ re.loop 4 15) (str.to_re "W")) (re.++ ((_ re.loop 1 13) (str.to_re "\\2^")) (re.++ ((_ re.loop 2 20) (str.to_re "ja.")) ((_ re.loop 1 12) (str.to_re "f")))))) ((_ re.loop 0 5) (re.++ ((_ re.loop 4 10) (str.to_re "vJ")) (re.++ ((_ re.loop 2 10) (str.to_re "6ly")) (re.++ ((_ re.loop 0 6) (str.to_re "n")) ((_ re.loop 0 9) (str.to_re "K8")))))))))))
(assert (not (str.in_re var0 (re.++ (re.* re.allchar) (re.++ (re.union (str.to_re "<") (re.union (str.to_re ">") (re.union (str.to_re "'") (re.union (str.to_re "\u0022") (str.to_re "&"))))) (re.* re.allchar))))))
(assert (<= 50 (str.len var0)))
(check-sat)
(get-model)
